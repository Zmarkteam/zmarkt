///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            01/Nov/2011  10:26:17 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\Source\SimpleRfid.c                 /
//    Command line       =  -f "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func       /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "H:\3gbox\zigbee\zigbee×Ûº /
//                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack             /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"      /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "H:\3gbox\zigbee\zigbee×Ûº /
//                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack             /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\Sou /
//                          rce\SimpleRfid.c" -D NWK_AUTO_POLL -D             /
//                          HOLD_AUTO_START -D REFLECTOR -D xPOWER_SAVING -D  /
//                          NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK   /
//                          -D xMT_SYS_FUNC -D xMT_SAPI_FUNC -D               /
//                          xMT_SAPI_CB_FUNC -lC "H:\3gbox\zigbee\zigbee×ÛºÏÓ /
//                          ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack               /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\SimpleCo2Sensor\List\" -lA                  /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\SimpleCo2Sensor\List\"     /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\SimpleCo2Sensor\Obj\" -e   /
//                          --require_prototypes --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\" -I                       /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\Source\" -I             /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"  /
//                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\..\..\Components /
//                          \hal\include\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃ /
//                          ÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                  /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\hal\target\CC2530 /
//                          EB\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\c /
//                          c2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstac /
//                          k\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\include\" -I "H:\3gbox\zigbee\zigbee×Ûº /
//                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack             /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\mac\high_level\"  /
//                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\" -I                         /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\" -I              /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\c /
//                          c2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstac /
//                          k\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\osal\include\" -I                           /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          osal\mcu\ccsoc\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ /
//                          ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\services\saddr\"  /
//                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\sdata\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ /
//                          ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack               /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\stack\af\" -I     /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\nwk\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ /
//                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                     /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\stack\sapi\" -I   /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sec\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ /
//                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                     /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\stack\sys\" -I    /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\zdo\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ /
//                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                     /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\zmac\" -I         /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\f8w\" -I "D:\Program Files\IAR               /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "D:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.4\8051\INC\CLIB\" -Ohz                          /
//    List file          =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\SimpleCo2Sensor\List\Simpl /
//                          eRfid.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SimpleRfid

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??datxor?relay
        FUNCTION ??datxor?relay,0203H
        FUNCTION ??paramRead?relay,0203H
        PUBLIC ??rfid_commands?relay
        FUNCTION ??rfid_commands?relay,0203H
        PUBLIC ??rfid_id?relay
        FUNCTION ??rfid_id?relay,0203H
        PUBLIC ??rfid_uart_init?relay
        FUNCTION ??rfid_uart_init?relay,0203H
        PUBLIC ??rfid_uart_recv?relay
        FUNCTION ??rfid_uart_recv?relay,0203H
        PUBLIC ??rfid_uart_send?relay
        FUNCTION ??rfid_uart_send?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HanderMsg?relay
        FUNCTION ??zb_HanderMsg?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBWEAK P0SEL
        PUBWEAK PERCFG
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBWEAK U0UCR
        PUBWEAK _A_IRCON2
        PUBWEAK _A_TCON
        PUBLIC cmd
        PUBLIC dat
        PUBLIC datxor
        FUNCTION datxor,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION paramRead,0a1203H
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC rfid_commands
        FUNCTION rfid_commands,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC rfid_id
        FUNCTION rfid_id,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC rfid_uart_init
        FUNCTION rfid_uart_init,0203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC rfid_uart_recv
        FUNCTION rfid_uart_recv,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rfid_uart_send
        FUNCTION rfid_uart_send,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HanderMsg
        FUNCTION zb_HanderMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 87, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zb_StartRequest     SYMBOL "zb_StartRequest"
HalLedSet           SYMBOL "HalLedSet"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
ZMacGetReq          SYMBOL "ZMacGetReq"
MT_ReverseBytes     SYMBOL "MT_ReverseBytes"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??MT_ReverseBytes?relay SYMBOL "?relay", MT_ReverseBytes
??ZMacGetReq?relay  SYMBOL "?relay", ZMacGetReq
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zb_ReadConfiguration?relay SYMBOL "?relay", zb_ReadConfiguration
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
??zb_WriteConfiguration?relay SYMBOL "?relay", zb_WriteConfiguration
datxor              SYMBOL "datxor"
??datxor?relay      SYMBOL "?relay", datxor
rfid_commands       SYMBOL "rfid_commands"
??rfid_commands?relay SYMBOL "?relay", rfid_commands
rfid_id             SYMBOL "rfid_id"
??rfid_id?relay     SYMBOL "?relay", rfid_id
rfid_uart_init      SYMBOL "rfid_uart_init"
??rfid_uart_init?relay SYMBOL "?relay", rfid_uart_init
rfid_uart_recv      SYMBOL "rfid_uart_recv"
??rfid_uart_recv?relay SYMBOL "?relay", rfid_uart_recv
rfid_uart_send      SYMBOL "rfid_uart_send"
??rfid_uart_send?relay SYMBOL "?relay", rfid_uart_send
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HanderMsg        SYMBOL "zb_HanderMsg"
??zb_HanderMsg?relay SYMBOL "?relay", zb_HanderMsg
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ReverseBytes
        FUNCTION MT_ReverseBytes,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??MT_ReverseBytes?relay
        FUNCTION ??MT_ReverseBytes?relay,00H
        EXTERN ??ZMacGetReq?relay
        FUNCTION ??ZMacGetReq?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zb_ReadConfiguration?relay
        FUNCTION ??zb_ReadConfiguration?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,00H
        EXTERN ??zb_WriteConfiguration?relay
        FUNCTION ??zb_WriteConfiguration?relay,00H
        EXTERN sapi_TaskID

// H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\Source\SimpleRfid.c
//    1 
//    2 /**************************************************************************************************
//    3   Filename:       SimpleSwitch.c
//    4   Revised:        $Date: 2007-10-27 17:16:54 -0700 (Sat, 27 Oct 2007) $
//    5   Revision:       $Revision: 15793 $
//    6 
//    7   Description:    Sample application for a simple light switch utilizing the Simple API.
//    8 
//    9  
//   10   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com. 
//   39 **************************************************************************************************/
//   40 
//   41 /******************************************************************************
//   42  * INCLUDES
//   43  */
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "sapi.h"
//   47 #include "hal_key.h"

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c4H
// unsigned char volatile __sfr U0UCR
U0UCR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1
//   48 #include "hal_led.h"
//   49 #include "hal_adc.h"
//   50 #include "hal_mcu.h"
//   51 #include "SimpleApp.h"
//   52 
//   53 
//   54 #include "mt.h"
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 // Application States
//   61 #define APP_INIT                           0    // Initial state
//   62 #define APP_START                          1    // Sensor has joined network
//   63 #define APP_BOUND                          2    // Sensor is bound to collector
//   64 
//   65 // Application osal event identifiers
//   66 // Bit mask of events ( from 0x0000 to 0x00FF )
//   67 #define MY_START_EVT                0x0001
//   68 #define MY_REPORT_EVT               0x0002
//   69 
//   70 /*********************************************************************
//   71  * TYPEDEFS
//   72  */
//   73 
//   74 /*********************************************************************
//   75  * LOCAL VARIABLES
//   76  */
//   77 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   78 static uint8 myAppState = APP_INIT;
myAppState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   80 static uint16 myStartRetryDelay = 10000;      // milliseconds
myStartRetryDelay:
        DS 2
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   81 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   82 static uint16 myCheckCardDelay = 250;         //milliseconds
myCheckCardDelay:
        DS 2
        REQUIRE `?<Initializer for myCheckCardDelay>`
        REQUIRE __INIT_XDATA_I
//   83 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   84 static uint8 rfidOn = 1;
rfidOn:
        DS 1
        REQUIRE `?<Initializer for rfidOn>`
        REQUIRE __INIT_XDATA_I
//   85 /*********************************************************************
//   86  * GLOBAL VARIABLES
//   87  */
//   88 
//   89 // Inputs and Outputs for Switch device
//   90 #define NUM_IN_CMD_SENSOR                 2
//   91 #define NUM_OUT_CMD_SENSOR                3
//   92 
//   93 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   94 const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
zb_InCmdList:
        DW 1, 2
//   95 {
//   96   ID_CMD_READ_REQ,
//   97   ID_CMD_WRITE_REQ,
//   98 };

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   99 const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
zb_OutCmdList:
        DW 32769, 32770, 3
//  100 {
//  101     ID_CMD_READ_RES,
//  102     ID_CMD_WRITE_RES,
//  103     ID_CMD_REPORT,
//  104 };
//  105 
//  106 
//  107 
//  108 
//  109 
//  110 // Define SimpleDescriptor for Switch device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  111 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DW 3856, 3
        DB 1, 2
        DW zb_InCmdList
        DB 3
        DW zb_OutCmdList
//  112 {
//  113   MY_ENDPOINT_ID,             //  Endpoint
//  114   MY_PROFILE_ID,              //  Profile ID
//  115   DEV_ID_SENSOR,              //  Device ID
//  116   DEVICE_VERSION_SENSOR,      //  Device Version
//  117   0,                          //  Reserved
//  118   NUM_IN_CMD_SENSOR,          //  Number of Input Commands
//  119   (cId_t *) zb_InCmdList,             //  Input Command List
//  120   NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
//  121   (cId_t *) zb_OutCmdList     //  Output Command List
//  122 };
//  123 
//  124 /********************************************************
//  125  *
//  126  */
//  127 void zb_HanderMsg(osal_event_hdr_t *msg);
//  128 
//  129 /*********************************************************************
//  130  * LOCAL FUNCTIONS
//  131  */
//  132 
//  133 
//  134 static int paramWrite(uint16 pid, byte *dat);
//  135 static int paramRead(uint16 pid, byte *dat);
//  136 
//  137 
//  138 void rfid_uart_init(void);
//  139 void rfid_uart_send(unsigned char ch);
//  140 int  rfid_uart_recv(void);
//  141 void rfid_commands(char *cmd, int len);
//  142 char datxor(char *dat, int len);
//  143 int rfid_id(char *id);
//  144 
//  145 /*****************************************************************************
//  146  * @fn          zb_HandleOsalEvent
//  147  *
//  148  * @brief       The zb_HandleOsalEvent function is called by the operating
//  149  *              system when a task event is set
//  150  *
//  151  * @param       event - Bitmask containing the events that have been set
//  152  *
//  153  * @return      none
//  154  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  155 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
//  156 {
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, rfid_uart_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, rfid_id
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  157  
//  158    if (event & ZB_ENTRY_EVENT) {
        MOV     A,#0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??zb_HandleOsalEvent_0
        MOV     A,R1
??zb_HandleOsalEvent_0:
        JZ      ??CrossCallReturnLabel_0
//  159         uint8 startOptions;
//  160         uint8 logicalType;
//  161   
//  162         zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_ReadConfiguration?relay
//  163         if ( logicalType != ZG_DEVICETYPE_ENDDEVICE )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??zb_HandleOsalEvent_1
//  164         //if ( logicalType != ZG_DEVICETYPE_ROUTER )
//  165         //if ( logicalType != ZG_DEVICETYPE_COORDINATOR )
//  166         {
//  167           logicalType = ZG_DEVICETYPE_ENDDEVICE;
        MOV     A,#0x2
        MOVX    @DPTR,A
//  168           //logicalType = ZG_DEVICETYPE_ROUTER;
//  169           //logicalType = ZG_DEVICETYPE_COORDINATOR;
//  170           zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_WriteConfiguration?relay
//  171         }
//  172 
//  173         // Do more configuration if necessary and then restart device with auto-start bit set
//  174         // write endpoint to simple desc...dont pass it in start req..then reset
//  175         zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
??zb_HandleOsalEvent_1:
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_ReadConfiguration?relay
//  176         if (startOptions != ZCD_STARTOPT_AUTO_START) {
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??zb_HandleOsalEvent_2
//  177           startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     A,#0x4
        MOVX    @DPTR,A
//  178           zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_WriteConfiguration?relay
//  179         } 
//  180         
//  181         rfid_uart_init();
??zb_HandleOsalEvent_2:
        ; Setup parameters for call to function rfid_uart_init
        LCALL   ??rfid_uart_init?relay
//  182         
//  183         osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
//  184   }
//  185   
//  186   if ( event & MY_START_EVT )
??CrossCallReturnLabel_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleOsalEvent_3
//  187   {  
//  188     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  189   }
//  190 
//  191   if (event & MY_REPORT_EVT) {
??zb_HandleOsalEvent_3:
        MOV     A,R6
        ANL     A,#0x2
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_1 & 0xFFFF
//  192 
//  193     if (rfidOn) {
        MOV     DPTR,#rfidOn
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
//  194       static char card = 0;
//  195       static char id[4];
//  196       
//  197       //rfid_uart_init();
//  198       
//  199       if (rfid_id(id)) {
        ; Setup parameters for call to function rfid_id
        MOV     R2,#(??id & 0xff)
        MOV     R3,#((??id >> 8) & 0xff)
        LCALL   ??rfid_id?relay
        MOV     A,R2
        JNZ     ??zb_HandleOsalEvent_5
        MOV     A,R3
??zb_HandleOsalEvent_5:
        MOV     DPTR,#??card
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_6 & 0xFFFF
//  200         if (card == 0) {
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zb_HandleOsalEvent_7 & 0xFFFF
//  201           card = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  202           HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        LCALL   ??HalLedSet?relay
//  203           if (myAppState == APP_START) {
        MOV     DPTR,#myAppState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??zb_HandleOsalEvent_7 & 0xFFFF
//  204             char dat[6];
//  205             dat[0] = 0x08;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x8
        MOVX    @DPTR,A
//  206             dat[1] = 0x10;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x10
        MOVX    @DPTR,A
//  207             dat[2] = id[0];
        MOV     DPTR,#??id
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  208             dat[3] = id[1];
        MOV     DPTR,#(??id + 1)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  209             dat[4] = id[2];
        MOV     DPTR,#(??id + 2)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  210             dat[5] = id[3];
        MOV     DPTR,#(??id + 3)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  211             zb_SendDataRequest(0, ID_CMD_REPORT, 6, dat, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,#0x6
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  212           }
//  213         }
//  214         myCheckCardDelay = 1000;
??zb_HandleOsalEvent_7:
        MOV     DPTR,#myCheckCardDelay
        MOV     A,#-0x18
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x3
        SJMP    ??zb_HandleOsalEvent_8
//  215       } else {
//  216         if (card) {
??zb_HandleOsalEvent_6:
        MOVX    A,@DPTR
        JZ      ??zb_HandleOsalEvent_9
//  217           card = 0;
        CLR     A
        MOVX    @DPTR,A
//  218           HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  219         }
//  220         myCheckCardDelay = 250;
??zb_HandleOsalEvent_9:
        MOV     DPTR,#myCheckCardDelay
        MOV     A,#-0x6
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
??zb_HandleOsalEvent_8:
        MOVX    @DPTR,A
//  221       }
//  222     }   
//  223     osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
??zb_HandleOsalEvent_4:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine2 & 0xFFFF
//  224   }
//  225   
//  226   
//  227   
//  228   
//  229   
//  230 }
??CrossCallReturnLabel_1:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOV     DPTR,#myCheckCardDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG XDATA_Z:XDATA:NOROOT(0)
??card:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
??id:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  231 /*********************************************************************
//  232  * @fn      zb_HandleKeys
//  233  *
//  234  * @brief   Handles all key events for this device.
//  235  *
//  236  * @param   shift - true if in shift/alt.
//  237  * @param   keys - bit field for key events. Valid entries:
//  238  *                 EVAL_SW4
//  239  *                 EVAL_SW3
//  240  *                 EVAL_SW2
//  241  *                 EVAL_SW1
//  242  *
//  243  * @return  none
//  244  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  245 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function zb_HandleKeys
//  246 {
        ; Saved register size: 0
        ; Auto size: 0
//  247  
//  248 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  249 /******************************************************************************
//  250  * @fn          zb_StartConfirm
//  251  *
//  252  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  253  *              after a start request operation completes
//  254  *
//  255  * @param       status - The status of the start operation.  Status of
//  256  *                       ZB_SUCCESS indicates the start operation completed
//  257  *                       successfully.  Else the status is an error code.
//  258  *
//  259  * @return      none
//  260  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  261 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function zb_StartConfirm
//  262 {
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  263   if ( status == ZB_SUCCESS )
        JNZ     ??zb_StartConfirm_0
//  264   {
//  265     myAppState = APP_START;
        MOV     A,#0x1
        MOV     DPTR,#myAppState
        MOVX    @DPTR,A
        SJMP    ??zb_StartConfirm_1
//  266     // Set event to bind to a collector
//  267     //osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
//  268   }
//  269   else
//  270   {
//  271     // Try joining again later with a delay
//  272     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        CFI EndBlock cfiBlock6
//  273   }
//  274 }
??zb_StartConfirm_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  275 /******************************************************************************
//  276  * @fn          zb_SendDataConfirm
//  277  *
//  278  * @brief       The zb_SendDataConfirm callback function is called by the
//  279  *              ZigBee after a send data operation completes
//  280  *
//  281  * @param       handle - The handle identifying the data transmission.
//  282  *              status - The status of the operation.
//  283  *
//  284  * @return      none
//  285  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  286 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function zb_SendDataConfirm
//  287 {
        ; Saved register size: 0
        ; Auto size: 0
//  288   if ( status != ZSuccess )
//  289   {
//  290     // Remove bindings to the existing collector
//  291   }
//  292   else
//  293   {
//  294     // send data ??
//  295   }
//  296 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  297 /******************************************************************************
//  298  * @fn          zb_BindConfirm
//  299  *
//  300  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  301  *              after a bind operation completes.
//  302  *
//  303  * @param       commandId - The command ID of the binding being confirmed.
//  304  *              status - The status of the bind operation.
//  305  *
//  306  * @return      none
//  307  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  308 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function zb_BindConfirm
//  309 {
        ; Saved register size: 0
        ; Auto size: 0
//  310 
//  311 
//  312 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  313 /******************************************************************************
//  314  * @fn          zb_AllowBindConfirm
//  315  *
//  316  * @brief       Indicates when another device attempted to bind to this device
//  317  *
//  318  * @param
//  319  *
//  320  * @return      none
//  321  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  322 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
//  323 {
        ; Saved register size: 0
        ; Auto size: 0
//  324 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  325 /******************************************************************************
//  326  * @fn          zb_FindDeviceConfirm
//  327  *
//  328  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  329  *              ZigBee stack when a find device operation completes.
//  330  *
//  331  * @param       searchType - The type of search that was performed.
//  332  *              searchKey - Value that the search was executed on.
//  333  *              result - The result of the search.
//  334  *
//  335  * @return      none
//  336  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  337 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
//  338 {
        ; Saved register size: 0
        ; Auto size: 0
//  339 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
//  340 
//  341 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  342 void zb_HanderMsg(osal_event_hdr_t *msg)
zb_HanderMsg:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function zb_HanderMsg
//  343 {
        ; Saved register size: 0
        ; Auto size: 0
//  344 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
//  345 
//  346 /******************************************************************************
//  347  * @fn          zb_ReceiveDataIndication
//  348  *
//  349  * @brief       The zb_ReceiveDataIndication callback function is called
//  350  *              asynchronously by the ZigBee stack to notify the application
//  351  *              when data is received from a peer device.
//  352  *
//  353  * @param       source - The short address of the peer device that sent the data
//  354  *              command - The commandId associated with the data
//  355  *              len - The number of bytes in the pData parameter
//  356  *              pData - The data sent by the peer device
//  357  *
//  358  * @return      none
//  359  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
zb_ReceiveDataIndication:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
//  361 {
        FUNCALL zb_ReceiveDataIndication, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, paramRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0x52
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  362   int i;
//  363   uint16 pid;
//  364   byte dat[64];
//  365   byte rlen = 1;
        MOV     ?V0 + 6,#0x1
//  366   int ret;
//  367   
//  368   HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  369   HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK ); 
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  370   switch (command) {
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zb_ReceiveDataIndication>_0`:
        DATA
        DW        1
        DB        1
        DW        ??zb_ReceiveDataIndication_0
        DW        ??zb_ReceiveDataIndication_1
        DW        ??zb_ReceiveDataIndication_2
        CODE
//  371   case ID_CMD_WRITE_REQ:
//  372     for (i=0; i<len; i+=2) {
??zb_ReceiveDataIndication_2:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??zb_ReceiveDataIndication_3
//  373       pid = pData[i]<<8 | pData[i+1];
//  374       ret = paramWrite(pid, pData+2);
??zb_ReceiveDataIndication_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#rfidOn
        MOVX    @DPTR,A
//  375       if (ret <= 0) {
//  376         dat[0] = 1;
//  377         zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  378         return;
//  379       } 
//  380       i += ret;
        MOV     A,?V0 + 2
        ADD     A,#0x3
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??zb_ReceiveDataIndication_3:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 5
        JNC     ??zb_ReceiveDataIndication_5
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zb_ReceiveDataIndication_6
        MOV     A,#0x8
        XRL     A,R1
??zb_ReceiveDataIndication_6:
        JZ      ??zb_ReceiveDataIndication_4
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
??zb_ReceiveDataIndication_7:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x1
        MOV     R4,#0x2
        LJMP    ??zb_ReceiveDataIndication_8 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 82)
//  381     }
//  382     dat[0] = 0;
??zb_ReceiveDataIndication_5:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  383     zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,A
        SJMP    ??zb_ReceiveDataIndication_7
//  384     break;
//  385   case ID_CMD_READ_REQ:
//  386     for (i=0; i<len; i+=2) {
??zb_ReceiveDataIndication_1:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??zb_ReceiveDataIndication_9
//  387       pid = pData[i]<<8 | pData[i+1];
//  388       dat[rlen++] = pData[i];
//  389       dat[rlen++] = pData[i+1];
//  390       ret = paramRead(pid, dat+rlen);
//  391       if (ret <= 0) {
//  392         dat[0] = 1;
//  393         zb_SendDataRequest( source, ID_CMD_READ_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  394         return;
//  395       }
//  396       rlen += ret;
??zb_ReceiveDataIndication_10:
        MOV     A,R0
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??zb_ReceiveDataIndication_9:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 5
        JC      $+5
        LJMP    ??zb_ReceiveDataIndication_11 & 0xFFFF
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,R3
        MOVX    @DPTR,A
        INC     ?V0 + 6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     ?V0 + 6
        ; Setup parameters for call to function paramRead
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     R4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ??paramRead?relay
        MOV     ?V0 + 8,R2
        MOV     R0,?V0 + 8
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??zb_ReceiveDataIndication_10
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x1
        SJMP    ??zb_ReceiveDataIndication_12
        CFI CFA_XSP16 add(XSP16, 82)
//  397     }
//  398     dat[0] = 0;
??zb_ReceiveDataIndication_11:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  399     zb_SendDataRequest( source, ID_CMD_READ_RES, rlen, dat, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,?V0 + 6
??zb_ReceiveDataIndication_12:
        MOV     R4,#0x1
??zb_ReceiveDataIndication_8:
        MOV     R5,#-0x80
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 82)
//  400     break;
//  401   }
//  402 }
??zb_ReceiveDataIndication_0:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+-1
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  403 
//  404 
//  405 /******************************************************************************
//  406  * @fn          
//  407  *
//  408  * @brief       Reports temperature sensor reading
//  409  *
//  410  * @param
//  411  *
//  412  * @return
//  413  */
//  414 
//  415 
//  416 /******************************************************************************
//  417  * @fn          myApp_ReadTemperature
//  418  *
//  419  * @brief       Reports temperature sensor reading
//  420  *
//  421  * @param
//  422  *
//  423  * @return
//  424  */
//  425 
//  426 
//  427 static int paramWrite(uint16 pid, byte *dat)
//  428 {
//  429   int len = 0;
//  430   switch (pid) {
//  431   case 0x0801:
//  432     rfidOn = dat[0];
//  433     len = 1;
//  434     break;
//  435   }
//  436   return len;
//  437 }
//  438 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  439 static int paramRead(uint16 pid, byte *dat)
paramRead:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function paramRead
//  440 {
        FUNCALL paramRead, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL paramRead, MT_ReverseBytes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  441   int len = 0;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  442   switch (pid) {
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for paramRead>_0`:
        DATA
        DW        0
        DW        9
        DW        1
        DW        ??paramRead_0
        DW        2
        DW        ??paramRead_1
        DW        3
        DW        ??paramRead_2
        DW        4
        DW        ??paramRead_3
        DW        5
        DW        ??paramRead_4
        DW        20
        DW        ??paramRead_5
        DW        21
        DW        ??paramRead_6
        DW        2049
        DW        ??paramRead_7
        DW        2064
        DW        ??paramRead_8
        DW        ??paramRead_8
        CODE
//  443   case 0x0001:
//  444     dat[0] = 0x11; dat[1] = 0x33;
??paramRead_0:
        MOV     A,#0x11
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x33
??paramRead_9:
        INC     DPTR
        MOVX    @DPTR,A
//  445     len = 2;
        INC     R2
        SJMP    ??paramRead_10
//  446     break;
//  447   case 0x0002:
//  448     dat[0] = 0x22; dat[1] = 0x44;
??paramRead_1:
        MOV     A,#0x22
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x44
        SJMP    ??paramRead_9
//  449     len = 2;
//  450     break;
//  451   case 0x0003:
//  452     dat[0] = 0x00; dat[1] = 0x01;
??paramRead_2:
        CLR     A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x1
        SJMP    ??paramRead_9
//  453     len = 2;
//  454     break;
//  455   case 0x0004:
//  456     dat[0] = dat[1] = dat[2] = dat[3] = dat[4] = dat[5] = 1;
??paramRead_3:
        MOV     A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ??Subroutine8_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  457     len = 6;
        MOV     R2,#0x6
        SJMP    ??paramRead_8
//  458     break;
//  459   case 0x0005:
//  460     dat[0] = DEV_ID_RFID;
??paramRead_4:
        MOV     A,#0x8
        SJMP    ??paramRead_11
//  461     len = 1;
//  462     break;
//  463     
//  464   /* -----------  ÍøÂç²ÎÊý ------------------- */  
//  465   case 0x0014: //macµØÖ·
//  466      /*osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf ); rm by liren */
//  467     ZMacGetReq( ZMacExtAddr, dat ); // add by liren
??paramRead_5:
        ; Setup parameters for call to function ZMacGetReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#-0x1e
        LCALL   ??ZMacGetReq?relay
//  468     // Outgoing extended address needs to be reversed
//  469     MT_ReverseBytes( dat, Z_EXTADDR_LEN );
        ; Setup parameters for call to function MT_ReverseBytes
        MOV     R1,#0x8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MT_ReverseBytes?relay
//  470     len = Z_EXTADDR_LEN;
        MOV     R2,#0x8
        MOV     R3,#0x0
        SJMP    ??paramRead_8
//  471     break;
//  472   case 0x0015:
//  473   {
//  474       uint8 assocCnt = 0;
//  475       uint16 *assocList;
//  476       int i;
//  477 #if defined(RTR_NWK) && !defined( NONWK )
//  478     assocList = AssocMakeList( &assocCnt );
//  479 #else
//  480     assocCnt = 0;
//  481     assocList = NULL;
//  482 #endif
//  483     dat[0] = assocCnt;
??paramRead_6:
        CLR     A
        SJMP    ??paramRead_11
//  484     for (i=0; i<assocCnt&&i<16; i++) {
//  485       dat[1+2*i] = HI_UINT16(assocList[i]);
//  486       dat[1+2*i+1] = LO_UINT16(assocList[i]);
//  487     }
//  488     len = 1 + 2 * assocCnt;
//  489     break;
//  490   }
//  491  /* ------------------------------------ */
//  492   case 0x0801:
//  493     dat[0] = rfidOn;
??paramRead_7:
        MOV     DPTR,#rfidOn
        MOVX    A,@DPTR
??paramRead_11:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  494     len = 1;
??paramRead_10:
        INC     R2
//  495     break;
//  496   case 0x0810:  /* Ö÷¶¯¶ÁÈ¡¿¨Æ¬ID*/
//  497     
//  498     len = 0;
//  499     break;
//  500   }
//  501   return len;
??paramRead_8:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock17
//  502 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_11
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        INC     DPTR
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
        REQUIRE ??Subroutine8_0
        ; // Fall through to label ??Subroutine8_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine8_0:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_11
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_12
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
//  503 
//  504 
//  505 
//  506 
//  507 
//  508 
//  509 
//  510 #define RFID_UART 0 //1
//  511 
//  512 
//  513 /*UART0Í¨ÐÅ³õÊ¼»¯
//  514 -------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  515 void rfid_uart_init(void)
rfid_uart_init:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function rfid_uart_init
//  516 {
        ; Saved register size: 0
        ; Auto size: 0
//  517 #if 1
//  518    P0SEL |=  0x0C;                  //³õÊ¼»¯UART0¶Ë¿Ú
        ORL     0xf3,#0xc
        MOV     A,0xf3
//  519    PERCFG&= ~0x01;                  //Ñ¡ÔñUART0Îª¿ÉÑ¡Î»ÖÃÒ»
        ANL     0xf1,#0xfe
//  520 #else
//  521    PERCFG |= 0x01;
//  522    P1SEL |= 0xc0;
//  523 #endif
//  524    U0UCR = 0;                       //ÉèÖÃÍ£Ö¹Î»ÓëÆæÅ¼Ð£Ñé 
        MOV     0xc4,#0x0
//  525    U0CSR = 0xC0;                    //ÉèÖÃÎªUARTÄ£Ê½,¶øÇÒÊ¹ÄÜ½ÓÊÜÆ÷
        MOV     0x86,#-0x40
//  526    
//  527    U0GCR = 11;
        MOV     0xc5,#0xb
//  528    U0BAUD = 216;                    //ÉèÖÃUART0²¨ÌØÂÊÎª115200bps
        MOV     0xc2,#-0x28
//  529   
//  530 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock30
        REQUIRE U0CSR
        REQUIRE U0BAUD
        REQUIRE U0UCR
        REQUIRE U0GCR
        REQUIRE PERCFG
        REQUIRE P0SEL
//  531 /*UART0·¢ËÍÊý¾Ý
//  532 -------------------------------------------------------*/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  533 void  rfid_uart_send(unsigned char data)
rfid_uart_send:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function rfid_uart_send
//  534 {
        ; Saved register size: 0
        ; Auto size: 0
//  535   U0DBUF = data;
        MOV     0xc1,R1
//  536   while(!UTX0IF);    //µÈ´ýUART¿ÕÏÐÊ±·¢ËÍÊý¾Ý
??rfid_uart_send_0:
        MOV     C,0xe8.1
        JNC     ??rfid_uart_send_0
//  537   UTX0IF = 0;
        CLR     0xe8.1
//  538 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock31
        REQUIRE U0DBUF
        REQUIRE _A_IRCON2
//  539 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 int rfid_uart_recv(void)
rfid_uart_recv:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function rfid_uart_recv
//  541 {
        ; Saved register size: 2
        ; Auto size: 0
//  542   int data = -1;
        MOV     R2,#-0x1
        MOV     R3,#-0x1
//  543   unsigned int i=50000;
        MOV     R0,#0x50
        MOV     R1,#-0x3d
        SJMP    ??rfid_uart_recv_0
//  544   while (!URX0IF && --i) { }//²éÑ¯ÊÇ·ñÊÕµ½Êý¾Ý£¬·ñÔò¼ÌÐøµÈ´ý
??rfid_uart_recv_1:
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        JNZ     ??rfid_uart_recv_2
        MOV     A,R1
??rfid_uart_recv_2:
        JZ      ??rfid_uart_recv_3
??rfid_uart_recv_0:
        MOV     C,0x88.3
        MOV     A,R0
        JNC     ??rfid_uart_recv_1
//  545   if ( i > 0 ) {
        JNZ     ??rfid_uart_recv_4
        MOV     A,R1
??rfid_uart_recv_4:
        JZ      ??rfid_uart_recv_3
//  546     data = 0xff & U0DBUF;          //ÌáÈ¡½ÓÊÕµ½µÄÊý¾Ý
        MOV     R2,0xc1
        INC     R3
//  547     URX0IF = 0;
        CLR     0x88.3
//  548   }
//  549   return data;          
??rfid_uart_recv_3:
        LJMP    ?BRET
        CFI EndBlock cfiBlock32
        REQUIRE _A_TCON
        REQUIRE U0DBUF
//  550 }
//  551 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  552 void rfid_commands(char *cmd, int len)
rfid_commands:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function rfid_commands
//  553 {
        FUNCALL rfid_commands, rfid_uart_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  554   int i;
//  555   for (i=0; i<len; i++)
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??rfid_commands_0
//  556     rfid_uart_send(cmd[i]);
??rfid_commands_1:
        ; Setup parameters for call to function rfid_uart_send
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??rfid_uart_send?relay
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??rfid_commands_0:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 0
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??rfid_commands_1
//  557 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock33
//  558 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  559 char datxor(char *dat, int len)
datxor:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function datxor
//  560 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  561   char x = 'X';
        MOV     R1,#0x58
//  562   char i;
//  563   for (i=0; i<len; i++) {
        MOV     R6,#0x0
        SJMP    ??datxor_0
//  564     x ^= dat[i];
??datxor_1:
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
//  565   }
        INC     R6
??datxor_0:
        MOV     ?V0 + 0,R6
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R4
        CLR     A
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??datxor_1
//  566   return x;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock34
//  567 }
//  568 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  569 char cmd[16];
cmd:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  570 char dat[32];
dat:
        DS 32
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  571 int rfid_id(char *id)
rfid_id:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function rfid_id
//  572 {
        FUNCALL rfid_id, rfid_commands
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, rfid_uart_recv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rfid_id, datxor
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  573   
//  574   char idx = 0;
//  575   cmd[0] = 0x02, cmd[1] = 0x00, cmd[2] = 0x02;
        MOV     A,#0x2
        MOV     DPTR,#cmd
        MOVX    @DPTR,A
        CLR     A
        MOV     DPTR,#(cmd + 1)
        MOVX    @DPTR,A
        MOV     A,#0x2
        MOV     DPTR,#(cmd + 2)
        MOVX    @DPTR,A
//  576   rfid_commands(cmd, 3);
        ; Setup parameters for call to function rfid_commands
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#(cmd & 0xff)
        MOV     R3,#((cmd >> 8) & 0xff)
        LCALL   ??rfid_commands?relay
//  577   
//  578   dat[idx++] = rfid_uart_recv();
        ; Setup parameters for call to function rfid_uart_recv
        LCALL   ??rfid_uart_recv?relay
        MOV     A,R2
        MOV     DPTR,#dat
        LCALL   ?Subroutine3 & 0xFFFF
//  579   dat[idx++] = rfid_uart_recv();
??CrossCallReturnLabel_2:
        MOV     DPTR,#(dat + 1)
        LCALL   ?Subroutine3 & 0xFFFF
//  580   dat[idx++] = rfid_uart_recv();
??CrossCallReturnLabel_3:
        MOV     DPTR,#(dat + 2)
        MOVX    @DPTR,A
//  581   if (dat[0]!=0x02 || dat[1]!=0x00 || dat[2]!=0x00){
        MOV     DPTR,#dat
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??rfid_id_0
        MOV     DPTR,#(dat + 1)
        MOVX    A,@DPTR
        JNZ     ??rfid_id_0
        MOV     DPTR,#(dat + 2)
        MOVX    A,@DPTR
        JZ      ??rfid_id_1
//  582     dat[idx++] = rfid_uart_recv(); // ck
??rfid_id_0:
        ; Setup parameters for call to function rfid_uart_recv
        LCALL   ??rfid_uart_recv?relay
        MOV     A,R2
        MOV     DPTR,#(dat + 3)
        MOVX    @DPTR,A
//  583     return 0;
??rfid_id_2:
        MOV     R2,#0x0
        SJMP    ??rfid_id_3
//  584   }
//  585   dat[idx++] = rfid_uart_recv();
??rfid_id_1:
        ; Setup parameters for call to function rfid_uart_recv
        LCALL   ??rfid_uart_recv?relay
        MOV     A,R2
        MOV     DPTR,#(dat + 3)
        LCALL   ?Subroutine3 & 0xFFFF
//  586   dat[idx++] = rfid_uart_recv();
??CrossCallReturnLabel_4:
        MOV     DPTR,#(dat + 4)
        LCALL   ?Subroutine3 & 0xFFFF
//  587   dat[idx++] = rfid_uart_recv();
??CrossCallReturnLabel_5:
        MOV     DPTR,#(dat + 5)
        LCALL   ?Subroutine3 & 0xFFFF
//  588   dat[idx++] = rfid_uart_recv();
??CrossCallReturnLabel_6:
        MOV     DPTR,#(dat + 6)
        LCALL   ?Subroutine3 & 0xFFFF
//  589   
//  590   dat[idx++] = rfid_uart_recv();
??CrossCallReturnLabel_7:
        MOV     DPTR,#(dat + 7)
        MOVX    @DPTR,A
//  591 
//  592   if (datxor(dat, idx)) {
        ; Setup parameters for call to function datxor
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R2,#(dat & 0xff)
        MOV     R3,#((dat >> 8) & 0xff)
        LCALL   ??datxor?relay
        MOV     A,R1
        JNZ     ??rfid_id_2
//  593     return 0;
//  594   }
//  595   if (id != NULL) {
        MOV     A,R6
        JNZ     ??rfid_id_4
        MOV     A,R7
??rfid_id_4:
        JZ      ??rfid_id_5
//  596     id[0] = dat[3];
        MOV     DPTR,#(dat + 3)
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  597     id[1] = dat[4];
        MOV     DPTR,#(dat + 4)
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    @DPTR,A
//  598     id[2] = dat[5];
        MOV     DPTR,#(dat + 5)
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_9:
        INC     DPTR
        MOVX    @DPTR,A
//  599     id[3] = dat[6];
        MOV     DPTR,#(dat + 6)
        LCALL   ?Subroutine4 & 0xFFFF
//  600   }
??CrossCallReturnLabel_10:
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  601   return 1;
??rfid_id_5:
        MOV     R2,#0x1
??rfid_id_3:
        MOV     R3,#0x0
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock35
//  602 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function rfid_uart_recv
        ; Setup parameters for call to function rfid_uart_recv
        ; Setup parameters for call to function rfid_uart_recv
        ; Setup parameters for call to function rfid_uart_recv
        ; Setup parameters for call to function rfid_uart_recv
        ; Setup parameters for call to function rfid_uart_recv
        LCALL   ??rfid_uart_recv?relay
        MOV     A,R2
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myStartRetryDelay>`:
        DW 10000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myCheckCardDelay>`:
        DW 250

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for rfidOn>`:
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HanderMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HanderMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??paramRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    paramRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_uart_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_uart_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_uart_send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_uart_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_uart_recv?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_uart_recv

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_commands?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_commands

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??datxor?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    datxor

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_id?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_id

        END
// 
// 1 504 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     9 bytes in segment SFR_AN
//     5 bytes in segment XDATA_I
//     5 bytes in segment XDATA_ID
//    22 bytes in segment XDATA_ROM_C
//    54 bytes in segment XDATA_Z
// 
// 1 605 bytes of CODE  memory
//    22 bytes of CONST memory
//     0 bytes of DATA  memory (+ 9 bytes shared)
//    59 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
