///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            11/Mar/2015  16:22:43 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\Source\SimpPre /
//                          ssure.c                                           /
//    Command line       =  -f C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ /
//                          ÌÐò\Projects\zstack\Samples\SimpleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ    /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ /
//                          ÌÐò\Projects\zstack\Samples\SimpleApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO  /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\Administrator\Des /
//                          ktop\Zigbee½Úµã¿ØÖÆ³ÌÐò\Projects\zstack\Samples\S /
//                          impleApp\Source\SimpPressure.c -D                 /
//                          HOLD_AUTO_START -D BUILD_ALL_DEVICES -D           /
//                          REFLECTOR -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1   /
//                          -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D       /
//                          MT_UTIL_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -D xMT_ZDO_FUNC -D               /
//                          xMT_ZDO_CB_FUNC -lC C:\Users\Administrator\Deskto /
//                          p\Zigbee½Úµã¿ØÖÆ³ÌÐò\Projects\zstack\Samples\Simp /
//                          leApp\CC2530DB\SimpleCoordinator\List\ -lA        /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\Simpl /
//                          eCoordinator\List\ --diag_suppress Pe001,Pa010    /
//                          -o C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ /
//                          ÌÐò\Projects\zstack\Samples\SimpleApp\CC2530DB\Si /
//                          mpleCoordinator\Obj\ -e --require_prototypes      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\ -I   /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\So /
//                          urce\ -I C:\Users\Administrator\Desktop\Zigbee½Úµ /
//                          ã¿ØÖÆ³ÌÐò\Projects\zstack\Samples\SimpleApp\CC253 /
//                          0DB\..\..\..\ZMain\TI2530DB\ -I                   /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\hal\include\ -I              /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\hal\target\CC2530EB\ -I      /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\include\ -I              /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\high_level\ -I           /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\ -I      /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\single_c /
//                          hip\ -I C:\Users\Administrator\Desktop\Zigbee½Úµã /
//                          ¿ØÖÆ³ÌÐò\Projects\zstack\Samples\SimpleApp\CC2530 /
//                          DB\..\..\..\..\..\Components\mt\ -I               /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\osal\include\ -I             /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\osal\mcu\ccsoc\ -I           /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\services\saddr\ -I           /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\services\sdata\ -I           /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\af\ -I                 /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sapi\ -I               /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sec\ -I                /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\sys\ -I                /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\stack\zdo\ -I                /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\zmac\ -I                     /
//                          C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\..\.. /
//                          \..\..\..\Components\zmac\f8w\ -I "C:\Program     /
//                          Files\IAR Systems\Embedded Workbench              /
//                          5.4\8051\INC\" -I "C:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò /
//                          \Projects\zstack\Samples\SimpleApp\CC2530DB\Simpl /
//                          eCoordinator\List\SimpPressure.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SimpPressure

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_TO_L
        EXTERN ?L_ADD
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_DIV_MOD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SHL
        EXTERN ?L_SUB
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SL_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GT
        EXTERN ?UL_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BMP085_SAMPLE?relay
        FUNCTION ??BMP085_SAMPLE?relay,0203H
        PUBLIC ??IIC_ACC_INIT?relay
        FUNCTION ??IIC_ACC_INIT?relay,0203H
        PUBLIC ??IIC_ACK?relay
        FUNCTION ??IIC_ACK?relay,0203H
        PUBLIC ??IIC_BMP085_INIT?relay
        FUNCTION ??IIC_BMP085_INIT?relay,0203H
        PUBLIC ??IIC_DELAY?relay
        FUNCTION ??IIC_DELAY?relay,0203H
        PUBLIC ??IIC_QMAKE?relay
        FUNCTION ??IIC_QMAKE?relay,0203H
        PUBLIC ??IIC_READ?relay
        FUNCTION ??IIC_READ?relay,0203H
        PUBLIC ??IIC_READ_BYTE?relay
        FUNCTION ??IIC_READ_BYTE?relay,0203H
        PUBLIC ??IIC_START?relay
        FUNCTION ??IIC_START?relay,0203H
        PUBLIC ??IIC_STOP?relay
        FUNCTION ??IIC_STOP?relay,0203H
        PUBLIC ??IIC_WAIT?relay
        FUNCTION ??IIC_WAIT?relay,0203H
        PUBLIC ??IIC_WRITE?relay
        FUNCTION ??IIC_WRITE?relay,0203H
        PUBLIC ??IIC_WRITE_BYTE?relay
        FUNCTION ??IIC_WRITE_BYTE?relay,0203H
        FUNCTION ??paramRead?relay,0203H
        PUBLIC ??rfid_uart_init?relay
        FUNCTION ??rfid_uart_init?relay,0203H
        PUBLIC ??rfid_uart_send?relay
        FUNCTION ??rfid_uart_send?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HanderMsg?relay
        FUNCTION ??zb_HanderMsg?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBLIC AC_1
        PUBLIC AC_2
        PUBLIC AC_3
        PUBLIC AC_4
        PUBLIC AC_5
        PUBLIC AC_6
        PUBLIC BMP085_SAMPLE
        FUNCTION BMP085_SAMPLE,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 8, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC B_1
        PUBLIC B_2
        PUBLIC IIC_ACC_INIT
        FUNCTION IIC_ACC_INIT,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_ACK
        FUNCTION IIC_ACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_BMP085_INIT
        FUNCTION IIC_BMP085_INIT,021203H
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC IIC_DELAY
        FUNCTION IIC_DELAY,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC IIC_QMAKE
        FUNCTION IIC_QMAKE,0203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC IIC_READ
        FUNCTION IIC_READ,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC IIC_READ_BYTE
        FUNCTION IIC_READ_BYTE,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC IIC_START
        FUNCTION IIC_START,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_STOP
        FUNCTION IIC_STOP,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_WAIT
        FUNCTION IIC_WAIT,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC IIC_WRITE
        FUNCTION IIC_WRITE,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC IIC_WRITE_BYTE
        FUNCTION IIC_WRITE_BYTE,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MB
        PUBLIC MC
        PUBLIC MD
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK PERCFG
        PUBLIC Pre
        PUBLIC Temp
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBWEAK U0UCR
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBWEAK __Constant_0
        PUBWEAK __Constant_10
        PUBWEAK __Constant_100
        PUBWEAK __Constant_1000
        PUBWEAK __Constant_10000
        PUBWEAK __Constant_2
        PUBWEAK __Constant_2000
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_4
        PUBWEAK __Constant_8
        PUBWEAK __Constant_800
        PUBWEAK __Constant_8000
        PUBWEAK __Constant_80000000
        PUBWEAK __Constant_bde
        PUBWEAK __Constant_ecf
        PUBWEAK __Constant_ffffe343
        PUBWEAK __Constant_fffff060
        FUNCTION paramRead,0a1203H
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC rfid_uart_init
        FUNCTION rfid_uart_init,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC rfid_uart_send
        FUNCTION rfid_uart_send,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC temp
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HanderMsg
        FUNCTION zb_HanderMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 87, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zb_StartRequest     SYMBOL "zb_StartRequest"
HalLedSet           SYMBOL "HalLedSet"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
ZMacGetReq          SYMBOL "ZMacGetReq"
MT_ReverseBytes     SYMBOL "MT_ReverseBytes"
AssocMakeList       SYMBOL "AssocMakeList"
??AssocMakeList?relay SYMBOL "?relay", AssocMakeList
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??MT_ReverseBytes?relay SYMBOL "?relay", MT_ReverseBytes
??ZMacGetReq?relay  SYMBOL "?relay", ZMacGetReq
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zb_ReadConfiguration?relay SYMBOL "?relay", zb_ReadConfiguration
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
??zb_WriteConfiguration?relay SYMBOL "?relay", zb_WriteConfiguration
BMP085_SAMPLE       SYMBOL "BMP085_SAMPLE"
??BMP085_SAMPLE?relay SYMBOL "?relay", BMP085_SAMPLE
IIC_ACC_INIT        SYMBOL "IIC_ACC_INIT"
??IIC_ACC_INIT?relay SYMBOL "?relay", IIC_ACC_INIT
IIC_ACK             SYMBOL "IIC_ACK"
??IIC_ACK?relay     SYMBOL "?relay", IIC_ACK
IIC_BMP085_INIT     SYMBOL "IIC_BMP085_INIT"
??IIC_BMP085_INIT?relay SYMBOL "?relay", IIC_BMP085_INIT
IIC_DELAY           SYMBOL "IIC_DELAY"
??IIC_DELAY?relay   SYMBOL "?relay", IIC_DELAY
IIC_QMAKE           SYMBOL "IIC_QMAKE"
??IIC_QMAKE?relay   SYMBOL "?relay", IIC_QMAKE
IIC_READ            SYMBOL "IIC_READ"
??IIC_READ?relay    SYMBOL "?relay", IIC_READ
IIC_READ_BYTE       SYMBOL "IIC_READ_BYTE"
??IIC_READ_BYTE?relay SYMBOL "?relay", IIC_READ_BYTE
IIC_START           SYMBOL "IIC_START"
??IIC_START?relay   SYMBOL "?relay", IIC_START
IIC_STOP            SYMBOL "IIC_STOP"
??IIC_STOP?relay    SYMBOL "?relay", IIC_STOP
IIC_WAIT            SYMBOL "IIC_WAIT"
??IIC_WAIT?relay    SYMBOL "?relay", IIC_WAIT
IIC_WRITE           SYMBOL "IIC_WRITE"
??IIC_WRITE?relay   SYMBOL "?relay", IIC_WRITE
IIC_WRITE_BYTE      SYMBOL "IIC_WRITE_BYTE"
??IIC_WRITE_BYTE?relay SYMBOL "?relay", IIC_WRITE_BYTE
rfid_uart_init      SYMBOL "rfid_uart_init"
??rfid_uart_init?relay SYMBOL "?relay", rfid_uart_init
rfid_uart_send      SYMBOL "rfid_uart_send"
??rfid_uart_send?relay SYMBOL "?relay", rfid_uart_send
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HanderMsg        SYMBOL "zb_HanderMsg"
??zb_HanderMsg?relay SYMBOL "?relay", zb_HanderMsg
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ReverseBytes
        FUNCTION MT_ReverseBytes,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AssocMakeList?relay
        FUNCTION ??AssocMakeList?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??MT_ReverseBytes?relay
        FUNCTION ??MT_ReverseBytes?relay,00H
        EXTERN ??ZMacGetReq?relay
        FUNCTION ??ZMacGetReq?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zb_ReadConfiguration?relay
        FUNCTION ??zb_ReadConfiguration?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,00H
        EXTERN ??zb_WriteConfiguration?relay
        FUNCTION ??zb_WriteConfiguration?relay,00H
        EXTERN sapi_TaskID

// C:\Users\Administrator\Desktop\Zigbee½Úµã¿ØÖÆ³ÌÐò\Projects\zstack\Samples\SimpleApp\Source\SimpPressure.c
//    1 /**************************************************************************************************
//    2   Filename:       SimpleSwitch.c
//    3   Revised:        $Date: 2007-10-27 17:16:54 -0700 (Sat, 27 Oct 2007) $
//    4   Revision:       $Revision: 15793 $
//    5 
//    6   Description:    Sample application for a simple light switch utilizing the Simple API.
//    7 
//    8  
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /******************************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "sapi.h"
//   46 #include "hal_key.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c4H
// unsigned char volatile __sfr U0UCR
U0UCR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DS 1
//   47 #include "hal_led.h"
//   48 #include "hal_adc.h"
//   49 #include "hal_mcu.h"
//   50 #include "SimpleApp.h"
//   51 
//   52 #include "mt.h"
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 
//   58 // Application States
//   59 #define APP_INIT                           0    // Initial state(³õÊ¼×´Ì¬)
//   60 #define APP_START                          1    // Sensor has joined network(´«¸ÐÆ÷ÒÑ¼ÓÈëÍøÂç)
//   61 #define APP_BOUND                          2    // Sensor is bound to collector(´«¸ÐÆ÷Ò²°ó¶¨µ½ÊÊÅäÆ÷)
//   62 
//   63 // Application osal event identifiers
//   64 // Bit mask of events ( from 0x0000 to 0x00FF )
//   65 #define MY_START_EVT                0x0001      //×Ô¶¨ÒåµÄ¿ªÊ¼ÊÂ¼þ
//   66 #define MY_REPORT_EVT               0x0002     //×Ô¶¨ÒåµÄÉÏ±¨ÊÂ¼þ
//   67 #define IIC_ADDRESS                 0x1D
//   68 
//   69 #define IIC_SDA                     P0_6 
//   70 #define IIC_SCL                     P0_7
//   71 /*********************************************************************
//   72  * TYPEDEFS
//   73  */
//   74 
//   75 /*****************************************************mnbn****************
//   76  * LOCAL VARIABLES
//   77  */
//   78 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   79 static uint8 myAppState = APP_INIT;           //myAppState:×Ô¶¨ÒåµÄAPP×´Ì¬
myAppState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   80 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   81 static uint16 myStartRetryDelay = 10000;      // milliseconds
myStartRetryDelay:
        DS 2
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   82 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   83 static uint16 myCheckCardDelay = 2000;         //milliseconds
myCheckCardDelay:
        DS 2
        REQUIRE `?<Initializer for myCheckCardDelay>`
        REQUIRE __INIT_XDATA_I
//   84 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   85 static uint8 IIC_PRE_ON = 0;                     //RFIDµÄ¿ªÆôºÍ¹Ø±Õ       
IIC_PRE_ON:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   86 /*********************************************************************
//   87  * GLOBAL VARIABLES
//   88  */
//   89 
//   90 // Inputs and Outputs for Switch device
//   91 #define NUM_IN_CMD_SENSOR                 2       //´«¸ÐÆ÷Ä£Ê½:ÊäÈëÄ£Ê½
//   92 #define NUM_OUT_CMD_SENSOR                3       //´«¸ÐÆ÷Ä£Ê½:Êä³öÄ£Ê½
//   93 
//   94 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   95 const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
zb_InCmdList:
        DW 1, 2
//   96 {
//   97   ID_CMD_READ_REQ,                               //¶ÁÖÐ¶Ï
//   98   ID_CMD_WRITE_REQ,                              //Ð´ÖÐ¶Ï
//   99 };

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  100 const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
zb_OutCmdList:
        DW 32769, 32770, 3
//  101 {
//  102     ID_CMD_READ_RES,
//  103     ID_CMD_WRITE_RES,
//  104     ID_CMD_REPORT,
//  105 };
//  106 
//  107 
//  108 
//  109 
//  110 
//  111 // Define SimpleDescriptor for Switch device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  112 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DW 3856, 3
        DB 1, 2
        DW zb_InCmdList
        DB 3
        DW zb_OutCmdList
//  113 {
//  114   MY_ENDPOINT_ID,             //  Endpoint
//  115   MY_PROFILE_ID,              //  Profile ID
//  116   DEV_ID_SENSOR,              //  Device ID
//  117   DEVICE_VERSION_SENSOR,      //  Device Version
//  118   0,                          //  Reserved
//  119   NUM_IN_CMD_SENSOR,          //  Number of Input Commands
//  120   (cId_t *) zb_InCmdList,             //  Input Command List
//  121   NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
//  122   (cId_t *) zb_OutCmdList     //  Output Command List
//  123 };
//  124 
//  125 /********************************************************
//  126  *
//  127  */
//  128 void zb_HanderMsg(osal_event_hdr_t *msg);
//  129 
//  130 /*********************************************************************
//  131  * LOCAL FUNCTIONS
//  132  */
//  133 
//  134 
//  135 static int paramWrite(uint16 pid, byte *dat);
//  136 static int paramRead(uint16 pid, byte *dat);
//  137 void IIC_WAIT(void);
//  138 void IIC_QMAKE(uint16 QMAKE);
//  139 void IIC_DELAY(uint16 dlen);
//  140 void IIC_ACC_INIT(void);
//  141 void IIC_BMP085_INIT(void);
//  142 void IIC_START(void);
//  143 void IIC_STOP(void);
//  144 void IIC_ACK(void);
//  145 void IIC_WRITE_BYTE(uint8 wdata);
//  146 char IIC_READ_BYTE(void);
//  147 void IIC_WRITE(uint8 byte_add,uint8 wdata);
//  148 char IIC_READ(uint8 byte_add);
//  149 long BMP085_SAMPLE(short OSS);
//  150 void rfid_uart_init(void);
//  151 void rfid_uart_send(char data);
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  153 short AC_1=0,AC_2=0,AC_3=0;
AC_1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
AC_2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
AC_3:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  154 short B_1=0,B_2=0,MB=0,MC=0,MD=0;
B_1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
B_2:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
MB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
MC:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
MD:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  155 unsigned short AC_4=0,AC_5=0,AC_6=0;
AC_4:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
AC_5:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
AC_6:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  156 long Temp=0,Pre=0;
Temp:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
Pre:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  157 int temp;
temp:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  158 /*****************************************************************************
//  159  * @fn          zb_HandleOsalEvent
//  160  *
//  161  * @brief       The zb_HandleOsalEvent function is called by the operating
//  162  *              system when a task event is set
//  163  *
//  164  * @param       event - Bitmask containing the events that have been set
//  165  *
//  166  * @return      none
//  167  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  168 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
//  169 {
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, IIC_ACC_INIT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, IIC_BMP085_INIT
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, BMP085_SAMPLE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, IIC_QMAKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  170  
//  171    if (event & ZB_ENTRY_EVENT) {
        MOV     A,#0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??zb_HandleOsalEvent_0
        MOV     A,R1
??zb_HandleOsalEvent_0:
        JZ      ??CrossCallReturnLabel_7
//  172         uint8 startOptions;
//  173         uint8 logicalType;
//  174   
//  175         zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_ReadConfiguration?relay
//  176         if ( logicalType != ZG_DEVICETYPE_ENDDEVICE )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??zb_HandleOsalEvent_1
//  177         //if ( logicalType != ZG_DEVICETYPE_ROUTER )
//  178         //if ( logicalType != ZG_DEVICETYPE_COORDINATOR )
//  179         {
//  180           logicalType = ZG_DEVICETYPE_ENDDEVICE;
        MOV     A,#0x2
        MOVX    @DPTR,A
//  181           //logicalType = ZG_DEVICETYPE_ROUTER;
//  182           //logicalType = ZG_DEVICETYPE_COORDINATOR;
//  183           zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_WriteConfiguration?relay
//  184         }
//  185 
//  186         // Do more configuration if necessary and then restart device with auto-start bit set
//  187         // write endpoint to simple desc...dont pass it in start req..then reset
//  188         zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
??zb_HandleOsalEvent_1:
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_ReadConfiguration?relay
//  189         if (startOptions != ZCD_STARTOPT_AUTO_START) {
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??zb_HandleOsalEvent_2
//  190           startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     A,#0x4
        MOVX    @DPTR,A
//  191           zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_WriteConfiguration?relay
//  192         } 
//  193         
//  194         IIC_ACC_INIT();
??zb_HandleOsalEvent_2:
        ; Setup parameters for call to function IIC_ACC_INIT
        LCALL   ??IIC_ACC_INIT?relay
//  195         IIC_BMP085_INIT();
        ; Setup parameters for call to function IIC_BMP085_INIT
        LCALL   ??IIC_BMP085_INIT?relay
//  196         osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine4 & 0xFFFF
//  197   }
//  198   
//  199   if ( event & MY_START_EVT )
??CrossCallReturnLabel_7:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleOsalEvent_3
//  200   {  
//  201     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  202   }
//  203  // float pre =0;
//  204   unsigned char maobao[10];
//  205   int i,j,k;
//  206   float p;
//  207   if (event & MY_REPORT_EVT) {
??zb_HandleOsalEvent_3:
        MOV     A,R6
        ANL     A,#0x2
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_8 & 0xFFFF
//  208       
//  209     if (myAppState == APP_START) {
        MOV     DPTR,#myAppState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
//  210       HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  211       if (IIC_PRE_ON){
        MOV     DPTR,#IIC_PRE_ON
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zb_HandleOsalEvent_5 & 0xFFFF
//  212         unsigned char dat[6];
//  213         for(i = 0;i < 10;i++)
        MOV     R6,#0x0
        MOV     R7,#0x0
//  214         {
//  215          p = BMP085_SAMPLE(3)/1000;
//  216          maobao[i] = (int)p;
??zb_HandleOsalEvent_6:
        ; Setup parameters for call to function BMP085_SAMPLE
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??BMP085_SAMPLE?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0 + 0
        LCALL   ?FLT_TO_L
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R6
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  217          IIC_QMAKE(10);
        ; Setup parameters for call to function IIC_QMAKE
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??IIC_QMAKE?relay
//  218         }
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_31:
        JC      ??zb_HandleOsalEvent_6
//  219         for(j = 0;j<10;j++)
        MOV     R6,#0x0
        MOV     R7,#0x0
//  220         {
//  221           for(k=0;k<10-j;k++)
??zb_HandleOsalEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
//  222             if(maobao[k]>maobao[k+1])
??zb_HandleOsalEvent_8:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R2
        MOV     R0,A
        MOV     A,DPH
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
        POP     A
        CFI CFA_SP SP+0
        CLR     C
        SUBB    A,R4
        JNC     ??zb_HandleOsalEvent_9
//  223             {
//  224               temp = maobao[k];
        MOVX    A,@DPTR
        MOV     DPTR,#temp
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  225               maobao[k]=maobao[k+1];
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
//  226               maobao[k+1]=temp;
        MOV     DPTR,#temp
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  227             }
??zb_HandleOsalEvent_9:
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0xa
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        CLR     A
        SUBB    A,R7
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??zb_HandleOsalEvent_8
//  228         }
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_32:
        JC      ??zb_HandleOsalEvent_7
//  229         temp = (maobao[1]+maobao[2]+maobao[3]+maobao[4]+maobao[5]+maobao[6]+maobao[7]+maobao[8]+maobao[9])/10;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     DPTR,#temp
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  230 
//  231         dat[0] = 0x0c;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xc
        MOVX    @DPTR,A
//  232         dat[1] = 0x10;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x10
        LCALL   ?Subroutine2 & 0xFFFF
//  233         dat[2] = ((int)temp/1000);
??CrossCallReturnLabel_66:
        LCALL   ?S_DIV_MOD
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ?Subroutine2 & 0xFFFF
//  234         dat[3] = ((int)temp%1000/100);
??CrossCallReturnLabel_67:
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
//  235         dat[4] = ((int)temp%1000%100/10);
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ?Subroutine9 & 0xFFFF
//  236         dat[5] = ((int)temp%10);
??CrossCallReturnLabel_18:
        LCALL   ?S_DIV_MOD
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  237        
//  238       // rfid_uart_send(dat[0]);
//  239       // rfid_uart_send(dat[1]);
//  240       // rfid_uart_send(dat[2]);
//  241       // rfid_uart_send(dat[3]);
//  242       // rfid_uart_send(dat[4]);
//  243       // rfid_uart_send(dat[5]);
//  244         zb_SendDataRequest(0, ID_CMD_REPORT, 6, dat, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     R1,#0x6
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        SJMP    ??zb_HandleOsalEvent_5
//  245         
//  246       }
//  247     }
//  248      else 
//  249          HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
??zb_HandleOsalEvent_4:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  250    
//  251     osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
??zb_HandleOsalEvent_5:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine4 & 0xFFFF
//  252    
//  253     }
//  254    
//  255 }
??CrossCallReturnLabel_8:
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond2) CFA_SP SP+0
        CFI (cfiCond2) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        CLR     C
        MOV     A,R6
        SUBB    A,#0xa
        MOV     A,R7
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     DPTR,#myCheckCardDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        CLR     A
        ADDC    A,R1
        MOV     R1,A
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_66
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOVX    @DPTR,A
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        MOV     DPTR,#temp
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25
//  256   
//  257 
//  258 /*********************************************************************
//  259  * @fn      zb_HandleKeys
//  260  *
//  261  * @brief   Handles all key events for this device.
//  262  *
//  263  * @param   shift - true if in shift/alt.
//  264  * @param   keys - bit field for key events. Valid entries:
//  265  *                 EVAL_SW4
//  266  *                 EVAL_SW3
//  267  *                 EVAL_SW2
//  268  *                 EVAL_SW1
//  269  *
//  270  * @return  none
//  271  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  272 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function zb_HandleKeys
//  273 {
        ; Saved register size: 0
        ; Auto size: 0
//  274  
//  275 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock26
//  276 /******************************************************************************
//  277  * @fn          zb_StartConfirm
//  278  *
//  279  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  280  *              after a start request operation completes
//  281  *
//  282  * @param       status - The status of the start operation.  Status of
//  283  *                       ZB_SUCCESS indicates the start operation completed
//  284  *                       successfully.  Else the status is an error code.
//  285  *
//  286  * @return      none
//  287  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  288 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function zb_StartConfirm
//  289 {
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  290   if ( status == ZB_SUCCESS )
        JNZ     ??zb_StartConfirm_0
//  291   {
//  292     myAppState = APP_START;
        MOV     A,#0x1
        MOV     DPTR,#myAppState
        MOVX    @DPTR,A
        SJMP    ??zb_StartConfirm_1
//  293     // Set event to bind to a collector
//  294     //osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
//  295   }
//  296   else
//  297   {
//  298     // Try joining again later with a delay
//  299     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  300   }
//  301 }
??zb_StartConfirm_1:
        SJMP    ??Subroutine33_0
        CFI EndBlock cfiBlock27
//  302 /******************************************************************************
//  303  * @fn          zb_SendDataConfirm
//  304  *
//  305  * @brief       The zb_SendDataConfirm callback function is called by the
//  306  *              ZigBee after a send data operation completes
//  307  *
//  308  * @param       handle - The handle identifying the data transmission.
//  309  *              status - The status of the operation.
//  310  *
//  311  * @return      none
//  312  */
//  313 void zb_SendDataConfirm( uint8 handle, uint8 status )
//  314 {
//  315   if ( status != ZSuccess )
//  316   {
//  317     // Remove bindings to the existing collector
//  318   }
//  319   else
//  320   {
//  321     // send data ??
//  322   }
//  323 }
//  324 /******************************************************************************
//  325  * @fn          zb_BindConfirm
//  326  *
//  327  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  328  *              after a bind operation completes.
//  329  *
//  330  * @param       commandId - The command ID of the binding being confirmed.
//  331  *              status - The status of the bind operation.
//  332  *
//  333  * @return      none
//  334  */
//  335 void zb_BindConfirm( uint16 commandId, uint8 status )
//  336 {
//  337 
//  338 
//  339 }
//  340 /******************************************************************************
//  341  * @fn          zb_AllowBindConfirm
//  342  *
//  343  * @brief       Indicates when another device attempted to bind to this device
//  344  *
//  345  * @param
//  346  *
//  347  * @return      none
//  348  */
//  349 void zb_AllowBindConfirm( uint16 source )
//  350 {
//  351 }
//  352 /******************************************************************************
//  353  * @fn          zb_FindDeviceConfirm
//  354  *
//  355  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  356  *              ZigBee stack when a find device operation completes.
//  357  *
//  358  * @param       searchType - The type of search that was performed.
//  359  *              searchKey - Value that the search was executed on.
//  360  *              result - The result of the search.
//  361  *
//  362  * @return      none
//  363  */
//  364 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
//  365 {
//  366 }
//  367 
//  368 
//  369 void zb_HanderMsg(osal_event_hdr_t *msg)
//  370 {
//  371 }
//  372 
//  373 /******************************************************************************
//  374  * @fn          zb_ReceiveDataIndication
//  375  *
//  376  * @brief       The zb_ReceiveDataIndication callback function is called
//  377  *              asynchronously by the ZigBee stack to notify the application
//  378  *              when data is received from a peer device.
//  379  *
//  380  * @param       source - The short address of the peer device that sent the data
//  381  *              command - The commandId associated with the data
//  382  *              len - The number of bytes in the pData parameter
//  383  *              pData - The data sent by the peer device
//  384  *
//  385  * @return      none
//  386  */
//  387 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
//  388 {
//  389   int i;
//  390   uint16 pid;
//  391   byte dat[64];
//  392   byte rlen = 1;
//  393   int ret;
//  394   
//  395   HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
//  396   HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK ); 
//  397   switch (command) {
//  398   case ID_CMD_WRITE_REQ:
//  399     for (i=0; i<len; i+=2) {
//  400       pid = pData[i]<<8 | pData[i+1];
//  401       ret = paramWrite(pid, pData+2);
//  402       if (ret <= 0) {
//  403         dat[0] = 1;
//  404         zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  405         return;
//  406       } 
//  407       i += ret;
//  408     }
//  409     dat[0] = 0;
//  410     zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  411     break;
//  412   case ID_CMD_READ_REQ:
//  413     for (i=0; i<len; i+=2) {
//  414       pid = pData[i]<<8 | pData[i+1];
//  415       dat[rlen++] = pData[i];
//  416       dat[rlen++] = pData[i+1];
//  417       ret = paramRead(pid, dat+rlen);
//  418       if (ret <= 0) {
//  419         dat[0] = 1;
//  420         zb_SendDataRequest( source, ID_CMD_READ_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  421         return;
//  422       }
//  423       rlen += ret;
//  424     }
//  425     dat[0] = 0;
//  426     zb_SendDataRequest( source, ID_CMD_READ_RES, rlen, dat, 0, AF_ACK_REQUEST, 0 );
//  427     break;
//  428   }
//  429 }
//  430 
//  431 
//  432 /******************************************************************************
//  433  * @fn          
//  434  *
//  435  * @brief       Reports temperature sensor reading
//  436  *
//  437  * @param
//  438  *
//  439  * @return
//  440  */
//  441 
//  442 
//  443 /******************************************************************************
//  444  * @fn          myApp_ReadTemperature
//  445  *
//  446  * @brief       Reports temperature sensor reading
//  447  *
//  448  * @param
//  449  *
//  450  * @return
//  451  */
//  452 
//  453 
//  454 static int paramWrite(uint16 pid, byte *dat)
//  455 {
//  456   int len = 0;
//  457   switch (pid) {
//  458   case 0x0c01:
//  459     IIC_PRE_ON = dat[0];
//  460     len = 1;
//  461     break;
//  462   }
//  463   return len;
//  464 }
//  465 
//  466 static int paramRead(uint16 pid, byte *dat)
//  467 {
//  468   int len = 0;
//  469   switch (pid) {
//  470   case 0x0001:
//  471     dat[0] = 0x11; dat[1] = 0x33;
//  472     len = 2;
//  473     break;
//  474   case 0x0002:
//  475     dat[0] = 0x22; dat[1] = 0x44;
//  476     len = 2;
//  477     break;
//  478   case 0x0003:
//  479     dat[0] = 0x00; dat[1] = 0x01;
//  480     len = 2;
//  481     break;
//  482   case 0x0004:
//  483     dat[0] = dat[1] = dat[2] = dat[3] = dat[4] = dat[5] = 1;
//  484     len = 6;
//  485     break;
//  486   case 0x0005:dat[0] = DEV_ID_PRE;len = 1;break;
//  487     
//  488   /* -----------  ÍøÂç²ÎÊý ------------------- */  
//  489   case 0x0014: //macµØÖ·
//  490      /*osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf ); rm by liren */
//  491     ZMacGetReq( ZMacExtAddr, dat ); // add by liren
//  492     // Outgoing extended address needs to be reversed
//  493     MT_ReverseBytes( dat, Z_EXTADDR_LEN );
//  494     len = Z_EXTADDR_LEN;
//  495     break;
//  496   case 0x0015:
//  497   {
//  498       uint8 assocCnt = 0;
//  499       uint16 *assocList;
//  500       int i;
//  501 #if defined(RTR_NWK) && !defined( NONWK )
//  502     assocList = AssocMakeList( &assocCnt );
//  503 #else
//  504     assocCnt = 0;
//  505     assocList = NULL;
//  506 #endif
//  507     dat[0] = assocCnt;
//  508     for (i=0; i<assocCnt&&i<16; i++) {
//  509       dat[1+2*i] = HI_UINT16(assocList[i]);
//  510       dat[1+2*i+1] = LO_UINT16(assocList[i]);
//  511     }
//  512     len = 1 + 2 * assocCnt;
//  513     break;
//  514   }
//  515  /* ------------------------------------ */
//  516   case 0x0c01:
//  517     dat[0] = IIC_PRE_ON;
//  518     len = 1;
//  519     break;
//  520   case 0x0c02:  /* ¶ÁÈ¡¼ÓËÙ¶È´«¸ÐÆ÷XÖµ*/
//  521     dat[0] = temp/1000;
//  522     dat[1] = temp%1000/100;
//  523     dat[2] = temp%1000%100/10;
//  524     dat[3] = temp%10;
//  525     len = 4;
//  526     break;
//  527   case 0x0c10:  /* Ö÷¶¯ÉÏ±¨X,Y,ZµÄÖµ*/
//  528     //dat[0] = IIC_READ(0x06);
//  529     //dat[1] = IIC_READ(0x07);
//  530     //dat[2] = IIC_READ(0x08);
//  531     len = 3;
//  532     break;
//  533     
//  534   }
//  535   return len;
//  536 }
//  537 
//  538 
//  539 
//  540 
//  541 
//  542 
//  543 void IIC_WAIT(void)
//  544 {IIC_DELAY(5);}
//  545 //#define RFID_UART 0 //1
//  546 void IIC_DELAY(uint16 dlen)        //5usÑÓÊ±
//  547 {
//  548         uint16 j;
//  549         for(j=0;j<dlen;j--)
//  550         {
//  551           asm("nop");
//  552         }
//  553 }
//  554 
//  555 void IIC_QMAKE(uint16 QMAKE)
//  556 {
//  557   unsigned int x,y;
//  558   for(x=QMAKE;x>0;x--)
//  559   {for(y=111;y>0;y--);}
//  560 }
//  561 /*ACC³õÊ¼»¯
//  562 -------------------------------------------------------*/
//  563 void IIC_ACC_INIT(void)
//  564 {
//  565    P0DIR |= (1<<7)|(1<<6);        //P0_7P0_6ÎªÊä³ö
//  566    rfid_uart_init();
//  567    IIC_SDA = 1;
//  568     IIC_WAIT();
//  569     IIC_SCL = 1;
//  570     IIC_WAIT();
//  571     IIC_QMAKE(200);
//  572 }
//  573 
//  574 void IIC_START(void)               //º¯Êý¹¦ÄÜ£ºI2CÍ¨ÐÅ¿ªÊ¼
//  575 {
//  576     IIC_SDA = 1;
//  577     IIC_DELAY(5);
//  578     IIC_SCL = 1;
//  579     IIC_DELAY(5);
//  580     IIC_SDA = 0;
//  581     IIC_DELAY(5);
//  582 	
//  583 }
//  584 
//  585 void IIC_STOP(void)                //º¯Êý¹¦ÄÜ£ºI2CÍ¨ÐÅÍ£Ö¹
//  586 {
//  587     IIC_SDA = 0;
//  588     IIC_DELAY(5);
//  589     IIC_SCL = 1;
//  590     IIC_DELAY(5);
//  591     IIC_SDA = 1;
//  592     IIC_DELAY(5);
//  593 }
//  594 
//  595 void IIC_ACK(void)                 //º¯Êý¹¦ÄÜ£ºI2CÍ¨ÐÅ²éÓ¦´ðÎ»
//  596 {	
//  597    IIC_SDA = 1;
//  598    IIC_SCL = 1;
//  599    IIC_DELAY(5);
//  600    IIC_SCL = 0;
//  601 }
//  602 
//  603 void IIC_WRITE_BYTE(unsigned char wdata)//º¯Êý¹¦ÄÜ£ºÏòI2C´Ó»úÐ´ÈëÒ»¸ö×Ö½Ú
//  604 {
//  605      unsigned char i,temp,temp1;
//  606 
//  607 	 temp1 = wdata;
//  608      for(i=0;i<8;i++)
//  609 	{
//  610           IIC_SCL = 0;
//  611           IIC_DELAY(5);
//  612           temp = temp1;
//  613           temp = temp&0x80;
//  614           if(temp == 0x80)
//  615           IIC_SDA = 1;			
//  616           else
//  617           IIC_SDA = 0;
//  618           IIC_DELAY(5);
//  619           IIC_SCL = 1;
//  620           IIC_DELAY(5);
//  621           IIC_SCL = 0;
//  622           IIC_DELAY(5);
//  623           temp1=temp1<<1;	
//  624 	}
//  625 
//  626 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        CFI EndBlock cfiBlock28
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:CODE:NOROOT(0)
zb_SendDataConfirm:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI Function zb_SendDataConfirm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock30

        RSEG BANKED_CODE:CODE:NOROOT(0)
zb_BindConfirm:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function zb_BindConfirm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:CODE:NOROOT(0)
zb_AllowBindConfirm:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:CODE:NOROOT(0)
zb_FindDeviceConfirm:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock33

        RSEG BANKED_CODE:CODE:NOROOT(0)
zb_HanderMsg:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function zb_HanderMsg
        ; Saved register size: 0
        ; Auto size: 0
        LJMP    ?BRET
        CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:CODE:NOROOT(0)
zb_ReceiveDataIndication:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
        FUNCALL zb_ReceiveDataIndication, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, paramRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0x52
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     ?V0 + 6,#0x1
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zb_ReceiveDataIndication>_0`:
        DATA
        DW        1
        DB        1
        DW        ??zb_ReceiveDataIndication_0
        DW        ??zb_ReceiveDataIndication_1
        DW        ??zb_ReceiveDataIndication_2
        CODE
??zb_ReceiveDataIndication_2:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??zb_ReceiveDataIndication_3
??zb_ReceiveDataIndication_4:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#IIC_PRE_ON
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,#0x3
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??zb_ReceiveDataIndication_3:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 5
        JNC     ??zb_ReceiveDataIndication_5
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zb_ReceiveDataIndication_6
        MOV     A,#0xc
        XRL     A,R1
??zb_ReceiveDataIndication_6:
        JZ      ??zb_ReceiveDataIndication_4
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
??zb_ReceiveDataIndication_7:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x1
        MOV     R4,#0x2
        LJMP    ??zb_ReceiveDataIndication_8 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 82)
??zb_ReceiveDataIndication_5:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,A
        SJMP    ??zb_ReceiveDataIndication_7
??zb_ReceiveDataIndication_1:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        SJMP    ??zb_ReceiveDataIndication_9
??zb_ReceiveDataIndication_10:
        MOV     A,R0
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
??zb_ReceiveDataIndication_9:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 5
        JC      $+5
        LJMP    ??zb_ReceiveDataIndication_11 & 0xFFFF
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     A,R3
        MOVX    @DPTR,A
        INC     ?V0 + 6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_91:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     ?V0 + 6
        ; Setup parameters for call to function paramRead
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     R4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ??paramRead?relay
        MOV     ?V0 + 8,R2
        MOV     R0,?V0 + 8
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_53:
        JC      $+5
        LJMP    ??zb_ReceiveDataIndication_10 & 0xFFFF
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x1
        SJMP    ??zb_ReceiveDataIndication_12
        CFI CFA_XSP16 add(XSP16, 82)
??zb_ReceiveDataIndication_11:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,?V0 + 6
??zb_ReceiveDataIndication_12:
        MOV     R4,#0x1
??zb_ReceiveDataIndication_8:
        MOV     R5,#-0x80
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 82)
??zb_ReceiveDataIndication_0:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:CODE:NOROOT(0)
paramRead:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function paramRead
        FUNCALL paramRead, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL paramRead, MT_ReverseBytes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL paramRead, AssocMakeList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for paramRead>_0`:
        DATA
        DW        0
        DW        10
        DW        1
        DW        ??paramRead_0
        DW        2
        DW        ??paramRead_1
        DW        3
        DW        ??paramRead_2
        DW        4
        DW        ??paramRead_3
        DW        5
        DW        ??paramRead_4
        DW        20
        DW        ??paramRead_5
        DW        21
        DW        ??paramRead_6
        DW        3073
        DW        ??paramRead_7
        DW        3074
        DW        ??paramRead_8
        DW        3088
        DW        ??paramRead_9
        DW        ??paramRead_10
        CODE
??paramRead_0:
        MOV     A,#0x11
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x33
??paramRead_11:
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ??paramRead_12 & 0xFFFF
??paramRead_1:
        MOV     A,#0x22
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x44
        SJMP    ??paramRead_11
??paramRead_2:
        CLR     A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x1
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ??paramRead_12 & 0xFFFF
??paramRead_3:
        MOV     A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_72:
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     R4,#0x6
        LJMP    ??paramRead_10 & 0xFFFF
??paramRead_4:
        MOV     A,#0xc
??paramRead_13:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        LJMP    ??paramRead_14 & 0xFFFF
??paramRead_5:
        ; Setup parameters for call to function ZMacGetReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#-0x1e
        LCALL   ??ZMacGetReq?relay
        ; Setup parameters for call to function MT_ReverseBytes
        MOV     R1,#0x8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MT_ReverseBytes?relay
        MOV     R4,#0x8
        MOV     R5,#0x0
        LJMP    ??paramRead_10 & 0xFFFF
??paramRead_6:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AssocMakeList
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocMakeList?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??paramRead_15
??paramRead_16:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R4,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R5,A
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??paramRead_15:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_54:
        JNC     ??paramRead_17
        CLR     C
        MOV     A,R2
        SUBB    A,#0x10
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_55:
        JC      ??paramRead_16
??paramRead_17:
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        SJMP    ??paramRead_10
??paramRead_7:
        MOV     DPTR,#IIC_PRE_ON
        MOVX    A,@DPTR
        LJMP    ??paramRead_13 & 0xFFFF
??paramRead_8:
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     R4,#0x4
        SJMP    ??paramRead_10
??paramRead_9:
        INC     R4
??paramRead_12:
        INC     R4
??paramRead_14:
        INC     R4
??paramRead_10:
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_54
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_55
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_73:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_72
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_33
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_34
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker47 Using cfiCommon1
        CFI (cfiPicker47) NoFunction
        CFI (cfiPicker47) Picker
        INC     DPTR
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiCond48 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_33
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_34
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#temp
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_WAIT:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function IIC_WAIT
        FUNCALL IIC_WAIT, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function IIC_DELAY
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_DELAY:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function IIC_DELAY
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??IIC_DELAY_0
??IIC_DELAY_1:
        nop
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
??IIC_DELAY_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??IIC_DELAY_1
        LJMP    ?BRET
        CFI EndBlock cfiBlock57

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_QMAKE:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function IIC_QMAKE
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        SJMP    ??IIC_QMAKE_0
??IIC_QMAKE_1:
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
??IIC_QMAKE_0:
        MOV     R1,A
        MOV     A,R0
        JNZ     ??IIC_QMAKE_2
        MOV     A,R1
??IIC_QMAKE_2:
        JNZ     ??IIC_QMAKE_1
        LJMP    ?BRET
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_ACC_INIT:
        CFI Block cfiBlock59 Using cfiCommon0
        CFI Function IIC_ACC_INIT
        FUNCALL IIC_ACC_INIT, rfid_uart_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ACC_INIT, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ACC_INIT, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_ACC_INIT, IIC_QMAKE
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ORL     0xfd,#0xc0
        MOV     A,0xfd
        ; Setup parameters for call to function rfid_uart_init
        LCALL   ??rfid_uart_init?relay
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_74:
        ; Setup parameters for call to function IIC_QMAKE
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??IIC_QMAKE?relay
        SJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock59
        REQUIRE _A_P0
        REQUIRE P0DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_START:
        CFI Block cfiBlock60 Using cfiCommon0
        CFI Function IIC_START
        FUNCALL IIC_START, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_START, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_START, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_75:
        CLR     0x80.6
        ; Setup parameters for call to function IIC_DELAY
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock60
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_STOP:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function IIC_STOP
        FUNCALL IIC_STOP, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_STOP, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_STOP, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        CLR     0x80.6
        ; Setup parameters for call to function IIC_DELAY
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_76:
        SETB    0x80.6
        CFI EndBlock cfiBlock61
        ; Setup parameters for call to function IIC_DELAY
        REQUIRE ?Subroutine1
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
        CFI EndBlock cfiBlock62
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock63

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_ACK:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function IIC_ACK
        FUNCALL IIC_ACK, IIC_DELAY
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        SETB    0x80.6
        SETB    0x80.7
        ; Setup parameters for call to function IIC_DELAY
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
        CLR     0x80.7
        SJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock64
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
IIC_WRITE_BYTE:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function IIC_WRITE_BYTE
        FUNCALL IIC_WRITE_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     ?V0 + 0,R7
        MOV     R6,#0x8
??IIC_WRITE_BYTE_0:
        CLR     0x80.7
        ; Setup parameters for call to function IIC_DELAY
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.7
        JNC     ??IIC_WRITE_BYTE_1
        SETB    0x80.6
        SJMP    ??IIC_WRITE_BYTE_2
??IIC_WRITE_BYTE_1:
        CLR     0x80.6
??IIC_WRITE_BYTE_2:
        ; Setup parameters for call to function IIC_DELAY
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_77:
        CLR     0x80.7
        ; Setup parameters for call to function IIC_DELAY
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     ?V0 + 0,A
        DEC     R6
        MOV     A,R6
        JNZ     ??IIC_WRITE_BYTE_0
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock65
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  627 char IIC_READ_BYTE(void)			 //º¯Êý¹¦ÄÜ£º´ÓI2C´Ó»úÖÐ¶Á³öÒ»¸ö×Ö½Ú
IIC_READ_BYTE:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function IIC_READ_BYTE
//  628 {
        FUNCALL IIC_READ_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ_BYTE, IIC_DELAY
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  629 	 char IIC_DATA;
//  630      for(int i=0;i<8;i++)
        MOV     R7,#0x8
//  631 	{	
//  632           IIC_DATA = IIC_DATA<<1;
??IIC_READ_BYTE_0:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
//  633           IIC_SDA=1;
        SETB    0x80.6
//  634           IIC_DELAY(5);
        ; Setup parameters for call to function IIC_DELAY
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
//  635           IIC_SCL = 0;
        CLR     0x80.7
//  636           IIC_DELAY(5);
        ; Setup parameters for call to function IIC_DELAY
        LCALL   ??Subroutine36_0 & 0xFFFF
//  637           IIC_SCL = 1;
//  638           IIC_DELAY(5);
//  639           if(IIC_SDA == 1)
??CrossCallReturnLabel_78:
        MOV     C,0x80.6
        JNC     ??IIC_READ_BYTE_1
//  640           IIC_DATA |= 0x01;
        MOV     A,R6
        SETB    0xE0 /* A   */.0
        MOV     R6,A
//  641 	}
??IIC_READ_BYTE_1:
        DEC     R7
        MOV     A,R7
        JNZ     ??IIC_READ_BYTE_0
//  642 	return IIC_DATA;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock66
        REQUIRE _A_P0
//  643 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        SETB    0x80.6
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69
        ; Setup parameters for call to function IIC_DELAY
        ; Setup parameters for call to function IIC_DELAY
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_77
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_78
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond73) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond73) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond73) CFA_SP SP+-5
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond74) CFA_SP SP+-5
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
        SETB    0x80.7
        ; Setup parameters for call to function IIC_DELAY
        ; Setup parameters for call to function IIC_DELAY
        ; Setup parameters for call to function IIC_DELAY
        ; Setup parameters for call to function IIC_DELAY
        ; Setup parameters for call to function IIC_DELAY
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??IIC_DELAY?relay
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  644 void IIC_WRITE(unsigned char byte_add,unsigned char wdata)//º¯Êý¹¦ÄÜ£º°´µØÖ·Ð´ÈëÒ»×Ö½ÚÊý¾Ý
IIC_WRITE:
        CFI Block cfiBlock76 Using cfiCommon0
        CFI Function IIC_WRITE
//  645 {
        FUNCALL IIC_WRITE, IIC_START
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_WRITE_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_WRITE_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_WRITE_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_WRITE, IIC_STOP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  646     unsigned char T=0xEE;
//  647      IIC_START();
        ; Setup parameters for call to function IIC_START
        LCALL   ?Subroutine24 & 0xFFFF
//  648      IIC_WRITE_BYTE(T);
//  649      IIC_ACK();
//  650      IIC_WRITE_BYTE(byte_add);
//  651      IIC_ACK();
//  652      IIC_WRITE_BYTE(wdata);
??CrossCallReturnLabel_58:
        ; Setup parameters for call to function IIC_WRITE_BYTE
        MOV     A,R6
        LCALL   ?Subroutine29 & 0xFFFF
//  653      IIC_ACK();
//  654      IIC_STOP();
??CrossCallReturnLabel_79:
        ; Setup parameters for call to function IIC_STOP
        LCALL   ??IIC_STOP?relay
//  655 }
        LJMP    ??Subroutine33_0 & 0xFFFF
        CFI EndBlock cfiBlock76

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  656 char IIC_READ(unsigned char byte_add)	           //º¯Êý¹¦ÄÜ£º°´µØÖ·¶Á³öÒ»×Ö½ÚÊý¾Ý
IIC_READ:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI Function IIC_READ
//  657 {
        FUNCALL IIC_READ, IIC_START
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_WRITE_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_WRITE_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_START
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_WRITE_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_READ_BYTE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_ACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL IIC_READ, IIC_STOP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  658      unsigned char T=0xEE;
//  659      char IIC_DATA;
//  660      IIC_START();
        ; Setup parameters for call to function IIC_START
        LCALL   ?Subroutine24 & 0xFFFF
//  661      IIC_WRITE_BYTE(T);
//  662      IIC_ACK();
//  663      IIC_WRITE_BYTE(byte_add);
//  664      IIC_ACK();
//  665      T = 0xEF;
//  666      IIC_START();
??CrossCallReturnLabel_59:
        ; Setup parameters for call to function IIC_START
        LCALL   ??IIC_START?relay
//  667      IIC_WRITE_BYTE(T);
        ; Setup parameters for call to function IIC_WRITE_BYTE
        MOV     R1,#-0x11
        LCALL   ??Subroutine37_0 & 0xFFFF
//  668      IIC_ACK();
//  669      IIC_DATA = IIC_READ_BYTE();
??CrossCallReturnLabel_81:
        ; Setup parameters for call to function IIC_READ_BYTE
        LCALL   ??IIC_READ_BYTE?relay
        MOV     A,R1
        MOV     R6,A
//  670      IIC_ACK();
        ; Setup parameters for call to function IIC_ACK
        LCALL   ??IIC_ACK?relay
//  671      IIC_STOP();
        ; Setup parameters for call to function IIC_STOP
        LCALL   ??IIC_STOP?relay
//  672      return IIC_DATA;
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock77
//  673 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond78 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker80 Using cfiCommon1
        CFI (cfiPicker80) NoFunction
        CFI (cfiPicker80) Picker
        LCALL   ??IIC_START?relay
        ; Setup parameters for call to function IIC_WRITE_BYTE
        ; Setup parameters for call to function IIC_WRITE_BYTE
        MOV     R1,#-0x12
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_82:
        ; Setup parameters for call to function IIC_WRITE_BYTE
        ; Setup parameters for call to function IIC_WRITE_BYTE
        MOV     A,R7
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_80:
        RET
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond81 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_79
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_58
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_59
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOV     R1,A
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_81
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_58
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_59
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_79
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_58
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_59
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        LCALL   ??IIC_WRITE_BYTE?relay
        ; Setup parameters for call to function IIC_ACK
        ; Setup parameters for call to function IIC_ACK
        ; Setup parameters for call to function IIC_ACK
        ; Setup parameters for call to function IIC_ACK
        ; Setup parameters for call to function IIC_ACK
        ; Setup parameters for call to function IIC_ACK
        LCALL   ??IIC_ACK?relay
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91
//  674 
//  675 
//  676 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  677 void IIC_BMP085_INIT(void)
IIC_BMP085_INIT:
        CFI Block cfiBlock92 Using cfiCommon0
        CFI Function IIC_BMP085_INIT
//  678 {
        FUNCALL IIC_BMP085_INIT, IIC_READ
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  679         unsigned char memo[22];
//  680 	unsigned char i,*PX;
//  681 	void *PF;
//  682 	//´ÓEEPROMÖÐ¶ÁÈ¡Ô¤Éè²ÎÊý
//  683 	for(i=0;i<22;i++){memo[i]=IIC_READ(0xAA+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_0:
        ; Setup parameters for call to function IIC_READ
        MOV     A,#-0x56
        ADD     A,R6
        MOV     R1,A
        LCALL   ??IIC_READ?relay
        MOV     ?V0 + 0,R6
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     A,R1
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x16
        JC      ??IIC_BMP085_INIT_0
//  684 	PX=memo;
//  685 	PF=&AC_1;		
//  686 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_1:
        MOV     DPL,R6
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_84:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(AC_1 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((AC_1 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_20:
        JC      ??IIC_BMP085_INIT_1
//  687 	PF=&AC_2;		
//  688 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+2+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_2:
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_56:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(AC_2 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((AC_2 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        JC      ??IIC_BMP085_INIT_2
//  689 	PF=&AC_3;		
//  690 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+4+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_3:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_51:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(AC_3 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((AC_3 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      ??IIC_BMP085_INIT_3
//  691 	PF=&AC_4;		
//  692 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+6+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_4:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(AC_4 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((AC_4 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      ??IIC_BMP085_INIT_4
//  693 	PF=&AC_5;		
//  694 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+8+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_5:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_49:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(AC_5 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((AC_5 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_24:
        JC      ??IIC_BMP085_INIT_5
//  695 	PF=&AC_6;		
//  696 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+10+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_6:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_50:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(AC_6 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((AC_6 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_25:
        JC      ??IIC_BMP085_INIT_6
//  697 	PF=&B_1;		
//  698 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+12+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_7:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,#0xc
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_39:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(B_1 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((B_1 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_26:
        JC      ??IIC_BMP085_INIT_7
//  699 	PF=&B_2;		
//  700 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+14+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_8:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     A,#0xe
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_40:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(B_2 & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((B_2 >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_27:
        JC      ??IIC_BMP085_INIT_8
//  701 	PF=&MB;		
//  702 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+16+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_9:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     A,#0x10
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_41:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(MB & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((MB >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_28:
        JC      ??IIC_BMP085_INIT_9
//  703 	PF=&MC;		
//  704 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+18+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_10:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,#0x12
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_42:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(MC & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((MC >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_29:
        JC      ??IIC_BMP085_INIT_10
//  705 	PF=&MD;		
//  706 	for(i=0;i<2;i++){*((char *)PF+i)=*(PX+20+i);}
        MOV     R6,#0x0
??IIC_BMP085_INIT_11:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,#0x14
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_43:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#(MD & 0xff)
        MOV     DPL,A
        CLR     A
        ADDC    A,#((MD >> 8) & 0xff)
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_30:
        JC      ??IIC_BMP085_INIT_11
//  707 }
        MOV     A,#0x16
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond93 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond94 Using cfiCommon0
        CFI (cfiCond94) NoFunction
        CFI (cfiCond94) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond94) CFA_SP SP+0
        CFI (cfiCond94) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker95 Using cfiCommon1
        CFI (cfiPicker95) NoFunction
        CFI (cfiPicker95) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_65:
        RET
        CFI EndBlock cfiCond93
        CFI EndBlock cfiCond94
        CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond96 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_52
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_49
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_50
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_88:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_64:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker106 Using cfiCommon1
        CFI (cfiPicker106) NoFunction
        CFI (cfiPicker106) Picker
        MOV     R0,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiPicker106
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond107 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_83
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_84
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_85
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_87:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond111 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     R2,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker122 Using cfiCommon1
        CFI (cfiPicker122) NoFunction
        CFI (cfiPicker122) Picker
        ADD     A,R2
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiPicker122

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond123 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        MOVX    @DPTR,A
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x2
        RET
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134
//  708 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  709 long BMP085_SAMPLE(short OSS)//ÎÂ¶È¡¢Ñ¹Á¦²ÉÑù
BMP085_SAMPLE:
        CFI Block cfiBlock135 Using cfiCommon0
        CFI Function BMP085_SAMPLE
//  710 {
        FUNCALL BMP085_SAMPLE, IIC_WRITE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP085_SAMPLE, IIC_QMAKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP085_SAMPLE, IIC_READ
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP085_SAMPLE, IIC_WRITE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP085_SAMPLE, IIC_QMAKE
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BMP085_SAMPLE, IIC_READ
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R2
        MOV     R6,A
//  711 	long UT=0;			//ÎÂ¶ÈÔ­Ê¼Öµ	
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  712 	long UP=0;			//Ñ¹Á¦Ô­Ê¼Öµ
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  713 	long X1,X2,X3;
//  714 	long B3,B5,B6;
//  715 	unsigned long B4,B7;
//  716 	unsigned char i,*PX,*PX1,BMPmemo[2],BMPmemo1[3];
//  717 	void *PF,*PF1;
//  718 
//  719 	IIC_WRITE(0xF4,0x2E);	//·¢ÃüÁî²ÉÎÂ¶È
        ; Setup parameters for call to function IIC_WRITE
        MOV     R2,#0x2e
        MOV     R1,#-0xc
        LCALL   ??IIC_WRITE?relay
//  720 	IIC_QMAKE(10);							//µÈ´ýAD£¬ÑÓ³Ù4.5msÒÔÉÏ
        ; Setup parameters for call to function IIC_QMAKE
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??IIC_QMAKE?relay
//  721 	for(i=0;i<2;i++){BMPmemo[i]=IIC_READ(0xF6+i);}//¶ÁÈ¡½á¹û
        MOV     ?V0 + 2,#0x0
??BMP085_SAMPLE_0:
        ; Setup parameters for call to function IIC_READ
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     A,R1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_35:
        JC      ??BMP085_SAMPLE_0
//  722 	PX=BMPmemo;	   						
//  723 	PF=&UT;								
//  724 	for(i=0;i<2;i++){*((char *)PF+2+i)=*(PX+i);}
        MOV     ?V0 + 2,#0x0
??BMP085_SAMPLE_1:
        MOV     DPL,?V0 + 2
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_85:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_57:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_36:
        JC      ??BMP085_SAMPLE_1
//  725        // IIC_QMAKE(10);
//  726 	IIC_WRITE(0xF4,0x34+(OSS<<6));//·¢ÃüÁî²ÉÑ¹Á¦
        ; Setup parameters for call to function IIC_WRITE
        MOV     A,R6
        SWAP    A
        RLC     A
        RLC     A
        ANL     A,#0xc0
        ADD     A,#0x34
        MOV     R2,A
        MOV     R1,#-0xc
        LCALL   ??IIC_WRITE?relay
//  727 	IIC_QMAKE(60);							//ÑÓ³ÙÊ±¼äÊÓ¹¤×÷·½Ê½¶ø¶¨£¬¾ßÌå²éÊÖ²á
        ; Setup parameters for call to function IIC_QMAKE
        MOV     R2,#0x3c
        MOV     R3,#0x0
        LCALL   ??IIC_QMAKE?relay
//  728 	for(i=0;i<3;i++){BMPmemo1[i]=IIC_READ(0xF6+i);}//¶ÁÈ¡½á¹û
        MOV     ?V0 + 2,#0x0
??BMP085_SAMPLE_2:
        ; Setup parameters for call to function IIC_READ
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     A,R1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_37:
        JC      ??BMP085_SAMPLE_2
//  729 	PX1=BMPmemo1;	   						
//  730 	PF1=&UP;								
//  731 	for(i=0;i<3;i++){*((char *)PF1+1+i)=*(PX1+i);}
        MOV     ?V0 + 2,#0x0
??BMP085_SAMPLE_3:
        MOV     DPL,?V0 + 2
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_83:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        ADD     A,R0
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_92:
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_38:
        JC      ??BMP085_SAMPLE_3
//  732 	UP=UP>>(8-OSS);
//  733 
//  734 	X1=(UT-AC_6)*AC_5/32768; 		//¼ÆËãÎÂ¶È
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     DPTR,#AC_6
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_SUB
        MOV     DPTR,#AC_5
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_8000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_DIV_MOD
//  735 	X2=MC;
//  736 	X2=X2*2048/(X1+MD);
//  737 	B5=X1+X2;
        MOV     ?V0 + 0,?V0 + 12
        MOV     ?V0 + 1,?V0 + 13
        MOV     ?V0 + 2,?V0 + 14
        MOV     ?V0 + 3,?V0 + 15
        MOV     DPTR,#MC
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0xb
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPTR,#MD
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_ADD
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
//  738 	Temp=(B5+8)/16;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     DPTR,#__Constant_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_10
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_DIV_MOD
        MOV     DPTR,#Temp
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  739 
//  740 	B6=B5-4000;			//¼ÆËãÑ¹Á¦
        MOV     DPTR,#__Constant_fffff060
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
//  741 	X1=B_2;
//  742 	X1=(X1*(B6*B6/4096))/2048;
//  743 	X2=AC_2;
//  744 	X2=X2*B6/2048;
//  745 	X3=X1+X2;
//  746 	B3=AC_1;
//  747 	B3=(((B3*4+X3)<<OSS)+2)/4;	
//  748 	X1=AC_3;
//  749 	X1=X1*B6/8192;
//  750 	X2=B_1;
//  751 	X2=(X2*(B6*B6/4096))/65536;
//  752 	X3=((X1+X2)+2)/4;
//  753 	B4=AC_4;
//  754 	B4=B4*(unsigned long)(X3+32768)/32768;
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_1000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_DIV_MOD
        MOV     DPTR,#AC_4
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 9
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 10
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 11
        CFI CFA_SP SP+-4
        MOV     DPTR,#AC_3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_2000
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        PUSH    ?V0 + 8
        CFI CFA_SP SP+-5
        PUSH    ?V0 + 9
        CFI CFA_SP SP+-6
        PUSH    ?V0 + 10
        CFI CFA_SP SP+-7
        PUSH    ?V0 + 11
        CFI CFA_SP SP+-8
        MOV     DPTR,#B_1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_DIV_MOD
        POP     ?V0 + 11
        CFI CFA_SP SP+-7
        POP     ?V0 + 10
        CFI CFA_SP SP+-6
        POP     ?V0 + 9
        CFI CFA_SP SP+-5
        POP     ?V0 + 8
        CFI CFA_SP SP+-4
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_2
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_4
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?L_DIV_MOD
        MOV     DPTR,#__Constant_8000
        MOV     R0,#?V0 + 8
        LCALL   ?L_ADD_X
        POP     ?V0 + 15
        CFI CFA_SP SP+-3
        POP     ?V0 + 14
        CFI CFA_SP SP+-2
        POP     ?V0 + 13
        CFI CFA_SP SP+-1
        POP     ?V0 + 12
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     A,#0xf
        MOV     R0,#?V0 + 12
        LCALL   ?UL_SHR
        MOV     ?V0 + 8,?V0 + 12
        MOV     ?V0 + 9,?V0 + 13
        MOV     ?V0 + 10,?V0 + 14
        MOV     ?V0 + 11,A
//  755 	B7=((unsigned long)UP-B3)*(50000>>OSS);	
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     A,R6
        MOV     R2,A
        MOV     A,#0x8
        CLR     C
        SUBB    A,R2
        MOV     R0,#?V0 + 12
        LCALL   ?SL_SHR
        PUSH    ?V0 + 12
        CFI CFA_SP SP+-1
        PUSH    ?V0 + 13
        CFI CFA_SP SP+-2
        PUSH    ?V0 + 14
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 15
        CFI CFA_SP SP+-4
        MOV     DPTR,#AC_1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,#0x2
        MOV     R0,#?V0 + 12
        LCALL   ?L_SHL
        PUSH    ?V0 + 12
        CFI CFA_SP SP+-5
        PUSH    ?V0 + 13
        CFI CFA_SP SP+-6
        PUSH    ?V0 + 14
        CFI CFA_SP SP+-7
        PUSH    ?V0 + 15
        CFI CFA_SP SP+-8
        MOV     DPTR,#B_2
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_800
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        POP     ?V0 + 7
        CFI CFA_SP SP+-7
        POP     ?V0 + 6
        CFI CFA_SP SP+-6
        POP     ?V0 + 5
        CFI CFA_SP SP+-5
        POP     ?V0 + 4
        CFI CFA_SP SP+-4
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_ADD
        MOV     DPTR,#AC_2
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_800
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?L_DIV_MOD
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 12
        LCALL   ?L_ADD
        MOV     A,R6
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPTR,#__Constant_2
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_4
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_DIV_MOD
        POP     ?V0 + 3
        CFI CFA_SP SP+-3
        POP     ?V0 + 2
        CFI CFA_SP SP+-2
        POP     ?V0 + 1
        CFI CFA_SP SP+-1
        POP     ?V0 + 0
        CFI CFA_SP SP+0
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_SUB
        MOV     ?V0 + 4,#0x50
        MOV     ?V0 + 5,#-0x3d
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 4
        LCALL   ?SL_SHR
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
//  756 	if(B7<0x80000000){Pre=(B7*2)/B4;}
        MOV     DPTR,#__Constant_80000000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_GT
        JNC     ??BMP085_SAMPLE_4
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        SJMP    ??BMP085_SAMPLE_5
//  757 	else {Pre=(B7/B4)*2;}
??BMP085_SAMPLE_4:
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
??BMP085_SAMPLE_5:
        MOV     DPTR,#Pre
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  758 	X1=(Pre/256)*(Pre/256);
//  759 	X1=(X1*3038)/65536;
//  760 	X2=(-7357*Pre)/65536;
//  761 	Pre=Pre+(X1+X2+3791)/16;
        MOV     DPTR,#Pre
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_100
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_DIV_MOD
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_bde
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        MOV     DPTR,#Pre
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_ffffe343
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     DPTR,#__Constant_10000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?L_DIV_MOD
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_ecf
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_X
        MOV     DPTR,#__Constant_10
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_DIV_MOD
        MOV     DPTR,#Pre
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
//  762         return Pre;
        MOV     DPTR,#Pre
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock135
//  763 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond136 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond137 Using cfiCommon0
        CFI (cfiCond137) NoFunction
        CFI (cfiCond137) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond137) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond137) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond137) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond137) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond137) CFA_SP SP+0
        CFI (cfiCond137) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker138 Using cfiCommon1
        CFI (cfiPicker138) NoFunction
        CFI (cfiPicker138) Picker
        MOV     A,#-0xa
        ADD     A,?V0 + 2
        MOV     R1,A
        LCALL   ??IIC_READ?relay
        MOV     ?V0 + 0,?V0 + 2
        RET
        CFI EndBlock cfiCond136
        CFI EndBlock cfiCond137
        CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond139 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_94
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond142 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_93
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOV     A,DPL
        ADD     A,?V0 + 0
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_90
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_91
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+-1
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond148 Using cfiCommon0
        CFI (cfiCond148) NoFunction
        CFI (cfiCond148) Conditional ??CrossCallReturnLabel_92
        CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond148) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond148) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond148) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond148) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond148) CFA_SP SP+-1
        CFI (cfiCond148) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond149 Using cfiCommon0
        CFI (cfiCond149) NoFunction
        CFI (cfiCond149) Conditional ??CrossCallReturnLabel_93
        CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond149) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond149) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond149) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond149) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond149) CFA_SP SP+0
        CFI (cfiCond149) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_94
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond151 Using cfiCommon0
        CFI (cfiCond151) NoFunction
        CFI (cfiCond151) Conditional ??CrossCallReturnLabel_95
        CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond151) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond151) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond151) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond151) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond151) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond151) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond151) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond151) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond151) CFA_SP SP+0
        CFI (cfiCond151) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker152 Using cfiCommon1
        CFI (cfiPicker152) NoFunction
        CFI (cfiPicker152) Picker
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiCond148
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiCond151
        CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond153 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond154) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+-1
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker155 Using cfiCommon1
        CFI (cfiPicker155) NoFunction
        CFI (cfiPicker155) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_86:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond156 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_84
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_85
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_56
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_57
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond160) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+-1
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_52
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_49
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_64, ??CrossCallReturnLabel_50
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_84
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_85
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_87, ??CrossCallReturnLabel_83
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_56
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_57
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond170) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+-1
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker171 Using cfiCommon1
        CFI (cfiPicker171) NoFunction
        CFI (cfiPicker171) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond172 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond173 Using cfiCommon0
        CFI (cfiCond173) NoFunction
        CFI (cfiCond173) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond173) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond173) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond173) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond173) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond173) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond173) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond173) CFA_SP SP+0
        CFI (cfiCond173) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker174 Using cfiCommon1
        CFI (cfiPicker174) NoFunction
        CFI (cfiPicker174) Picker
        MOVX    @DPTR,A
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x3
        RET
        CFI EndBlock cfiCond172
        CFI EndBlock cfiCond173
        CFI EndBlock cfiPicker174

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond175 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond176 Using cfiCommon0
        CFI (cfiCond176) NoFunction
        CFI (cfiCond176) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond176) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond176) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond176) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond176) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond176) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond176) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond176) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond176) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond176) CFA_SP SP+0
        CFI (cfiCond176) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker177 Using cfiCommon1
        CFI (cfiPicker177) NoFunction
        CFI (cfiPicker177) Picker
        MOVX    @DPTR,A
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x2
        RET
        CFI EndBlock cfiCond175
        CFI EndBlock cfiCond176
        CFI EndBlock cfiPicker177

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond178 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond179 Using cfiCommon0
        CFI (cfiCond179) NoFunction
        CFI (cfiCond179) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond179) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond179) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond179) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond179) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond179) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond179) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond179) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond179) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond179) CFA_SP SP+0
        CFI (cfiCond179) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond180 Using cfiCommon0
        CFI (cfiCond180) NoFunction
        CFI (cfiCond180) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond180) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond180) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond180) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond180) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond180) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond180) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond180) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond180) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond180) CFA_SP SP+0
        CFI (cfiCond180) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker181 Using cfiCommon1
        CFI (cfiPicker181) NoFunction
        CFI (cfiPicker181) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond178
        CFI EndBlock cfiCond179
        CFI EndBlock cfiCond180
        CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond182 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-4
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond183 Using cfiCommon0
        CFI (cfiCond183) NoFunction
        CFI (cfiCond183) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond183) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond183) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond183) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond183) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond183) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond183) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond183) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond183) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond183) CFA_SP SP+-4
        CFI (cfiCond183) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker184 Using cfiCommon1
        CFI (cfiPicker184) NoFunction
        CFI (cfiPicker184) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
        CFI EndBlock cfiCond182
        CFI EndBlock cfiCond183
        CFI EndBlock cfiPicker184

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond185 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-4
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond186 Using cfiCommon0
        CFI (cfiCond186) NoFunction
        CFI (cfiCond186) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_14
        CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond186) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond186) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond186) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond186) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond186) CFA_SP SP+-4
        CFI (cfiCond186) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond187 Using cfiCommon0
        CFI (cfiCond187) NoFunction
        CFI (cfiCond187) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_9
        CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond187) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond187) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond187) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond187) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond187) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond187) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond187) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond187) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond187) CFA_SP SP+-8
        CFI (cfiCond187) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond188 Using cfiCommon0
        CFI (cfiCond188) NoFunction
        CFI (cfiCond188) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_10
        CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond188) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond188) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond188) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond188) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond188) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond188) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond188) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond188) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond188) CFA_SP SP+-8
        CFI (cfiCond188) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker189 Using cfiCommon1
        CFI (cfiPicker189) NoFunction
        CFI (cfiPicker189) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 14,A
        MOV     ?V0 + 15,A
        RET
        CFI EndBlock cfiCond185
        CFI EndBlock cfiCond186
        CFI EndBlock cfiCond187
        CFI EndBlock cfiCond188
        CFI EndBlock cfiPicker189

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond190 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond191 Using cfiCommon0
        CFI (cfiCond191) NoFunction
        CFI (cfiCond191) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond191) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond191) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond191) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond191) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond191) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond191) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond191) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond191) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond191) CFA_SP SP+-4
        CFI (cfiCond191) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker192 Using cfiCommon1
        CFI (cfiPicker192) NoFunction
        CFI (cfiPicker192) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        RET
        CFI EndBlock cfiCond190
        CFI EndBlock cfiCond191
        CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond193 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-8
        CFI CFA_XSP16 add(XSP16, 37)
        CFI Block cfiCond194 Using cfiCommon0
        CFI (cfiCond194) NoFunction
        CFI (cfiCond194) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond194) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond194) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond194) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond194) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond194) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond194) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond194) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond194) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond194) CFA_SP SP+-8
        CFI (cfiCond194) CFA_XSP16 add(XSP16, 37)
        CFI Block cfiPicker195 Using cfiCommon1
        CFI (cfiPicker195) NoFunction
        CFI (cfiPicker195) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 4
        RET
        CFI EndBlock cfiCond193
        CFI EndBlock cfiCond194
        CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  764 void rfid_uart_init(void)
rfid_uart_init:
        CFI Block cfiBlock196 Using cfiCommon0
        CFI Function rfid_uart_init
//  765 {
        ; Saved register size: 0
        ; Auto size: 0
//  766 #if 1
//  767    P0SEL |=  0x0C;                  //³õÊ¼»¯UART0¶Ë¿Ú
        ORL     0xf3,#0xc
        MOV     A,0xf3
//  768    PERCFG&= ~0x01;                  //Ñ¡ÔñUART0Îª¿ÉÑ¡Î»ÖÃÒ»
        ANL     0xf1,#0xfe
//  769 #else
//  770    PERCFG |= 0x01;
//  771    P1SEL |= 0xc0;
//  772 #endif
//  773    U0UCR = 2;                       //ÉèÖÃÍ£Ö¹Î»ÓëÆæÅ¼Ð£Ñé 
        MOV     0xc4,#0x2
//  774    U0CSR = 0xC0;                    //ÉèÖÃÎªUARTÄ£Ê½,¶øÇÒÊ¹ÄÜ½ÓÊÜÆ÷
        MOV     0x86,#-0x40
//  775    
//  776    U0GCR = 11;
        MOV     0xc5,#0xb
//  777    U0BAUD = 216;                    //ÉèÖÃUART0²¨ÌØÂÊÎª115200bps
        MOV     0xc2,#-0x28
//  778   
//  779 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock196
        REQUIRE U0CSR
        REQUIRE U0BAUD
        REQUIRE U0UCR
        REQUIRE U0GCR
        REQUIRE PERCFG
        REQUIRE P0SEL
//  780 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  781 void  rfid_uart_send(char data)
rfid_uart_send:
        CFI Block cfiBlock197 Using cfiCommon0
        CFI Function rfid_uart_send
//  782 {
        ; Saved register size: 0
        ; Auto size: 0
//  783   U0DBUF = data;
        MOV     0xc1,R1
//  784   while(!UTX0IF);    //µÈ´ýUART¿ÕÏÐÊ±·¢ËÍÊý¾Ý
??rfid_uart_send_0:
        MOV     C,0xe8.1
        JNC     ??rfid_uart_send_0
//  785   UTX0IF = 0;
        CLR     0xe8.1
//  786 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock197
        REQUIRE U0DBUF
        REQUIRE _A_IRCON2

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myStartRetryDelay>`:
        DW 10000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myCheckCardDelay>`:
        DW 2000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_8000:
        DD 32768

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_8:
        DD 8

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_10:
        DD 16

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_fffff060:
        DD -4000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_1000:
        DD 4096

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_2000:
        DD 8192

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_10000:
        DD 65536

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_2:
        DD 2

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_4:
        DD 4

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_800:
        DD 2048

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_80000000:
        DD 2147483648

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_100:
        DD 256

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_bde:
        DD 3038

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_ffffe343:
        DD -7357

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_ecf:
        DD 3791

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HanderMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HanderMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??paramRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    paramRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_WAIT?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_WAIT

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_DELAY?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_DELAY

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_QMAKE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_QMAKE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_ACC_INIT?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_ACC_INIT

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_START?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_START

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_STOP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_STOP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_ACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_ACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_WRITE_BYTE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_WRITE_BYTE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_READ_BYTE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_READ_BYTE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_WRITE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_WRITE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_READ?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_READ

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??IIC_BMP085_INIT?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    IIC_BMP085_INIT

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BMP085_SAMPLE?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    BMP085_SAMPLE

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_uart_init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_uart_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rfid_uart_send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rfid_uart_send

        END
// 
// 3 574 bytes in segment BANKED_CODE
//   150 bytes in segment BANK_RELAYS
//    10 bytes in segment SFR_AN
//     4 bytes in segment XDATA_I
//     4 bytes in segment XDATA_ID
//    90 bytes in segment XDATA_ROM_C
//    34 bytes in segment XDATA_Z
// 
// 3 728 bytes of CODE  memory
//    22 bytes of CONST memory (+ 68 bytes shared)
//     0 bytes of DATA  memory (+ 10 bytes shared)
//    38 bytes of XDATA memory
//
//Errors: none
//Warnings: none
