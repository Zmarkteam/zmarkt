###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             11/Mar/2015  16:33:47 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\Source\SimpFpm10 #
#                          a.c                                                #
#    Command line       =  -f C:\Users\Administrator\Desktop\Zigbee节点控制程 #
#                          序\Projects\zstack\Samples\SimpleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ       #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f C:\Users\Administrator\Desktop\Zigbee节点控制程 #
#                          序\Projects\zstack\Samples\SimpleApp\CC2530DB\..\. #
#                          .\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO     #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 C:\Users\Administrator\Desk #
#                          top\Zigbee节点控制程序\Projects\zstack\Samples\Sim #
#                          pleApp\Source\SimpFpm10a.c -D HOLD_AUTO_START -D   #
#                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D       #
#                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC  #
#                          -D MT_SYS_FUNC -D MT_UTIL_FUNC -D xMT_SAPI_FUNC    #
#                          -D xMT_SAPI_CB_FUNC -D xMT_ZDO_FUNC -D             #
#                          xMT_ZDO_CB_FUNC -lC C:\Users\Administrator\Desktop #
#                          \Zigbee节点控制程序\Projects\zstack\Samples\Simple #
#                          App\CC2530DB\SimpleCoordinator\List\ -lA           #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleC #
#                          oordinator\List\ --diag_suppress Pe001,Pa010 -o    #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleC #
#                          oordinator\Obj\ -e --require_prototypes            #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\Administrator\Desktop\Zigbee节点控制程 #
#                          序\Projects\zstack\Samples\SimpleApp\CC2530DB\ -I  #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\Sour #
#                          ce\ -I C:\Users\Administrator\Desktop\Zigbee节点控 #
#                          制程序\Projects\zstack\Samples\SimpleApp\CC2530DB\ #
#                          ..\..\..\ZMain\TI2530DB\ -I                        #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\include\ -I                 #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\include\ -I                 #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\high_level\ -I              #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\ -I         #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \ -I C:\Users\Administrator\Desktop\Zigbee节点控制 #
#                          程序\Projects\zstack\Samples\SimpleApp\CC2530DB\.. #
#                          \..\..\..\..\Components\mt\ -I                     #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\osal\include\ -I                #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\osal\mcu\ccsoc\ -I              #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\services\saddr\ -I              #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\af\ -I                    #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\nwk\ -I                   #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\sapi\ -I                  #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\sec\ -I                   #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\sys\ -I                   #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\stack\zdo\ -I                   #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\zmac\ -I                        #
#                          C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\zmac\f8w\ -I "C:\Program        #
#                          Files\IAR Systems\Embedded Workbench               #
#                          5.4\8051\INC\" -I "C:\Program Files\IAR            #
#                          Systems\Embedded Workbench 5.4\8051\INC\CLIB\"     #
#                          -Ohz                                               #
#    List file          =  C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleC #
#                          oordinator\List\SimpFpm10a.lst                     #
#    Object file        =  C:\Users\Administrator\Desktop\Zigbee节点控制程序\ #
#                          Projects\zstack\Samples\SimpleApp\CC2530DB\SimpleC #
#                          oordinator\Obj\SimpFpm10a.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\Zigbee节点控制程序\Projects\zstack\Samples\SimpleApp\Source\SimpFpm10a.c
      1          #include "ZComDef.h"
      2          #include "OSAL.h"
      3          #include "sapi.h"
      4          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
      5          #include "hal_led.h"
      6          #include "hal_adc.h"
      7          #include "hal_mcu.h"
      8          #include "SimpleApp.h"
      9          #include "mt.h"
     10          
     11          #define  uchar unsigned char
     12          #define  uint unsigned int

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          uchar data_uart[18];
   \                     data_uart:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
     14          const uchar FP_Pack_Head[6] = {0xEF,0x01,0xFF,0xFF,0xFF,0xFF};  //协议包头
   \                     FP_Pack_Head:
   \   000000   EF01FFFF     DB 239, 1, 255, 255, 255, 255
   \            FFFF    

   \                                 In  segment XDATA_ROM_C, align 1
     15          const uchar FP_Get_Img[6] = {0x01,0x00,0x03,0x01,0x0,0x05};    //获得指纹图像
   \                     FP_Get_Img:
   \   000000   01000301     DB 1, 0, 3, 1, 0, 5
   \            0005    

   \                                 In  segment XDATA_ROM_C, align 1
     16          const uchar FP_Img_To_Buffer1[7]={0x01,0x0,0x04,0x02,0x01,0x0,0x08}; //将图像放入到BUFFER1
   \                     FP_Img_To_Buffer1:
   \   000000   01000402     DB 1, 0, 4, 2, 1, 0, 8
   \            010008  

   \                                 In  segment XDATA_ROM_C, align 1
     17          const uchar FP_Img_To_Buffer2[7]={0x01,0x0,0x04,0x02,0x02,0x0,0x09}; //将图像放入到BUFFER2
   \                     FP_Img_To_Buffer2:
   \   000000   01000402     DB 1, 0, 4, 2, 2, 0, 9
   \            020009  

   \                                 In  segment XDATA_ROM_C, align 1
     18          const uchar FP_Reg_Model[6]={0x01,0x0,0x03,0x05,0x0,0x09}; //将BUFFER1跟BUFFER2合成特征模版
   \                     FP_Reg_Model:
   \   000000   01000305     DB 1, 0, 3, 5, 0, 9
   \            0009    

   \                                 In  segment XDATA_ROM_C, align 1
     19          const uchar FP_Search[11]={0x01,0x0,0x08,0x04,0x01,0x0,0x0,0x03,0xA1,0x0,0xB2}; //搜索指纹搜索范围0 - 929
   \                     FP_Search:
   \   000000   01000804     DB 1, 0, 8, 4, 1, 0, 0, 3, 161, 0, 178
   \            01000003
   \            A100B2  

   \                                 In  segment XDATA_ROM_C, align 1
     20          const uchar FP_Delet_All_Model[6]={0x01,0x00,0x03,0x0d,0x00,0x11};//删除指纹模块里所有的模版
   \                     FP_Delet_All_Model:
   \   000000   0100030D     DB 1, 0, 3, 13, 0, 17
   \            0011    

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          volatile unsigned char  FP_Save_Finger[9]={0x01,0x00,0x06,0x06,0x01,0x00,0x0B,0x00,0x19};//将BUFFER1中的特征码存放到指定的位置
   \                     FP_Save_Finger:
   \   000000                DS 9
   \   000009                REQUIRE `?<Initializer for FP_Save_Finger>`
   \   000009                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     22          volatile unsigned char FP_Delete_Model[10]={0x01,0x00,0x07,0x0C,0x0,0x0,0x0,0x1,0x0,0x0}; //删除指定的模版
   \                     FP_Delete_Model:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for FP_Delete_Model>`
   \   00000A                REQUIRE __INIT_XDATA_I
     23          // Application States
     24          #define APP_INIT                           0    // Initial state
     25          #define APP_START                          1    // Sensor has joined network
     26          #define APP_BOUND                          2    // Sensor is bound to collector
     27          
     28          // Application osal event identifiers
     29          // Bit mask of events ( from 0x0000 to 0x00FF )
     30          #define MY_START_EVT                0x0001
     31          #define MY_REPORT_EVT               0x0002
     32          
     33          /*********************************************************************
     34           * TYPEDEFS
     35           */
     36          
     37          /*********************************************************************
     38           * LOCAL VARIABLES
     39           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          char index_command =0;
   \                     index_command:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     41          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42          static uint8 myAppState = APP_INIT;
                              ^
Warning[Pe550]: variable "myAppState" was set but never used
   \                     myAppState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     43          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     44          static uint16 myStartRetryDelay = 10000;      // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
     45          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     46          static uint16 myCheckCardDelay = 4000;         //milliseconds
   \                     myCheckCardDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myCheckCardDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
     47          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     48          static uint8 Fpm10aon = 1;
   \                     Fpm10aon:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for Fpm10aon>`
   \   000001                REQUIRE __INIT_XDATA_I
     49          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     50          uint zhiwen_id[2]={0x00,0x00};
   \                     zhiwen_id:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          uchar z = 0;
   \                     z:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     52          /*********************************************************************
     53           * GLOBAL VARIABLES
     54           */
     55          
     56          // Inputs and Outputs for Switch device
     57          #define NUM_IN_CMD_SENSOR                 2
     58          #define NUM_OUT_CMD_SENSOR                3
     59          
     60          

   \                                 In  segment XDATA_ROM_C, align 1
     61          const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   01000200     DW 1, 2
     62          {
     63            ID_CMD_READ_REQ,
     64            ID_CMD_WRITE_REQ,
     65          };

   \                                 In  segment XDATA_ROM_C, align 1
     66          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   01800280     DW 32769, 32770, 3
   \            0300    
     67          {
     68              ID_CMD_READ_RES,
     69              ID_CMD_WRITE_RES,
     70              ID_CMD_REPORT,
     71          };
     72          
     73          // Define SimpleDescriptor for Switch device

   \                                 In  segment XDATA_ROM_C, align 1
     74          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   100F0300     DW 3856, 3
   \   000005   0102         DB 1, 2
   \   000007   ....         DW zb_InCmdList
   \   000009   03           DB 3
   \   00000A   ....         DW zb_OutCmdList
     75          {
     76            MY_ENDPOINT_ID,             //  Endpoint
     77            MY_PROFILE_ID,              //  Profile ID
     78            DEV_ID_SENSOR,              //  Device ID
     79            DEVICE_VERSION_SENSOR,      //  Device Version
     80            0,                          //  Reserved
     81            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
     82            (cId_t *) zb_InCmdList,             //  Input Command List
     83            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
     84            (cId_t *) zb_OutCmdList     //  Output Command List
     85          };
     86          void zb_HanderMsg(osal_event_hdr_t *msg);
     87          //void zb_HandleKeys( uint8 shift, uint8 keys );
     88          
     89          static int paramWrite(uint16 pid, byte *dat);
     90          static int paramRead(uint16 pid, byte *dat);
     91          
     92          
     93          void rfid_uart_init(void);
     94          void rfid_uart_send(unsigned char ch);
     95          int  rfid_uart_recv(void);
     96          void rfid_commands(char *cmd, int len);
     97          void FINGERPRINT_Cmd_Search_Finger(void);
     98          void FINGERPRINT_Cmd_Save_Finger(uint number);
     99          void FINGERPRINT_Cmd_Reg_Model(void);
    100          void FINGERPRINT_Cmd_Img_To_Buffer2(void);
    101          void FINGERPRINT_Cmd_Img_To_Buffer1(void);
    102          void FINGERPRINT_Cmd_Delete_All_Model(void);
    103          void FINGERPRINT_Cmd_Get_Img(void);
    104          uchar test_fig(void);
    105          void FINGERPRINT_Cmd_Delete_Model(unsigned int uiID_temp);
    106          void delayxms(uint xms);
    107          /*****************************************************************************
    108           * @fn          zb_HandleOsalEvent
    109           *
    110           * @brief       The zb_HandleOsalEvent function is called by the operating
    111           *              system when a task event is set
    112           *
    113           * @param       event - Bitmask containing the events that have been set
    114           *
    115           * @return      none
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    118          {  
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    119             byte dat_1[32];
    120             char mod=0;
    121             if (event & ZB_ENTRY_EVENT) 
   \   00000E   7410         MOV     A,#0x10
   \   000010   5F           ANL     A,R7
   \   000011   F9           MOV     R1,A
   \   000012   E4           CLR     A
   \   000013   7001         JNZ     ??zb_HandleOsalEvent_0
   \   000015   E9           MOV     A,R1
   \                     ??zb_HandleOsalEvent_0:
   \   000016   6058         JZ      ??CrossCallReturnLabel_0
    122             {
    123                  uint8 startOptions;
    124                  uint8 logicalType;
    125            
    126                  zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000018                ; Setup parameters for call to function zb_ReadConfiguration
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7987         MOV     R1,#-0x79
   \   000026   12....       LCALL   ??zb_ReadConfiguration?relay
    127                  if ( logicalType != ZG_DEVICETYPE_ENDDEVICE )
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6402         XRL     A,#0x2
   \   000032   600E         JZ      ??zb_HandleOsalEvent_1
    128                  //if ( logicalType != ZG_DEVICETYPE_ROUTER )
    129                  //if ( logicalType != ZG_DEVICETYPE_COORDINATOR )
    130                  {
    131                    logicalType = ZG_DEVICETYPE_ENDDEVICE;
   \   000034   7402         MOV     A,#0x2
   \   000036   F0           MOVX    @DPTR,A
    132                    //logicalType = ZG_DEVICETYPE_ROUTER;
    133                    //logicalType = ZG_DEVICETYPE_COORDINATOR;
    134                    zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
   \   000037                ; Setup parameters for call to function zb_WriteConfiguration
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   7987         MOV     R1,#-0x79
   \   00003F   12....       LCALL   ??zb_WriteConfiguration?relay
    135                  }
    136          
    137                  // Do more configuration if necessary and then restart device with auto-start bit set
    138                  // write endpoint to simple desc...dont pass it in start req..then reset
    139                  zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \                     ??zb_HandleOsalEvent_1:
   \   000042                ; Setup parameters for call to function zb_ReadConfiguration
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AC82         MOV     R4,DPL
   \   000049   AD83         MOV     R5,DPH
   \   00004B   7A01         MOV     R2,#0x1
   \   00004D   7903         MOV     R1,#0x3
   \   00004F   12....       LCALL   ??zb_ReadConfiguration?relay
    140                  if (startOptions != ZCD_STARTOPT_AUTO_START)
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6404         XRL     A,#0x4
   \   00005A   600E         JZ      ??zb_HandleOsalEvent_2
    141                  {
    142                    startOptions = ZCD_STARTOPT_AUTO_START;
   \   00005C   7404         MOV     A,#0x4
   \   00005E   F0           MOVX    @DPTR,A
    143                    zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   00005F                ; Setup parameters for call to function zb_WriteConfiguration
   \   00005F   AC82         MOV     R4,DPL
   \   000061   AD83         MOV     R5,DPH
   \   000063   7A01         MOV     R2,#0x1
   \   000065   7903         MOV     R1,#0x3
   \   000067   12....       LCALL   ??zb_WriteConfiguration?relay
    144                  } 
    145                  
    146                  rfid_uart_init();//需要将波特率初始化为56000
   \                     ??zb_HandleOsalEvent_2:
   \   00006A                ; Setup parameters for call to function rfid_uart_init
   \   00006A   12....       LCALL   ??rfid_uart_init?relay
    147                  
    148                  osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
   \   00006D                ; Setup parameters for call to function osal_start_timerEx
   \   00006D   12....       LCALL   ?Subroutine3 & 0xFFFF
    149            }
    150            if ( event & MY_START_EVT )
   \                     ??CrossCallReturnLabel_0:
   \   000070   EE           MOV     A,R6
   \   000071   A2E0         MOV     C,0xE0 /* A   */.0
   \   000073   5003         JNC     ??zb_HandleOsalEvent_3
    151            {  
    152              zb_StartRequest();
   \   000075                ; Setup parameters for call to function zb_StartRequest
   \   000075   12....       LCALL   ??zb_StartRequest?relay
    153            }
    154            if (event & MY_REPORT_EVT) 
   \                     ??zb_HandleOsalEvent_3:
   \   000078   EE           MOV     A,R6
   \   000079   5402         ANL     A,#0x2
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
    155            {
    156               if(Fpm10aon==1)//值为1时说明上位机向系统发出身份验证指令
   \   000080   90....       MOV     DPTR,#Fpm10aon
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6401         XRL     A,#0x1
   \   000086   6003         JZ      $+5
   \   000088   02....       LJMP    ??zb_HandleOsalEvent_5 & 0xFFFF
    157               {
    158                 if(z==1)
   \   00008B   90....       MOV     DPTR,#z
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   6401         XRL     A,#0x1
   \   000091   7012         JNZ     ??zb_HandleOsalEvent_6
    159                 {
    160                   delayxms(50000);delayxms(50000);delayxms(50000);delayxms(50000);delayxms(50000);
   \   000093                ; Setup parameters for call to function delayxms
   \   000093   7A50         MOV     R2,#0x50
   \   000095   7BC3         MOV     R3,#-0x3d
   \   000097   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00009A   12....       LCALL   ?Subroutine8 & 0xFFFF
    161                   delayxms(50000);delayxms(50000);
   \                     ??CrossCallReturnLabel_17:
   \   00009D   12....       LCALL   ??delayxms?relay
    162                   z=0;
   \   0000A0   E4           CLR     A
   \   0000A1   90....       MOV     DPTR,#z
   \   0000A4   F0           MOVX    @DPTR,A
    163                 }
    164                   if(test_fig()==0&&Fpm10aon==1)  
   \                     ??zb_HandleOsalEvent_6:
   \   0000A5                ; Setup parameters for call to function test_fig
   \   0000A5   12....       LCALL   ??test_fig?relay
   \   0000A8   E9           MOV     A,R1
   \   0000A9   6003         JZ      $+5
   \   0000AB   02....       LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
    165                    {
    166                     FINGERPRINT_Cmd_Get_Img();//读取指纹y_scan_lu();
   \   0000AE                ; Setup parameters for call to function FINGERPRINT_Cmd_Get_Img
   \   0000AE   12....       LCALL   ??FINGERPRINT_Cmd_Get_Img?relay
    167                     FINGERPRINT_Cmd_Img_To_Buffer1();//将指纹信息存入BUFFER1
   \   0000B1                ; Setup parameters for call to function FINGERPRINT_Cmd_Img_To_Buffer1
   \   0000B1   12....       LCALL   ??FINGERPRINT_Cmd_Img_To_Buffer1?relay
    168                     FINGERPRINT_Cmd_Search_Finger();//查找999个模板信息
   \   0000B4                ; Setup parameters for call to function FINGERPRINT_Cmd_Search_Finger
   \   0000B4   12....       LCALL   ??FINGERPRINT_Cmd_Search_Finger?relay
    169                     if(data_uart[9]==0)//匹配到指纹
   \   0000B7   90....       MOV     DPTR,#(data_uart + 9)
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   706D         JNZ     ??zb_HandleOsalEvent_7
    170                     {
    171                      dat_1[0]=0x09;
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   7409         MOV     A,#0x9
   \   0000C4   F0           MOVX    @DPTR,A
    172                      dat_1[1]=0x02;
   \   0000C5   7403         MOV     A,#0x3
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   7402         MOV     A,#0x2
   \   0000CC   F0           MOVX    @DPTR,A
    173                      dat_1[2]=1;
   \   0000CD   7404         MOV     A,#0x4
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   7401         MOV     A,#0x1
   \   0000D4   F0           MOVX    @DPTR,A
    174                      dat_1[3]=data_uart[10];
   \   0000D5   90....       MOV     DPTR,#(data_uart + 10)
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   7405         MOV     A,#0x5
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
    175                      dat_1[4]=data_uart[11];
   \   0000E3   90....       MOV     DPTR,#(data_uart + 11)
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   C0E0         PUSH    A
   \   0000E9   7406         MOV     A,#0x6
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   D0E0         POP     A
   \   0000F0   12....       LCALL   ?Subroutine9 & 0xFFFF
    176                      zb_SendDataRequest(0, ID_CMD_REPORT, 5, dat_1, 0, AF_ACK_REQUEST, 0 ); //向上位机返回身份验证成功
   \                     ??CrossCallReturnLabel_18:
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F6   75..10       MOV     ?V0 + 0,#0x10
   \   0000F9   78..         MOV     R0,#?V0 + 0
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FE   75..00       MOV     ?V0 + 0,#0x0
   \   000101   78..         MOV     R0,#?V0 + 0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000106   7405         MOV     A,#0x5
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   8582..       MOV     ?V0 + 0,DPL
   \   00010E   8583..       MOV     ?V0 + 1,DPH
   \   000111   78..         MOV     R0,#?V0 + 0
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000119   12....       LCALL   ?DEALLOC_XSTACK8
    177                      HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00011C                ; Setup parameters for call to function HalLedSet
   \   00011C   7A00         MOV     R2,#0x0
   \   00011E   7901         MOV     R1,#0x1
   \   000120   12....       LCALL   ??HalLedSet?relay
    178                      delayxms(30000);
   \   000123                ; Setup parameters for call to function delayxms
   \   000123   7A30         MOV     R2,#0x30
   \   000125   7B75         MOV     R3,#0x75
   \   000127   12....       LCALL   ??delayxms?relay
    179                     }
    180                     if(data_uart[9]==0x09)//没有匹配到指纹
   \                     ??zb_HandleOsalEvent_7:
   \   00012A   90....       MOV     DPTR,#(data_uart + 9)
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   6409         XRL     A,#0x9
   \   000130   6003         JZ      $+5
   \   000132   02....       LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
    181                     { 
    182                      dat_1[0]=0x09;
   \   000135   7402         MOV     A,#0x2
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   7409         MOV     A,#0x9
   \   00013C   F0           MOVX    @DPTR,A
    183                      dat_1[1]=0x02;
   \   00013D   7403         MOV     A,#0x3
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   7402         MOV     A,#0x2
   \   000144   F0           MOVX    @DPTR,A
    184                      dat_1[2]=0;
   \   000145   7404         MOV     A,#0x4
   \   000147   12....       LCALL   ?XSTACK_DISP0_8
   \   00014A   E4           CLR     A
   \   00014B   F0           MOVX    @DPTR,A
    185                      zb_SendDataRequest(0, ID_CMD_REPORT, 3, dat_1, 0, AF_ACK_REQUEST, 0 );//向上位机返回身份验证失败非法用花
   \   00014C                ; Setup parameters for call to function zb_SendDataRequest
   \   00014C   F5..         MOV     ?V0 + 0,A
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000153   75..10       MOV     ?V0 + 0,#0x10
   \   000156   78..         MOV     R0,#?V0 + 0
   \   000158   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015B   75..00       MOV     ?V0 + 0,#0x0
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000163   7405         MOV     A,#0x5
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   8582..       MOV     ?V0 + 0,DPL
   \   00016B   8583..       MOV     ?V0 + 1,DPH
   \   00016E   78..         MOV     R0,#?V0 + 0
   \   000170   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000173   7903         MOV     R1,#0x3
   \   000175   12....       LCALL   ??Subroutine20_0 & 0xFFFF
    186                     }
    187                    } 
    188          
    189                }       
   \                     ??CrossCallReturnLabel_48:
   \   000178   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017B   02....       LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
    190                else if(index_command==2)//上位机发出录入指纹指令
   \                     ??zb_HandleOsalEvent_5:
   \   00017E   90....       MOV     DPTR,#index_command
   \   000181   E0           MOVX    A,@DPTR
   \   000182   6402         XRL     A,#0x2
   \   000184   603D         JZ      ??zb_HandleOsalEvent_8
    191                {   
    192                    mod = 0;
    193                  // while(test_fig()==2); 
    194                   while(mod==0)
    195                   {
    196                     while((test_fig())!=0)
    197                     {delayxms(100);}
    198                     mod=1;
    199                     FINGERPRINT_Cmd_Get_Img();//第一次读取指纹信息
    200                     if(data_uart[9]!=0)//录入失败则清零mod
    201                     mod=0;
    202                     FINGERPRINT_Cmd_Img_To_Buffer1();//将第一次读取的指纹存放到缓冲区1
    203                     if(data_uart[9]!=0)//录入失败则清零mod
    204                     mod=0; 
    205                     FINGERPRINT_Cmd_Get_Img();//第二次读取指纹信息
    206                     //delayxms(6000);
    207                     if(data_uart[9]!=0)//录入失败则清零mod
    208                     mod=0;
    209                     FINGERPRINT_Cmd_Img_To_Buffer2();//将第二次读取的指纹存放到缓冲区2
    210                     if(data_uart[9]!=0)//录入失败则清零mod
    211                     mod=0;
    212                     FINGERPRINT_Cmd_Reg_Model();//生成指纹模版
    213                     //delayxms(1000);
    214                     if(data_uart[9]!=0)//录入失败则清零mod
    215                     mod=0;
    216                     FINGERPRINT_Cmd_Save_Finger((zhiwen_id[0]<<8)|zhiwen_id[1]/*zhiwen_id[0]+zhiwen_id[1]*/);//讲模版存储到某地址
    217                     if(data_uart[9]!=0)//录入失败则清零mod
    218                     mod=0;
    219                     //uart1_send_one_byte(mod);
    220                     if(mod==0)
    221                     {  
    222                        HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    223                        dat_1[0]=0x09;
    224                        dat_1[1]=0x03;
    225                        dat_1[2]=0;//参数数据第2位为0表示录入失败
    226                        dat_1[3]=zhiwen_id[0];
    227                        dat_1[4]=zhiwen_id[1];
    228                        zb_SendDataRequest( 0, ID_CMD_REPORT, 5, dat_1, 0, AF_ACK_REQUEST, 0 );//向上位机返回指纹录入失败
    229                        HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF);
    230                     }
    231                     if(mod==1)
    232                     { 
    233          	     if(data_uart[9]==0)
    234          	     { 
    235                         HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    236                         dat_1[0]=0x09;
    237                         dat_1[1]=0x03;
    238                         dat_1[2]=1;//参数数据第2位为1表示录入成功
    239                         dat_1[3]=zhiwen_id[0];
    240                         dat_1[4]=zhiwen_id[1];
    241                         zb_SendDataRequest( 0, ID_CMD_REPORT, 5, dat_1, 0, AF_ACK_REQUEST, 0 );//上上位机返回指纹录入成功
    242                       }
    243                     }    
    244                   }
    245                   index_command = 0;
    246                   Fpm10aon = 1;//将检测指纹工作状态打开
    247                   z=1;
    248                }
    249               else if(index_command==3){  //上位机发出删除所有指纹信息
   \   000186   E0           MOVX    A,@DPTR
   \   000187   6403         XRL     A,#0x3
   \   000189   6003         JZ      $+5
   \   00018B   02....       LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
    250                  FINGERPRINT_Cmd_Delete_Model((zhiwen_id[0]<<8)|zhiwen_id[1]/*zhiwen_id[0]+zhiwen_id[1]*/);
   \   00018E                ; Setup parameters for call to function FINGERPRINT_Cmd_Delete_Model
   \   00018E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000191   12....       LCALL   ??FINGERPRINT_Cmd_Delete_Model?relay
    251                  if(data_uart[9]==0)
   \   000194   90....       MOV     DPTR,#(data_uart + 9)
   \   000197   E0           MOVX    A,@DPTR
   \   000198   6003         JZ      $+5
   \   00019A   02....       LJMP    ??zb_HandleOsalEvent_9 & 0xFFFF
    252                  { 
    253                    HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00019D                ; Setup parameters for call to function HalLedSet
   \   00019D   7A00         MOV     R2,#0x0
   \   00019F   7901         MOV     R1,#0x1
   \   0001A1   12....       LCALL   ??HalLedSet?relay
    254                    dat_1[0]=0x09;
   \   0001A4   7402         MOV     A,#0x2
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   7409         MOV     A,#0x9
   \   0001AB   F0           MOVX    @DPTR,A
    255                    dat_1[1]=0x04;
   \   0001AC   7403         MOV     A,#0x3
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   7404         MOV     A,#0x4
   \   0001B3   F0           MOVX    @DPTR,A
    256                    dat_1[2]=1;//参数数据第2位为1表示删除成功
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   7401         MOV     A,#0x1
   \   0001B9   02....       LJMP    ??zb_HandleOsalEvent_10 & 0xFFFF
    257                    dat_1[3]=zhiwen_id[0];
    258                    dat_1[4]=zhiwen_id[1];
    259                    zb_SendDataRequest(0,ID_CMD_REPORT, 5, dat_1, 0, AF_ACK_REQUEST, 0 );//上上位机返回指纹删除成功成功
    260                  }
   \                     ??zb_HandleOsalEvent_11:
   \   0001BC                ; Setup parameters for call to function delayxms
   \   0001BC   7A64         MOV     R2,#0x64
   \   0001BE   7B00         MOV     R3,#0x0
   \   0001C0   12....       LCALL   ??delayxms?relay
   \                     ??zb_HandleOsalEvent_8:
   \   0001C3                ; Setup parameters for call to function test_fig
   \   0001C3   12....       LCALL   ??test_fig?relay
   \   0001C6   E9           MOV     A,R1
   \   0001C7   70F3         JNZ     ??zb_HandleOsalEvent_11
   \   0001C9   7E01         MOV     R6,#0x1
   \   0001CB                ; Setup parameters for call to function FINGERPRINT_Cmd_Get_Img
   \   0001CB   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001CE   6001         JZ      ??zb_HandleOsalEvent_12
   \   0001D0   1E           DEC     R6
   \                     ??zb_HandleOsalEvent_12:
   \   0001D1                ; Setup parameters for call to function FINGERPRINT_Cmd_Img_To_Buffer1
   \   0001D1   12....       LCALL   ??FINGERPRINT_Cmd_Img_To_Buffer1?relay
   \   0001D4   90....       MOV     DPTR,#(data_uart + 9)
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   6002         JZ      ??zb_HandleOsalEvent_13
   \   0001DA   7E00         MOV     R6,#0x0
   \                     ??zb_HandleOsalEvent_13:
   \   0001DC                ; Setup parameters for call to function FINGERPRINT_Cmd_Get_Img
   \   0001DC   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001DF   6002         JZ      ??zb_HandleOsalEvent_14
   \   0001E1   7E00         MOV     R6,#0x0
   \                     ??zb_HandleOsalEvent_14:
   \   0001E3                ; Setup parameters for call to function FINGERPRINT_Cmd_Img_To_Buffer2
   \   0001E3   12....       LCALL   ??FINGERPRINT_Cmd_Img_To_Buffer2?relay
   \   0001E6   90....       MOV     DPTR,#(data_uart + 9)
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   6002         JZ      ??zb_HandleOsalEvent_15
   \   0001EC   7E00         MOV     R6,#0x0
   \                     ??zb_HandleOsalEvent_15:
   \   0001EE                ; Setup parameters for call to function FINGERPRINT_Cmd_Reg_Model
   \   0001EE   12....       LCALL   ??FINGERPRINT_Cmd_Reg_Model?relay
   \   0001F1   90....       MOV     DPTR,#(data_uart + 9)
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   6002         JZ      ??zb_HandleOsalEvent_16
   \   0001F7   7E00         MOV     R6,#0x0
   \                     ??zb_HandleOsalEvent_16:
   \   0001F9                ; Setup parameters for call to function FINGERPRINT_Cmd_Save_Finger
   \   0001F9   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001FC   12....       LCALL   ??FINGERPRINT_Cmd_Save_Finger?relay
   \   0001FF   90....       MOV     DPTR,#(data_uart + 9)
   \   000202   E0           MOVX    A,@DPTR
   \   000203   6004         JZ      ??zb_HandleOsalEvent_17
   \   000205   7E00         MOV     R6,#0x0
   \   000207   8003         SJMP    ??zb_HandleOsalEvent_18
   \                     ??zb_HandleOsalEvent_17:
   \   000209   EE           MOV     A,R6
   \   00020A   7072         JNZ     ??zb_HandleOsalEvent_19
   \                     ??zb_HandleOsalEvent_18:
   \   00020C                ; Setup parameters for call to function HalLedSet
   \   00020C   7A01         MOV     R2,#0x1
   \   00020E   7901         MOV     R1,#0x1
   \   000210   12....       LCALL   ??HalLedSet?relay
   \   000213   7402         MOV     A,#0x2
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   7409         MOV     A,#0x9
   \   00021A   F0           MOVX    @DPTR,A
   \   00021B   7403         MOV     A,#0x3
   \   00021D   12....       LCALL   ?XSTACK_DISP0_8
   \   000220   7403         MOV     A,#0x3
   \   000222   F0           MOVX    @DPTR,A
   \   000223   7404         MOV     A,#0x4
   \   000225   12....       LCALL   ?XSTACK_DISP0_8
   \   000228   E4           CLR     A
   \   000229   F0           MOVX    @DPTR,A
   \   00022A   90....       MOV     DPTR,#zhiwen_id
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   C0E0         PUSH    A
   \   000230   7405         MOV     A,#0x5
   \   000232   12....       LCALL   ?XSTACK_DISP0_8
   \   000235   D0E0         POP     A
   \   000237   F0           MOVX    @DPTR,A
   \   000238   90....       MOV     DPTR,#(zhiwen_id + 2)
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   C0E0         PUSH    A
   \   00023E   7406         MOV     A,#0x6
   \   000240   12....       LCALL   ?XSTACK_DISP0_8
   \   000243   D0E0         POP     A
   \   000245   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00024B   75..10       MOV     ?V0 + 0,#0x10
   \   00024E   78..         MOV     R0,#?V0 + 0
   \   000250   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000253   75..00       MOV     ?V0 + 0,#0x0
   \   000256   78..         MOV     R0,#?V0 + 0
   \   000258   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00025B   7405         MOV     A,#0x5
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   8582..       MOV     ?V0 + 0,DPL
   \   000263   8583..       MOV     ?V0 + 1,DPH
   \   000266   78..         MOV     R0,#?V0 + 0
   \   000268   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00026E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000271                ; Setup parameters for call to function HalLedSet
   \   000271   7A00         MOV     R2,#0x0
   \   000273   7901         MOV     R1,#0x1
   \   000275   12....       LCALL   ??HalLedSet?relay
   \   000278   EE           MOV     A,R6
   \   000279   706E         JNZ     ??zb_HandleOsalEvent_20
   \   00027B   02....       LJMP    ??zb_HandleOsalEvent_8 & 0xFFFF
   \                     ??zb_HandleOsalEvent_19:
   \   00027E   7401         MOV     A,#0x1
   \   000280   6E           XRL     A,R6
   \   000281   7066         JNZ     ??zb_HandleOsalEvent_20
   \   000283                ; Setup parameters for call to function HalLedSet
   \   000283   7A01         MOV     R2,#0x1
   \   000285   7901         MOV     R1,#0x1
   \   000287   12....       LCALL   ??HalLedSet?relay
   \   00028A   7402         MOV     A,#0x2
   \   00028C   12....       LCALL   ?XSTACK_DISP0_8
   \   00028F   7409         MOV     A,#0x9
   \   000291   F0           MOVX    @DPTR,A
   \   000292   7403         MOV     A,#0x3
   \   000294   12....       LCALL   ?XSTACK_DISP0_8
   \   000297   7403         MOV     A,#0x3
   \   000299   F0           MOVX    @DPTR,A
   \   00029A   7404         MOV     A,#0x4
   \   00029C   12....       LCALL   ?XSTACK_DISP0_8
   \   00029F   7401         MOV     A,#0x1
   \   0002A1   F0           MOVX    @DPTR,A
   \   0002A2   90....       MOV     DPTR,#zhiwen_id
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   C0E0         PUSH    A
   \   0002A8   7405         MOV     A,#0x5
   \   0002AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AD   D0E0         POP     A
   \   0002AF   F0           MOVX    @DPTR,A
   \   0002B0   90....       MOV     DPTR,#(zhiwen_id + 2)
   \   0002B3   E0           MOVX    A,@DPTR
   \   0002B4   C0E0         PUSH    A
   \   0002B6   7406         MOV     A,#0x6
   \   0002B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BB   D0E0         POP     A
   \   0002BD   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0002C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002C3   75..10       MOV     ?V0 + 0,#0x10
   \   0002C6   78..         MOV     R0,#?V0 + 0
   \   0002C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002CB   75..00       MOV     ?V0 + 0,#0x0
   \   0002CE   78..         MOV     R0,#?V0 + 0
   \   0002D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002D3   7405         MOV     A,#0x5
   \   0002D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D8   8582..       MOV     ?V0 + 0,DPL
   \   0002DB   8583..       MOV     ?V0 + 1,DPH
   \   0002DE   78..         MOV     R0,#?V0 + 0
   \   0002E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002E3   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0002E6   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zb_HandleOsalEvent_20:
   \   0002E9   E4           CLR     A
   \   0002EA   90....       MOV     DPTR,#index_command
   \   0002ED   F0           MOVX    @DPTR,A
   \   0002EE   7401         MOV     A,#0x1
   \   0002F0   90....       MOV     DPTR,#Fpm10aon
   \   0002F3   F0           MOVX    @DPTR,A
   \   0002F4   90....       MOV     DPTR,#z
   \   0002F7   8066         SJMP    ??zb_HandleOsalEvent_21
    261                  else{ 
    262                    dat_1[0]=0x09;
   \                     ??zb_HandleOsalEvent_9:
   \   0002F9   7402         MOV     A,#0x2
   \   0002FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FE   7409         MOV     A,#0x9
   \   000300   F0           MOVX    @DPTR,A
    263                    dat_1[1]=0x04;
   \   000301   7403         MOV     A,#0x3
   \   000303   12....       LCALL   ?XSTACK_DISP0_8
   \   000306   7404         MOV     A,#0x4
   \   000308   F0           MOVX    @DPTR,A
    264                    dat_1[2]=0;//参数数据第2位为1表示删除失败
   \   000309   12....       LCALL   ?XSTACK_DISP0_8
   \   00030C   E4           CLR     A
   \                     ??zb_HandleOsalEvent_10:
   \   00030D   F0           MOVX    @DPTR,A
    265                    dat_1[3]=zhiwen_id[0];
   \   00030E   90....       MOV     DPTR,#zhiwen_id
   \   000311   E0           MOVX    A,@DPTR
   \   000312   C0E0         PUSH    A
   \   000314   7405         MOV     A,#0x5
   \   000316   12....       LCALL   ?XSTACK_DISP0_8
   \   000319   D0E0         POP     A
   \   00031B   F0           MOVX    @DPTR,A
    266                    dat_1[4]=zhiwen_id[1];
   \   00031C   90....       MOV     DPTR,#(zhiwen_id + 2)
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   C0E0         PUSH    A
   \   000322   7406         MOV     A,#0x6
   \   000324   12....       LCALL   ?XSTACK_DISP0_8
   \   000327   D0E0         POP     A
   \   000329   12....       LCALL   ?Subroutine9 & 0xFFFF
    267                    zb_SendDataRequest(0, ID_CMD_REPORT, 5, dat_1, 0, AF_ACK_REQUEST, 0 );//指纹删除失败
    268                  }
   \                     ??CrossCallReturnLabel_21:
   \   00032C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00032F   75..10       MOV     ?V0 + 0,#0x10
   \   000332   78..         MOV     R0,#?V0 + 0
   \   000334   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000337   75..00       MOV     ?V0 + 0,#0x0
   \   00033A   78..         MOV     R0,#?V0 + 0
   \   00033C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00033F   7405         MOV     A,#0x5
   \   000341   12....       LCALL   ?XSTACK_DISP0_8
   \   000344   8582..       MOV     ?V0 + 0,DPL
   \   000347   8583..       MOV     ?V0 + 1,DPH
   \   00034A   78..         MOV     R0,#?V0 + 0
   \   00034C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00034F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000352   12....       LCALL   ?DEALLOC_XSTACK8
    269                  index_command = 0;
   \   000355   E4           CLR     A
   \   000356   90....       MOV     DPTR,#index_command
   \   000359   F0           MOVX    @DPTR,A
    270                  Fpm10aon = 1;
   \   00035A   7401         MOV     A,#0x1
   \   00035C   90....       MOV     DPTR,#Fpm10aon
   \                     ??zb_HandleOsalEvent_21:
   \   00035F   F0           MOVX    @DPTR,A
    271                }
    272            }
    273             osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );  
   \                     ??zb_HandleOsalEvent_4:
   \   000360                ; Setup parameters for call to function osal_start_timerEx
   \   000360   12....       LCALL   ?Subroutine3 & 0xFFFF
    274          }
   \                     ??CrossCallReturnLabel_1:
   \   000363   7422         MOV     A,#0x22
   \   000365   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7905         MOV     R1,#0x5
   \   000002                REQUIRE ??Subroutine20_0
   \   000002                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   7C03         MOV     R4,#0x3
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008                REQUIRE ??Subroutine21_0
   \   000008                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   12....       LCALL   ??zb_SendDataRequest?relay
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000006   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ??delayxms?relay
   \   000003                ; Setup parameters for call to function delayxms
   \   000003                ; Setup parameters for call to function delayxms
   \   000003                ; Setup parameters for call to function delayxms
   \   000003                ; Setup parameters for call to function delayxms
   \   000003                ; Setup parameters for call to function delayxms
   \   000003                ; Setup parameters for call to function delayxms
   \   000003   7A50         MOV     R2,#0x50
   \   000005   7BC3         MOV     R3,#-0x3d
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#zhiwen_id
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   90....       MOV     DPTR,#(zhiwen_id + 2)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   49           ORL     A,R1
   \   00000D   FB           MOV     R3,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#myCheckCardDelay
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   7A02         MOV     R2,#0x2
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#sapi_TaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001                ; Setup parameters for call to function zb_SendDataRequest
   \   000001   75..00       MOV     ?V0 + 0,#0x0
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine23_0
   \   000003                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ??FINGERPRINT_Cmd_Get_Img?relay
   \   000003   90....       MOV     DPTR,#(data_uart + 9)
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    276          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    277            //index_command=3;
    278            //Fpm10aon = 0;
    279            FINGERPRINT_Cmd_Delete_All_Model();
   \   000004                ; Setup parameters for call to function FINGERPRINT_Cmd_Delete_All_Model
   \   000004   12....       LCALL   ??FINGERPRINT_Cmd_Delete_All_Model?relay
    280            
    281          }
   \   000007                REQUIRE ?Subroutine1
   \   000007                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    282          /******************************************************************************
    283           * @fn          zb_StartConfirm
    284           *
    285           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    286           *              after a start request operation completes
    287           *
    288           * @param       status - The status of the start operation.  Status of
    289           *                       ZB_SUCCESS indicates the start operation completed
    290           *                       successfully.  Else the status is an error code.
    291           *
    292           * @return      none
    293           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    294          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    295          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    296            if ( status == ZB_SUCCESS )
   \   000006   7008         JNZ     ??zb_StartConfirm_0
    297            {
    298              myAppState = APP_START;
   \   000008   7401         MOV     A,#0x1
   \   00000A   90....       MOV     DPTR,#myAppState
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   8014         SJMP    ??zb_StartConfirm_1
    299              // Set event to bind to a collector
    300              //osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
    301            }
    302            else
    303            {
    304              // Try joining again later with a delay
    305              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   000010                ; Setup parameters for call to function osal_start_timerEx
   \   000010   90....       MOV     DPTR,#myStartRetryDelay
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FC           MOV     R4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FD           MOV     R5,A
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#sapi_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??osal_start_timerEx?relay
    306            }
    307          }
   \                     ??zb_StartConfirm_1:
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    308          /******************************************************************************
    309           * @fn          zb_SendDataConfirm
    310           *
    311           * @brief       The zb_SendDataConfirm callback function is called by the
    312           *              ZigBee after a send data operation completes
    313           *
    314           * @param       handle - The handle identifying the data transmission.
    315           *              status - The status of the operation.
    316           *
    317           * @return      none
    318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    319          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    320          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    321            if ( status != ZSuccess )
    322            {
    323              // Remove bindings to the existing collector
    324            }
    325            else
    326            {
    327              // send data ??
    328            }
    329          }
   \   000000   02....       LJMP    ?BRET
    330          /******************************************************************************
    331           * @fn          zb_BindConfirm
    332           *
    333           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    334           *              after a bind operation completes.
    335           *
    336           * @param       commandId - The command ID of the binding being confirmed.
    337           *              status - The status of the bind operation.
    338           *
    339           * @return      none
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    342          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    343          
    344          
    345          }
   \   000000   02....       LJMP    ?BRET
    346          /******************************************************************************
    347           * @fn          zb_AllowBindConfirm
    348           *
    349           * @brief       Indicates when another device attempted to bind to this device
    350           *
    351           * @param
    352           *
    353           * @return      none
    354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    355          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    356          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    357          }
   \   000000   02....       LJMP    ?BRET
    358          /******************************************************************************
    359           * @fn          zb_FindDeviceConfirm
    360           *
    361           * @brief       The zb_FindDeviceConfirm callback function is called by the
    362           *              ZigBee stack when a find device operation completes.
    363           *
    364           * @param       searchType - The type of search that was performed.
    365           *              searchKey - Value that the search was executed on.
    366           *              result - The result of the search.
    367           *
    368           * @return      none
    369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    371          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    372          }
   \   000000   02....       LJMP    ?BRET
    373          
    374          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          void zb_HanderMsg(osal_event_hdr_t *msg)
   \                     zb_HanderMsg:
    376          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    377          }
   \   000000   02....       LJMP    ?BRET
    378          
    379          /******************************************************************************
    380           * @fn          zb_ReceiveDataIndication
    381           *
    382           * @brief       The zb_ReceiveDataIndication callback function is called
    383           *              asynchronously by the ZigBee stack to notify the application
    384           *              when data is received from a peer device.
    385           *
    386           * @param       source - The short address of the peer device that sent the data
    387           *              command - The commandId associated with the data
    388           *              len - The number of bytes in the pData parameter
    389           *              pData - The data sent by the peer device
    390           *
    391           * @return      none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    394          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   7452         MOV     A,#0x52
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 4,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 5,A
   \   00001E   7454         MOV     A,#0x54
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 1,A
    395             int i;
    396            uint16 pid;
    397            byte dat[64];
    398            byte rlen = 1;
   \   00002A   75..01       MOV     ?V0 + 6,#0x1
    399            int ret;
    400            
    401            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7901         MOV     R1,#0x1
   \   000031   12....       LCALL   ??HalLedSet?relay
    402            HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK ); //连接成功灯打开
   \   000034                ; Setup parameters for call to function HalLedSet
   \   000034   7A02         MOV     R2,#0x2
   \   000036   7901         MOV     R1,#0x1
   \   000038   12....       LCALL   ??HalLedSet?relay
    403            switch (command) 
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zb_ReceiveDataIndication>_0`:
   \   000040   0100         DW        1
   \   000042   01           DB        1
   \   000043   ....         DW        ??zb_ReceiveDataIndication_0
   \   000045   ....         DW        ??zb_ReceiveDataIndication_1
   \   000047   ....         DW        ??zb_ReceiveDataIndication_2
    404            {
    405            case ID_CMD_WRITE_REQ:
    406              for (i=0; i<len; i+=2)
   \                     ??zb_ReceiveDataIndication_2:
   \   000049   75..00       MOV     ?V0 + 2,#0x0
   \   00004C   75..00       MOV     ?V0 + 3,#0x0
   \   00004F   801E         SJMP    ??zb_ReceiveDataIndication_3
    407              {
   \                     ??zb_ReceiveDataIndication_4:
   \   000051   8C82         MOV     DPL,R4
   \   000053   8D83         MOV     DPH,R5
   \   000055   E0           MOVX    A,@DPTR
   \   000056   90....       MOV     DPTR,#Fpm10aon
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   7801         MOV     R0,#0x1
    408                pid = pData[i]<<8 | pData[i+1];
    409                ret = paramWrite(pid, pData+2);
    410                if (ret <= 0)
    411                {
    412                  dat[0] = 1;
    413                  zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
    414                  return;
    415                } 
    416                i += ret;
   \                     ??zb_ReceiveDataIndication_5:
   \   00005C   7402         MOV     A,#0x2
   \   00005E   28           ADD     A,R0
   \   00005F   08           INC     R0
   \   000060   08           INC     R0
   \   000061   E4           CLR     A
   \   000062   3400         ADDC    A,#0x0
   \   000064   F9           MOV     R1,A
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   28           ADD     A,R0
   \   000068   F5..         MOV     ?V0 + 2,A
   \   00006A   E5..         MOV     A,?V0 + 3
   \   00006C   39           ADDC    A,R1
   \   00006D   F5..         MOV     ?V0 + 3,A
   \                     ??zb_ReceiveDataIndication_3:
   \   00006F   C3           CLR     C
   \   000070   E5..         MOV     A,?V0 + 2
   \   000072   95..         SUBB    A,?V0 + 4
   \   000074   E5..         MOV     A,?V0 + 3
   \   000076   95..         SUBB    A,?V0 + 5
   \   000078   4003         JC      $+5
   \   00007A   02....       LJMP    ??zb_ReceiveDataIndication_6 & 0xFFFF
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   25..         ADD     A,?V0 + 2
   \   000081   F582         MOV     DPL,A
   \   000083   E5..         MOV     A,?V0 + 1
   \   000085   35..         ADDC    A,?V0 + 3
   \   000087   F583         MOV     DPH,A
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FA           MOV     R2,A
   \   00008E   E9           MOV     A,R1
   \   00008F   FB           MOV     R3,A
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   2402         ADD     A,#0x2
   \   000094   F8           MOV     R0,A
   \   000095   E5..         MOV     A,?V0 + 1
   \   000097   3400         ADDC    A,#0x0
   \   000099   F9           MOV     R1,A
   \   00009A   E8           MOV     A,R0
   \   00009B   FC           MOV     R4,A
   \   00009C   E9           MOV     A,R1
   \   00009D   FD           MOV     R5,A
   \   00009E   8A..         MOV     ?V0 + 6,R2
   \   0000A0   8B..         MOV     ?V0 + 7,R3
   \   0000A2   78..         MOV     R0,#?V0 + 6
   \   0000A4   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zb_ReceiveDataIndication>_1`:
   \   0000A7   0109         DW        2305
   \   0000A9   03           DB        3
   \   0000AA   ....         DW        ??zb_ReceiveDataIndication_7
   \   0000AC   ....         DW        ??zb_ReceiveDataIndication_4
   \   0000AE   ....         DW        ??zb_ReceiveDataIndication_7
   \   0000B0   ....         DW        ??zb_ReceiveDataIndication_8
   \   0000B2   ....         DW        ??zb_ReceiveDataIndication_9
   \                     ??zb_ReceiveDataIndication_8:
   \   0000B4   7402         MOV     A,#0x2
   \                     ??zb_ReceiveDataIndication_10:
   \   0000B6   90....       MOV     DPTR,#index_command
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E4           CLR     A
   \   0000BB   90....       MOV     DPTR,#Fpm10aon
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   8C82         MOV     DPL,R4
   \   0000C1   8D83         MOV     DPH,R5
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   90....       MOV     DPTR,#zhiwen_id
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E4           CLR     A
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   8C82         MOV     DPL,R4
   \   0000CE   8D83         MOV     DPH,R5
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   90....       MOV     DPTR,#(zhiwen_id + 2)
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   E4           CLR     A
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   7803         MOV     R0,#0x3
   \   0000DC   02....       LJMP    ??zb_ReceiveDataIndication_5 & 0xFFFF
   \                     ??zb_ReceiveDataIndication_9:
   \   0000DF   7403         MOV     A,#0x3
   \   0000E1   80D3         SJMP    ??zb_ReceiveDataIndication_10
   \                     ??zb_ReceiveDataIndication_7:
   \   0000E3   7401         MOV     A,#0x1
   \   0000E5   85..82       MOV     DPL,?XSP + 0
   \   0000E8   85..83       MOV     DPH,?XSP + 1
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC                ; Setup parameters for call to function zb_SendDataRequest
   \   0000EC   75..00       MOV     ?V0 + 0,#0x0
   \                     ??zb_ReceiveDataIndication_11:
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F4   75..10       MOV     ?V0 + 0,#0x10
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FC   75..00       MOV     ?V0 + 0,#0x0
   \   0000FF   78..         MOV     R0,#?V0 + 0
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000104   7403         MOV     A,#0x3
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   8582..       MOV     ?V0 + 0,DPL
   \   00010C   8583..       MOV     ?V0 + 1,DPH
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   7901         MOV     R1,#0x1
   \   000116   7C02         MOV     R4,#0x2
   \   000118   02....       LJMP    ??zb_ReceiveDataIndication_12 & 0xFFFF
    417              }
    418              dat[0] = 0;
   \                     ??zb_ReceiveDataIndication_6:
   \   00011B   E4           CLR     A
   \   00011C   85..82       MOV     DPL,?XSP + 0
   \   00011F   85..83       MOV     DPH,?XSP + 1
   \   000122   F0           MOVX    @DPTR,A
    419              zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
   \   000123                ; Setup parameters for call to function zb_SendDataRequest
   \   000123   F5..         MOV     ?V0 + 0,A
   \   000125   80C8         SJMP    ??zb_ReceiveDataIndication_11
    420              break;
    421            case ID_CMD_READ_REQ:
    422              for (i=0; i<len; i+=2)
   \                     ??zb_ReceiveDataIndication_1:
   \   000127   75..00       MOV     ?V0 + 2,#0x0
   \   00012A   75..00       MOV     ?V0 + 3,#0x0
   \   00012D   8011         SJMP    ??zb_ReceiveDataIndication_13
    423              {
    424                pid = pData[i]<<8 | pData[i+1];
    425                dat[rlen++] = pData[i];
    426                dat[rlen++] = pData[i+1];
    427                ret = paramRead(pid, dat+rlen);
    428                if (ret <= 0)
    429                {
    430                  dat[0] = 1;
    431                  zb_SendDataRequest( source, ID_CMD_READ_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
    432                  return;
    433                }
    434                rlen += ret;
   \                     ??zb_ReceiveDataIndication_14:
   \   00012F   E8           MOV     A,R0
   \   000130   25..         ADD     A,?V0 + 6
   \   000132   F5..         MOV     ?V0 + 6,A
   \   000134   E5..         MOV     A,?V0 + 2
   \   000136   2402         ADD     A,#0x2
   \   000138   F5..         MOV     ?V0 + 2,A
   \   00013A   E5..         MOV     A,?V0 + 3
   \   00013C   3400         ADDC    A,#0x0
   \   00013E   F5..         MOV     ?V0 + 3,A
   \                     ??zb_ReceiveDataIndication_13:
   \   000140   C3           CLR     C
   \   000141   E5..         MOV     A,?V0 + 2
   \   000143   95..         SUBB    A,?V0 + 4
   \   000145   E5..         MOV     A,?V0 + 3
   \   000147   95..         SUBB    A,?V0 + 5
   \   000149   4003         JC      $+5
   \   00014B   02....       LJMP    ??zb_ReceiveDataIndication_15 & 0xFFFF
   \   00014E   E5..         MOV     A,?V0 + 0
   \   000150   25..         ADD     A,?V0 + 2
   \   000152   F8           MOV     R0,A
   \   000153   E5..         MOV     A,?V0 + 1
   \   000155   35..         ADDC    A,?V0 + 3
   \   000157   F9           MOV     R1,A
   \   000158   E8           MOV     A,R0
   \   000159   FC           MOV     R4,A
   \   00015A   E9           MOV     A,R1
   \   00015B   FD           MOV     R5,A
   \   00015C   8C82         MOV     DPL,R4
   \   00015E   8D83         MOV     DPH,R5
   \   000160   A3           INC     DPTR
   \   000161   A882         MOV     R0,DPL
   \   000163   A983         MOV     R1,DPH
   \   000165   8C82         MOV     DPL,R4
   \   000167   8D83         MOV     DPH,R5
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   FB           MOV     R3,A
   \   00016B   8882         MOV     DPL,R0
   \   00016D   8983         MOV     DPH,R1
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   FA           MOV     R2,A
   \   000171   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000174   EB           MOV     A,R3
   \   000175   F0           MOVX    @DPTR,A
   \   000176   05..         INC     ?V0 + 6
   \   000178   8882         MOV     DPL,R0
   \   00017A   8983         MOV     DPH,R1
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   C0E0         PUSH    A
   \   00017F   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000182   D0E0         POP     A
   \   000184   F0           MOVX    @DPTR,A
   \   000185   05..         INC     ?V0 + 6
   \   000187                ; Setup parameters for call to function paramRead
   \   000187   85....       MOV     ?V0 + 8,?V0 + 6
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   E582         MOV     A,DPL
   \   000192   25..         ADD     A,?V0 + 8
   \   000194   FC           MOV     R4,A
   \   000195   E583         MOV     A,DPH
   \   000197   3400         ADDC    A,#0x0
   \   000199   FD           MOV     R5,A
   \   00019A   12....       LCALL   ??paramRead?relay
   \   00019D   8A..         MOV     ?V0 + 8,R2
   \   00019F   A8..         MOV     R0,?V0 + 8
   \   0001A1   C3           CLR     C
   \   0001A2   E8           MOV     A,R0
   \   0001A3   9401         SUBB    A,#0x1
   \   0001A5   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001A8   5085         JNC     ??zb_ReceiveDataIndication_14
   \   0001AA   7401         MOV     A,#0x1
   \   0001AC   85..82       MOV     DPL,?XSP + 0
   \   0001AF   85..83       MOV     DPH,?XSP + 1
   \   0001B2   12....       LCALL   ?Subroutine9 & 0xFFFF
    435              }
   \                     ??CrossCallReturnLabel_22:
   \   0001B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B8   75..10       MOV     ?V0 + 0,#0x10
   \   0001BB   78..         MOV     R0,#?V0 + 0
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C0   75..00       MOV     ?V0 + 0,#0x0
   \   0001C3   78..         MOV     R0,#?V0 + 0
   \   0001C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C8   7403         MOV     A,#0x3
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   8582..       MOV     ?V0 + 0,DPL
   \   0001D0   8583..       MOV     ?V0 + 1,DPH
   \   0001D3   78..         MOV     R0,#?V0 + 0
   \   0001D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D8   7901         MOV     R1,#0x1
   \   0001DA   8031         SJMP    ??zb_ReceiveDataIndication_16
    436              dat[0] = 0;
   \                     ??zb_ReceiveDataIndication_15:
   \   0001DC   E4           CLR     A
   \   0001DD   85..82       MOV     DPL,?XSP + 0
   \   0001E0   85..83       MOV     DPH,?XSP + 1
   \   0001E3   F0           MOVX    @DPTR,A
    437              zb_SendDataRequest( source, ID_CMD_READ_RES, rlen, dat, 0, AF_ACK_REQUEST, 0 );
   \   0001E4                ; Setup parameters for call to function zb_SendDataRequest
   \   0001E4   F5..         MOV     ?V0 + 0,A
   \   0001E6   78..         MOV     R0,#?V0 + 0
   \   0001E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001EB   75..10       MOV     ?V0 + 0,#0x10
   \   0001EE   78..         MOV     R0,#?V0 + 0
   \   0001F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F3   75..00       MOV     ?V0 + 0,#0x0
   \   0001F6   78..         MOV     R0,#?V0 + 0
   \   0001F8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001FB   7403         MOV     A,#0x3
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   8582..       MOV     ?V0 + 0,DPL
   \   000203   8583..       MOV     ?V0 + 1,DPH
   \   000206   78..         MOV     R0,#?V0 + 0
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020B   A9..         MOV     R1,?V0 + 6
   \                     ??zb_ReceiveDataIndication_16:
   \   00020D   7C01         MOV     R4,#0x1
   \                     ??zb_ReceiveDataIndication_12:
   \   00020F   7D80         MOV     R5,#-0x80
   \   000211   EE           MOV     A,R6
   \   000212   FA           MOV     R2,A
   \   000213   EF           MOV     A,R7
   \   000214   FB           MOV     R3,A
    438              break;
    439            }
   \   000215   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000218   12....       LCALL   ?DEALLOC_XSTACK8
    440          }
   \                     ??zb_ReceiveDataIndication_0:
   \   00021B   7440         MOV     A,#0x40
   \   00021D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000220   7F0A         MOV     R7,#0xa
   \   000222   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85....       MOV     ?V0 + 8,?V0 + 6
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E582         MOV     A,DPL
   \   00000B   25..         ADD     A,?V0 + 8
   \   00000D   F582         MOV     DPL,A
   \   00000F   E583         MOV     A,DPH
   \   000011   3400         ADDC    A,#0x0
   \   000013   F583         MOV     DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EB           MOV     A,R3
   \   000001   9400         SUBB    A,#0x0
   \   000003   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000005   65D0         XRL     A,PSW
   \   000007   33           RLC     A
   \   000008   22           RET
    441          
    442          /******************************************************************************
    443           * @fn          
    444           *
    445           * @brief       Reports temperature sensor reading
    446           *
    447           * @param
    448           *
    449           * @return
    450           */
    451          
    452          
    453          /******************************************************************************
    454           * @fn          myApp_ReadTemperature
    455           *
    456           * @brief       Reports temperature sensor reading
    457           *
    458           * @param
    459           *
    460           * @return
    461           */
    462          
    463          
    464          static int paramWrite(uint16 pid, byte *dat)
    465          {
    466            int len = 0;
    467            switch (pid)
    468            {
    469            case 0x0901:
    470                Fpm10aon = dat[0];
    471                len = 1;
    472                break; 
    473            case 0x0903:
    474                index_command =2;
    475                Fpm10aon = 0;
    476                zhiwen_id[0] = dat[1];
    477                zhiwen_id[1] = dat[2];
    478                len = 3;
    479                break;
    480            case 0x0904:
    481                index_command =3;
    482                Fpm10aon = 0;
    483                zhiwen_id[0] = dat[1];
    484                zhiwen_id[1] = dat[2];
    485                len = 3;
    486                break;
    487            }
    488            return len;
    489          }
    490          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    491          static int paramRead(uint16 pid, byte *dat)
   \                     paramRead:
    492          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    493            int len = 0;
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7D00         MOV     R5,#0x0
    494            switch (pid) {
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for paramRead>_0`:
   \   00001B   0000         DW        0
   \   00001D   0900         DW        9
   \   00001F   0100         DW        1
   \   000021   ....         DW        ??paramRead_0
   \   000023   0200         DW        2
   \   000025   ....         DW        ??paramRead_1
   \   000027   0300         DW        3
   \   000029   ....         DW        ??paramRead_2
   \   00002B   0400         DW        4
   \   00002D   ....         DW        ??paramRead_3
   \   00002F   0500         DW        5
   \   000031   ....         DW        ??paramRead_4
   \   000033   1400         DW        20
   \   000035   ....         DW        ??paramRead_5
   \   000037   1500         DW        21
   \   000039   ....         DW        ??paramRead_6
   \   00003B   0109         DW        2305
   \   00003D   ....         DW        ??paramRead_7
   \   00003F   0209         DW        2306
   \   000041   ....         DW        ??paramRead_8
   \   000043   ....         DW        ??paramRead_9
    495            case 0x0001:
    496              dat[0] = 0x20; dat[1] = 0x12;
   \                     ??paramRead_0:
   \   000045   7420         MOV     A,#0x20
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   7412         MOV     A,#0x12
   \                     ??paramRead_10:
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
    497              len = 2;
   \   000050   0C           INC     R4
   \   000051   02....       LJMP    ??paramRead_8 & 0xFFFF
    498              break;
    499            case 0x0002:
    500              dat[0] = 0x22; dat[1] = 0x44;
   \                     ??paramRead_1:
   \   000054   7422         MOV     A,#0x22
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   7444         MOV     A,#0x44
   \   00005D   80EF         SJMP    ??paramRead_10
    501              len = 2;
    502              break;
    503            case 0x0003:
    504              dat[0] = 0x00; dat[1] = 0x01;
   \                     ??paramRead_2:
   \   00005F   E4           CLR     A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   F0           MOVX    @DPTR,A
   \   000065   7401         MOV     A,#0x1
   \   000067   80E5         SJMP    ??paramRead_10
    505              len = 2;
    506              break;
    507            case 0x0004:
    508              dat[0] = dat[1] = dat[2] = dat[3] = dat[4] = dat[5] = 1;
   \                     ??paramRead_3:
   \   000069   7401         MOV     A,#0x1
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000076   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000079   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00007C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   F0           MOVX    @DPTR,A
    509              len = 6;
   \   000085   7C06         MOV     R4,#0x6
   \   000087   02....       LJMP    ??paramRead_9 & 0xFFFF
    510              break;
    511            case 0x0005:
    512              dat[0] = DEV_ID_PFM10A;
   \                     ??paramRead_4:
   \   00008A   7409         MOV     A,#0x9
   \   00008C   02....       LJMP    ??paramRead_11 & 0xFFFF
    513              len = 1;
    514              break;
    515              
    516            /* -----------  网络参数 ------------------- */  
    517            case 0x0014: //mac地址
    518               /*osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf ); rm by liren */
    519              ZMacGetReq( ZMacExtAddr, dat ); // add by liren
   \                     ??paramRead_5:
   \   00008F                ; Setup parameters for call to function ZMacGetReq
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   79E2         MOV     R1,#-0x1e
   \   000095   12....       LCALL   ??ZMacGetReq?relay
    520              // Outgoing extended address needs to be reversed
    521              MT_ReverseBytes( dat, Z_EXTADDR_LEN );
   \   000098                ; Setup parameters for call to function MT_ReverseBytes
   \   000098   7908         MOV     R1,#0x8
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   ??MT_ReverseBytes?relay
    522              len = Z_EXTADDR_LEN;
   \   0000A1   7C08         MOV     R4,#0x8
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   02....       LJMP    ??paramRead_9 & 0xFFFF
    523              break;
    524            case 0x0015:
    525            {
    526                uint8 assocCnt = 0;
   \                     ??paramRead_6:
   \   0000A8   E4           CLR     A
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   F0           MOVX    @DPTR,A
    527                uint16 *assocList;
    528                int i;
    529          #if defined(RTR_NWK) && !defined( NONWK )
    530              assocList = AssocMakeList( &assocCnt );
   \   0000B0                ; Setup parameters for call to function AssocMakeList
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   ??AssocMakeList?relay
   \   0000B7   8A..         MOV     ?V0 + 2,R2
   \   0000B9   8B..         MOV     ?V0 + 3,R3
    531          #else
    532              assocCnt = 0;
    533              assocList = NULL;
    534          #endif
    535              dat[0] = assocCnt;
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   F0           MOVX    @DPTR,A
    536              for (i=0; i<assocCnt&&i<16; i++) {
   \   0000C7   7A00         MOV     R2,#0x0
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   8039         SJMP    ??paramRead_12
    537                dat[1+2*i] = HI_UINT16(assocList[i]);
   \                     ??paramRead_13:
   \   0000CD   EA           MOV     A,R2
   \   0000CE   F8           MOV     R0,A
   \   0000CF   EB           MOV     A,R3
   \   0000D0   F9           MOV     R1,A
   \   0000D1   E8           MOV     A,R0
   \   0000D2   C3           CLR     C
   \   0000D3   33           RLC     A
   \   0000D4   F8           MOV     R0,A
   \   0000D5   E9           MOV     A,R1
   \   0000D6   33           RLC     A
   \   0000D7   F9           MOV     R1,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   28           ADD     A,R0
   \   0000DA   FC           MOV     R4,A
   \   0000DB   EF           MOV     A,R7
   \   0000DC   39           ADDC    A,R1
   \   0000DD   FD           MOV     R5,A
   \   0000DE   E5..         MOV     A,?V0 + 2
   \   0000E0   28           ADD     A,R0
   \   0000E1   F8           MOV     R0,A
   \   0000E2   E5..         MOV     A,?V0 + 3
   \   0000E4   39           ADDC    A,R1
   \   0000E5   F9           MOV     R1,A
   \   0000E6   8882         MOV     DPL,R0
   \   0000E8   8983         MOV     DPH,R1
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   8C82         MOV     DPL,R4
   \   0000EE   8D83         MOV     DPH,R5
   \   0000F0   A3           INC     DPTR
   \   0000F1   F0           MOVX    @DPTR,A
    538                dat[1+2*i+1] = LO_UINT16(assocList[i]);
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   8C82         MOV     DPL,R4
   \   0000F9   8D83         MOV     DPH,R5
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   F0           MOVX    @DPTR,A
    539              }
   \   0000FE   EA           MOV     A,R2
   \   0000FF   2401         ADD     A,#0x1
   \   000101   0A           INC     R2
   \   000102   EB           MOV     A,R3
   \   000103   3400         ADDC    A,#0x0
   \   000105   FB           MOV     R3,A
   \                     ??paramRead_12:
   \   000106   85..82       MOV     DPL,?XSP + 0
   \   000109   85..83       MOV     DPH,?XSP + 1
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F8           MOV     R0,A
   \   00010E   C3           CLR     C
   \   00010F   EA           MOV     A,R2
   \   000110   98           SUBB    A,R0
   \   000111   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000114   5009         JNC     ??paramRead_14
   \   000116   C3           CLR     C
   \   000117   EA           MOV     A,R2
   \   000118   9410         SUBB    A,#0x10
   \   00011A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00011D   40AE         JC      ??paramRead_13
    540              len = 1 + 2 * assocCnt;
   \                     ??paramRead_14:
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   C3           CLR     C
   \   000121   33           RLC     A
   \   000122   F8           MOV     R0,A
   \   000123   E4           CLR     A
   \   000124   33           RLC     A
   \   000125   F9           MOV     R1,A
   \   000126   7401         MOV     A,#0x1
   \   000128   28           ADD     A,R0
   \   000129   FC           MOV     R4,A
   \   00012A   E4           CLR     A
   \   00012B   39           ADDC    A,R1
   \   00012C   FD           MOV     R5,A
    541              break;
   \   00012D   800A         SJMP    ??paramRead_9
    542            }
    543           /* ------------------------------------ */
    544            case 0x0901:
    545              dat[0] = Fpm10aon;
   \                     ??paramRead_7:
   \   00012F   90....       MOV     DPTR,#Fpm10aon
   \   000132   E0           MOVX    A,@DPTR
   \                     ??paramRead_11:
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   F0           MOVX    @DPTR,A
    546              len = 1;
    547              break;
    548            case 0x0902:  
    549             // dat[] = 
    550              len = 1;
   \                     ??paramRead_8:
   \   000138   0C           INC     R4
    551              break;
    552            }
    553            return len;
   \                     ??paramRead_9:
   \   000139   EC           MOV     A,R4
   \   00013A   FA           MOV     R2,A
   \   00013B   ED           MOV     A,R5
   \   00013C   FB           MOV     R3,A
   \   00013D   7401         MOV     A,#0x1
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   7F04         MOV     R7,#0x4
   \   000144   02....       LJMP    ?BANKED_LEAVE_XDATA
    554          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine22_0
   \   000001                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    555          
    556          
    557          #define RFID_UART 0 //1
    558          
    559          
    560          /*UART0通信初始化
    561          -------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          void rfid_uart_init(void)
   \                     rfid_uart_init:
    563          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    564          #if 1
    565             P0SEL |=  0x0C;                  //初始化UART0端口
   \   000000   43F30C       ORL     0xf3,#0xc
   \   000003   E5F3         MOV     A,0xf3
    566             PERCFG&= ~0x01;                  //选择UART0为可选位置一
   \   000005   53F1FE       ANL     0xf1,#0xfe
    567          #else
    568             PERCFG |= 0x01;
    569             P1SEL |= 0xc0;
    570          #endif
    571             U0UCR = 2;                       //设置停止位与奇偶校验 
   \   000008   75C402       MOV     0xc4,#0x2
    572             U0CSR = 0xC0;                    //设置为UART模式,而且使能接受器
   \   00000B   7586C0       MOV     0x86,#-0x40
    573             
    574             U0GCR = 10;
   \   00000E   75C50A       MOV     0xc5,#0xa
    575             U0BAUD = 216;                    //设置UART0波特率为56700bps
   \   000011   75C2D8       MOV     0xc2,#-0x28
    576            
    577          }
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE U0CSR
   \   000017                REQUIRE U0BAUD
   \   000017                REQUIRE U0UCR
   \   000017                REQUIRE U0GCR
   \   000017                REQUIRE PERCFG
   \   000017                REQUIRE P0SEL
    578          /*UART0发送数据
    579          -------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          void  rfid_uart_send(uchar data)
   \                     rfid_uart_send:
    581          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    582            U0DBUF = data;
   \   000000   89C1         MOV     0xc1,R1
    583            while(!UTX0IF);    //等待UART空闲时发送数据
   \                     ??rfid_uart_send_0:
   \   000002   A2E9         MOV     C,0xe8.1
   \   000004   50FC         JNC     ??rfid_uart_send_0
    584            UTX0IF = 0;
   \   000006   C2E9         CLR     0xe8.1
    585          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE U0DBUF
   \   00000B                REQUIRE _A_IRCON2
    586          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          int rfid_uart_recv(void)
   \                     rfid_uart_recv:
    588          {
   \   000000                ; Saved register size: 1
   \   000000                ; Auto size: 0
    589            int data = -1;
    590            //int i=30000;
    591            while (!URX0IF /*&& --i*/) { }
   \                     ??rfid_uart_recv_0:
   \   000000   A28B         MOV     C,0x88.3
   \   000002   50FC         JNC     ??rfid_uart_recv_0
    592            data = 0xff & U0DBUF;          //提取接收到的数据
   \   000004   E5C1         MOV     A,0xc1
    593            URX0IF = 0;
   \   000006   C28B         CLR     0x88.3
    594            return data;          
   \   000008   FA           MOV     R2,A
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE _A_TCON
   \   00000E                REQUIRE U0DBUF
    595          }
    596          
    597          //FINGERPRINT_获得指纹图像命令

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    598          void FINGERPRINT_Cmd_Get_Img(void)
   \                     FINGERPRINT_Cmd_Get_Img:
    599          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    600              uchar i;
    601          
    602             for(i=0;i<6;i++) //发送包头
   \   000005   7E00         MOV     R6,#0x0
    603                 rfid_uart_send(FP_Pack_Head[i]);
   \                     ??FINGERPRINT_Cmd_Get_Img_0:
   \   000007                ; Setup parameters for call to function rfid_uart_send
   \   000007   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00000A   40FB         JC      ??FINGERPRINT_Cmd_Get_Img_0
    604              
    605              for(i=0;i<6;i++) //发送命令 0x1d
   \   00000C   7E00         MOV     R6,#0x0
    606                 rfid_uart_send(FP_Get_Img[i]);
   \                     ??FINGERPRINT_Cmd_Get_Img_1:
   \   00000E                ; Setup parameters for call to function rfid_uart_send
   \   00000E   8E..         MOV     ?V0 + 0,R6
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   24..         ADD     A,#(FP_Get_Img & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#((FP_Get_Img >> 8) & 0xff)
   \   000019   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00001C   40F0         JC      ??FINGERPRINT_Cmd_Get_Img_1
    607          
    608          	for(i=0;i<12;i++)//读回应答信息
   \   00001E   7E00         MOV     R6,#0x0
    609          	  data_uart[i]=rfid_uart_recv();
   \                     ??FINGERPRINT_Cmd_Get_Img_2:
   \   000020                ; Setup parameters for call to function rfid_uart_recv
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000023   40FB         JC      ??FINGERPRINT_Cmd_Get_Img_2
    610          }
   \   000025   80..         SJMP    ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000003   940C         SUBB    A,#0xc
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   E5..         MOV     A,?V0 + 0
   \   000004   24..         ADD     A,#(FP_Pack_Head & 0xff)
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   34..         ADDC    A,#((FP_Pack_Head >> 8) & 0xff)
   \   00000B                REQUIRE ??Subroutine24_0
   \   00000B                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000003   9406         SUBB    A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ??rfid_uart_recv?relay
   \   000003   8E..         MOV     ?V0 + 0,R6
   \   000005   E5..         MOV     A,?V0 + 0
   \   000007   24..         ADD     A,#(data_uart & 0xff)
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   34..         ADDC    A,#((data_uart >> 8) & 0xff)
   \   00000E   F583         MOV     DPH,A
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   0E           INC     R6
   \   000013   EE           MOV     A,R6
   \   000014   C3           CLR     C
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??rfid_uart_send?relay
   \   000007   0E           INC     R6
   \   000008   EE           MOV     A,R6
   \   000009   C3           CLR     C
   \   00000A   22           RET
    611          
    612          //删除所有指纹模版

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    613          void FINGERPRINT_Cmd_Delete_All_Model(void)
   \                     FINGERPRINT_Cmd_Delete_All_Model:
    614          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    615              uchar i;
    616          
    617              for(i=0;i<6;i++) //发送包头
   \   000005   7E00         MOV     R6,#0x0
    618                 rfid_uart_send(FP_Pack_Head[i]);
   \                     ??FINGERPRINT_Cmd_Delete_All_Model_0:
   \   000007                ; Setup parameters for call to function rfid_uart_send
   \   000007   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00000A   40FB         JC      ??FINGERPRINT_Cmd_Delete_All_Model_0
    619              
    620              for(i=0;i<6;i++) //发送命令 0x1d
   \   00000C   7E00         MOV     R6,#0x0
    621                 rfid_uart_send(FP_Delet_All_Model[i]);
   \                     ??FINGERPRINT_Cmd_Delete_All_Model_1:
   \   00000E                ; Setup parameters for call to function rfid_uart_send
   \   00000E   8E..         MOV     ?V0 + 0,R6
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   24..         ADD     A,#(FP_Delet_All_Model & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#((FP_Delet_All_Model >> 8) & 0xff)
   \   000019   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00001C   40F0         JC      ??FINGERPRINT_Cmd_Delete_All_Model_1
    622          	   
    623          	for(i=0;i<12;i++)//读回应答信息
   \   00001E   7E00         MOV     R6,#0x0
    624          		data_uart[i]=rfid_uart_recv();
   \                     ??FINGERPRINT_Cmd_Delete_All_Model_2:
   \   000020                ; Setup parameters for call to function rfid_uart_recv
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000023   40FB         JC      ??FINGERPRINT_Cmd_Delete_All_Model_2
    625          	
    626          }
   \   000025   80..         SJMP    ??Subroutine23_0
    627          
    628          
    629          //讲图像转换成特征码存放在Buffer1中

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          void FINGERPRINT_Cmd_Img_To_Buffer1(void)
   \                     FINGERPRINT_Cmd_Img_To_Buffer1:
    631          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    632          	unsigned char i;
    633              
    634          	for(i=0;i<6;i++)    //发送包头
   \   000005   7E00         MOV     R6,#0x0
    635          	{
    636              	 rfid_uart_send(FP_Pack_Head[i]);   
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer1_0:
   \   000007                ; Setup parameters for call to function rfid_uart_send
   \   000007   12....       LCALL   ?Subroutine2 & 0xFFFF
    637              }
   \                     ??CrossCallReturnLabel_55:
   \   00000A   40FB         JC      ??FINGERPRINT_Cmd_Img_To_Buffer1_0
    638                     
    639              for(i=0;i<7;i++)   //发送命令 将图像转换成 特征码 存放在 CHAR_buffer1
   \   00000C   7E00         MOV     R6,#0x0
    640              {
    641                   rfid_uart_send(FP_Img_To_Buffer1[i]);
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer1_1:
   \   00000E                ; Setup parameters for call to function rfid_uart_send
   \   00000E   8E..         MOV     ?V0 + 0,R6
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   24..         ADD     A,#(FP_Img_To_Buffer1 & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#((FP_Img_To_Buffer1 >> 8) & 0xff)
   \   000019   12....       LCALL   ?Subroutine5 & 0xFFFF
    642              }
   \                     ??CrossCallReturnLabel_4:
   \   00001C   40F0         JC      ??FINGERPRINT_Cmd_Img_To_Buffer1_1
    643          
    644          
    645          	for(i=0;i<12;i++)//读应答信息
   \   00001E   7E00         MOV     R6,#0x0
    646          	{
    647          		 data_uart[i]=rfid_uart_recv();//把应答数据存放到缓冲区
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer1_2:
   \   000020                ; Setup parameters for call to function rfid_uart_recv
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
    648          	}
   \                     ??CrossCallReturnLabel_11:
   \   000023   40FB         JC      ??FINGERPRINT_Cmd_Img_To_Buffer1_2
    649          
    650          }
   \   000025   80..         SJMP    ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   9407         SUBB    A,#0x7
   \   000005   22           RET
    651          
    652          
    653          //将图像转换成特征码存放在Buffer2中

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    654          void FINGERPRINT_Cmd_Img_To_Buffer2(void)
   \                     FINGERPRINT_Cmd_Img_To_Buffer2:
    655          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    656          	unsigned char i;
    657              for(i=0;i<6;i++)    //发送包头
   \   000005   7E00         MOV     R6,#0x0
    658          	{
    659              	 rfid_uart_send(FP_Pack_Head[i]);   
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer2_0:
   \   000007                ; Setup parameters for call to function rfid_uart_send
   \   000007   12....       LCALL   ?Subroutine2 & 0xFFFF
    660             	}
   \                     ??CrossCallReturnLabel_56:
   \   00000A   40FB         JC      ??FINGERPRINT_Cmd_Img_To_Buffer2_0
    661                     
    662             	for(i=0;i<7;i++)   //发送命令 将图像转换成 特征码 存放在 CHAR_buffer2
   \   00000C   7E00         MOV     R6,#0x0
    663              {
    664                	rfid_uart_send(FP_Img_To_Buffer2[i]);
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer2_1:
   \   00000E                ; Setup parameters for call to function rfid_uart_send
   \   00000E   8E..         MOV     ?V0 + 0,R6
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   24..         ADD     A,#(FP_Img_To_Buffer2 & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#((FP_Img_To_Buffer2 >> 8) & 0xff)
   \   000019   12....       LCALL   ?Subroutine5 & 0xFFFF
    665             	}
   \                     ??CrossCallReturnLabel_5:
   \   00001C   40F0         JC      ??FINGERPRINT_Cmd_Img_To_Buffer2_1
    666          
    667          	for(i=0;i<12;i++)
   \   00001E   7E00         MOV     R6,#0x0
    668          	{
    669          		data_uart[i]=rfid_uart_recv();//读回应答信息
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer2_2:
   \   000020                ; Setup parameters for call to function rfid_uart_recv
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
    670          	}
   \                     ??CrossCallReturnLabel_12:
   \   000023   40FB         JC      ??FINGERPRINT_Cmd_Img_To_Buffer2_2
    671          }
   \   000025   80..         SJMP    ??Subroutine23_0
    672          
    673          //将BUFFER1 跟 BUFFER2 中的特征码合并成指纹模版

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void FINGERPRINT_Cmd_Reg_Model(void)
   \                     FINGERPRINT_Cmd_Reg_Model:
    675          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    676              unsigned char i;    
    677          
    678             for(i=0;i<6;i++) //包头
   \   000005   7E00         MOV     R6,#0x0
    679              {
    680                rfid_uart_send(FP_Pack_Head[i]);   
   \                     ??FINGERPRINT_Cmd_Reg_Model_0:
   \   000007                ; Setup parameters for call to function rfid_uart_send
   \   000007   12....       LCALL   ?Subroutine2 & 0xFFFF
    681              }
   \                     ??CrossCallReturnLabel_57:
   \   00000A   40FB         JC      ??FINGERPRINT_Cmd_Reg_Model_0
    682          
    683              for(i=0;i<6;i++) //命令合并指纹模版
   \   00000C   7E00         MOV     R6,#0x0
    684              {
    685                rfid_uart_send(FP_Reg_Model[i]);   
   \                     ??FINGERPRINT_Cmd_Reg_Model_1:
   \   00000E                ; Setup parameters for call to function rfid_uart_send
   \   00000E   8E..         MOV     ?V0 + 0,R6
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   24..         ADD     A,#(FP_Reg_Model & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#((FP_Reg_Model >> 8) & 0xff)
   \   000019   12....       LCALL   ??Subroutine24_0 & 0xFFFF
    686              }
   \                     ??CrossCallReturnLabel_63:
   \   00001C   40F0         JC      ??FINGERPRINT_Cmd_Reg_Model_1
    687          
    688          	for(i=0;i<12;i++)
   \   00001E   7E00         MOV     R6,#0x0
    689          	{
    690          		data_uart[i]=rfid_uart_recv();
   \                     ??FINGERPRINT_Cmd_Reg_Model_2:
   \   000020                ; Setup parameters for call to function rfid_uart_recv
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
    691          	}
   \                     ??CrossCallReturnLabel_13:
   \   000023   40FB         JC      ??FINGERPRINT_Cmd_Reg_Model_2
    692          }
   \   000025   80..         SJMP    ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    693          void FINGERPRINT_Cmd_Save_Finger(uint number)//存储模版到特定地址
   \                     FINGERPRINT_Cmd_Save_Finger:
    694          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    695                     uint temp = 0;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    696          		   unsigned char i;
    697          
    698                 //    FP_Save_Finger[5] = ucH_Char;
    699          	   		FP_Save_Finger[5] = (number>>8);
   \   000009   EB           MOV     A,R3
   \   00000A   90....       MOV     DPTR,#(FP_Save_Finger + 5)
   \   00000D   F0           MOVX    @DPTR,A
    700                 //    FP_Save_Finger[6] = ucL_Char;
    701          	   		FP_Save_Finger[6] = number;
   \   00000E   EA           MOV     A,R2
   \   00000F   90....       MOV     DPTR,#(FP_Save_Finger + 6)
   \   000012   F0           MOVX    @DPTR,A
    702                     
    703          		   for(i=0;i<7;i++)   //计算校验和
   \   000013   7E00         MOV     R6,#0x0
    704          		   	   temp = temp + FP_Save_Finger[i];
   \                     ??FINGERPRINT_Cmd_Save_Finger_0:
   \   000015   8E..         MOV     ?V0 + 0,R6
   \   000017   E5..         MOV     A,?V0 + 0
   \   000019   24..         ADD     A,#(FP_Save_Finger & 0xff)
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   34..         ADDC    A,#((FP_Save_Finger >> 8) & 0xff)
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   E8           MOV     A,R0
   \   000025   2A           ADD     A,R2
   \   000026   F8           MOV     R0,A
   \   000027   E9           MOV     A,R1
   \   000028   3400         ADDC    A,#0x0
   \   00002A   F9           MOV     R1,A
   \   00002B   0E           INC     R6
   \   00002C   EE           MOV     A,R6
   \   00002D   C3           CLR     C
   \   00002E   9407         SUBB    A,#0x7
   \   000030   40E3         JC      ??FINGERPRINT_Cmd_Save_Finger_0
    705          			    
    706          		//   FP_Save_Finger[7]=(temp & 0x00FF00) >> 8; //存放校验数据
    707          		 //  FP_Save_Finger[8]= temp & 0x0000FF;
    708          		 	FP_Save_Finger[7]=(uchar)(temp>>8);//存放校验数据
   \   000032   E9           MOV     A,R1
   \   000033   90....       MOV     DPTR,#(FP_Save_Finger + 7)
   \   000036   F0           MOVX    @DPTR,A
    709          			FP_Save_Finger[8]=(uchar)temp;
   \   000037   E8           MOV     A,R0
   \   000038   90....       MOV     DPTR,#(FP_Save_Finger + 8)
   \   00003B   F0           MOVX    @DPTR,A
    710          		   
    711                     for(i=0;i<6;i++)    
   \   00003C   7E00         MOV     R6,#0x0
    712              	       rfid_uart_send(FP_Pack_Head[i]);        //发送包头
   \                     ??FINGERPRINT_Cmd_Save_Finger_1:
   \   00003E                ; Setup parameters for call to function rfid_uart_send
   \   00003E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000041   40FB         JC      ??FINGERPRINT_Cmd_Save_Finger_1
    713                     for(i=0;i<9;i++)  
   \   000043   7E00         MOV     R6,#0x0
    714                		 rfid_uart_send(FP_Save_Finger[i]);      //发送命令 将图像转换成 特征码 存放在 CHAR_buffer1 		                                                                                                                                                                                                                                                                                                                    led4=0;
   \                     ??FINGERPRINT_Cmd_Save_Finger_2:
   \   000045                ; Setup parameters for call to function rfid_uart_send
   \   000045   8E..         MOV     ?V0 + 0,R6
   \   000047   E5..         MOV     A,?V0 + 0
   \   000049   24..         ADD     A,#(FP_Save_Finger & 0xff)
   \   00004B   F582         MOV     DPL,A
   \   00004D   E4           CLR     A
   \   00004E   34..         ADDC    A,#((FP_Save_Finger >> 8) & 0xff)
   \   000050   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000053   9409         SUBB    A,#0x9
   \   000055   40EE         JC      ??FINGERPRINT_Cmd_Save_Finger_2
    715          
    716          		   for (i=0;i<12;i++)
   \   000057   7E00         MOV     R6,#0x0
    717                     		data_uart[i]=rfid_uart_recv(); 
   \                     ??FINGERPRINT_Cmd_Save_Finger_3:
   \   000059                ; Setup parameters for call to function rfid_uart_recv
   \   000059   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00005C   40FB         JC      ??FINGERPRINT_Cmd_Save_Finger_3
    718          }
   \   00005E   02....       LJMP    ??Subroutine23_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   22           RET
    719          //搜索全部用户999枚

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          void FINGERPRINT_Cmd_Search_Finger(void)
   \                     FINGERPRINT_Cmd_Search_Finger:
    721          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    722                 unsigned char i;	   
    723          	   for(i=0;i<6;i++)   //发送命令搜索指纹库
   \   000005   7E00         MOV     R6,#0x0
    724                     {
    725              	      rfid_uart_send(FP_Pack_Head[i]);   
   \                     ??FINGERPRINT_Cmd_Search_Finger_0:
   \   000007                ; Setup parameters for call to function rfid_uart_send
   \   000007   12....       LCALL   ?Subroutine2 & 0xFFFF
    726             		   }
   \                     ??CrossCallReturnLabel_59:
   \   00000A   40FB         JC      ??FINGERPRINT_Cmd_Search_Finger_0
    727          
    728                 for(i=0;i<11;i++)
   \   00000C   7E00         MOV     R6,#0x0
    729                     {
    730              	      rfid_uart_send(FP_Search[i]);   
   \                     ??FINGERPRINT_Cmd_Search_Finger_1:
   \   00000E                ; Setup parameters for call to function rfid_uart_send
   \   00000E   8E..         MOV     ?V0 + 0,R6
   \   000010   E5..         MOV     A,?V0 + 0
   \   000012   24..         ADD     A,#(FP_Search & 0xff)
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   34..         ADDC    A,#((FP_Search >> 8) & 0xff)
   \   000019   12....       LCALL   ?Subroutine6 & 0xFFFF
    731             		   }
   \                     ??CrossCallReturnLabel_7:
   \   00001C   940B         SUBB    A,#0xb
   \   00001E   40EE         JC      ??FINGERPRINT_Cmd_Search_Finger_1
    732          
    733          		for(i=0;i<16;i++)
   \   000020   7E00         MOV     R6,#0x0
    734          		{
    735          			data_uart[i]=rfid_uart_recv();
   \                     ??FINGERPRINT_Cmd_Search_Finger_2:
   \   000022                ; Setup parameters for call to function rfid_uart_recv
   \   000022   12....       LCALL   ?Subroutine19 & 0xFFFF
    736          		}
   \                     ??CrossCallReturnLabel_43:
   \   000025   9410         SUBB    A,#0x10
   \   000027   40F9         JC      ??FINGERPRINT_Cmd_Search_Finger_2
    737          }
   \   000029   02....       LJMP    ??Subroutine23_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          uchar test_fig(void)//检测指纹模块录入指纹情况，返回00表示录入成功；02无手指；03录入失败
   \                     test_fig:
    739          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    740          	uchar fig_dat;
    741          	FINGERPRINT_Cmd_Get_Img();
   \   000004                ; Setup parameters for call to function FINGERPRINT_Cmd_Get_Img
   \   000004   12....       LCALL   ?Subroutine13 & 0xFFFF
    742          	//delayxms(20);
    743          	fig_dat=data_uart[9];
    744          	return(fig_dat);
   \                     ??CrossCallReturnLabel_33:
   \   000007   F9           MOV     R1,A
   \   000008   02....       LJMP    ?Subroutine1 & 0xFFFF
    745          }
    746          //删除指纹模块里的指定指纹模版

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    747          void FINGERPRINT_Cmd_Delete_Model(uint uiID_temp)
   \                     FINGERPRINT_Cmd_Delete_Model:
    748          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    749             volatile unsigned int uiSum_temp = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    750             unsigned char i;    
    751          	 
    752          	FP_Delete_Model[4]=(uiID_temp>>8);
   \   000014   EB           MOV     A,R3
   \   000015   90....       MOV     DPTR,#(FP_Delete_Model + 4)
   \   000018   F0           MOVX    @DPTR,A
    753          	FP_Delete_Model[5]=(uiID_temp);
   \   000019   EA           MOV     A,R2
   \   00001A   90....       MOV     DPTR,#(FP_Delete_Model + 5)
   \   00001D   F0           MOVX    @DPTR,A
    754          	
    755          	for(i=0;i<8;i++)
   \   00001E   7E00         MOV     R6,#0x0
    756          	    uiSum_temp = uiSum_temp + FP_Delete_Model[i];
                 	                                                ^
Warning[Pa082]: undefined behavior: the order of volatile accesses is
          undefined in this statement
   \                     ??FINGERPRINT_Cmd_Delete_Model_0:
   \   000020   8E..         MOV     ?V0 + 0,R6
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   24..         ADD     A,#(FP_Delete_Model & 0xff)
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   34..         ADDC    A,#((FP_Delete_Model >> 8) & 0xff)
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   28           ADD     A,R0
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   0E           INC     R6
   \   00003E   EE           MOV     A,R6
   \   00003F   C3           CLR     C
   \   000040   9408         SUBB    A,#0x8
   \   000042   40DC         JC      ??FINGERPRINT_Cmd_Delete_Model_0
    757          	
    758          	FP_Delete_Model[8]=(uchar)(uiSum_temp>>8);
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   90....       MOV     DPTR,#(FP_Delete_Model + 8)
   \   000050   F0           MOVX    @DPTR,A
    759          	FP_Delete_Model[9]=(uchar)uiSum_temp;
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   90....       MOV     DPTR,#(FP_Delete_Model + 9)
   \   00005F   F0           MOVX    @DPTR,A
    760          	 
    761              for(i=0;i<6;i++) //包头
   \   000060   7E00         MOV     R6,#0x0
    762                rfid_uart_send(FP_Pack_Head[i]);   
   \                     ??FINGERPRINT_Cmd_Delete_Model_1:
   \   000062                ; Setup parameters for call to function rfid_uart_send
   \   000062   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000065   40FB         JC      ??FINGERPRINT_Cmd_Delete_Model_1
    763          
    764              for(i=0;i<10;i++) //命令合并指纹模版
   \   000067   7E00         MOV     R6,#0x0
    765                rfid_uart_send(FP_Delete_Model[i]);   
   \                     ??FINGERPRINT_Cmd_Delete_Model_2:
   \   000069                ; Setup parameters for call to function rfid_uart_send
   \   000069   8E..         MOV     ?V0 + 0,R6
   \   00006B   E5..         MOV     A,?V0 + 0
   \   00006D   24..         ADD     A,#(FP_Delete_Model & 0xff)
   \   00006F   F582         MOV     DPL,A
   \   000071   E4           CLR     A
   \   000072   34..         ADDC    A,#((FP_Delete_Model >> 8) & 0xff)
   \   000074   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000077   940A         SUBB    A,#0xa
   \   000079   40EE         JC      ??FINGERPRINT_Cmd_Delete_Model_2
    766              for(i=0;i<12;i++)
   \   00007B   7E00         MOV     R6,#0x0
    767                 data_uart[i]=rfid_uart_recv();                
   \                     ??FINGERPRINT_Cmd_Delete_Model_3:
   \   00007D                ; Setup parameters for call to function rfid_uart_recv
   \   00007D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000080   40FB         JC      ??FINGERPRINT_Cmd_Delete_Model_3
    768          }
   \   000082   7402         MOV     A,#0x2
   \   000084   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          void delayxms(uint xms)
   \                     delayxms:
    770          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    771            while(xms--);
   \                     ??delayxms_0:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   7001         JNZ     ??delayxms_1
   \   000005   E9           MOV     A,R1
   \                     ??delayxms_1:
   \   000006   70F8         JNZ     ??delayxms_0
    772            while(xms--);
   \                     ??delayxms_2:
   \   000008   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000B   7001         JNZ     ??delayxms_3
   \   00000D   E9           MOV     A,R1
   \                     ??delayxms_3:
   \   00000E   70F8         JNZ     ??delayxms_2
    773            while(xms--);
   \                     ??delayxms_4:
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000013   7001         JNZ     ??delayxms_5
   \   000015   E9           MOV     A,R1
   \                     ??delayxms_5:
   \   000016   70F8         JNZ     ??delayxms_4
    774            while(xms--);
   \                     ??delayxms_6:
   \   000018   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00001B   7001         JNZ     ??delayxms_7
   \   00001D   E9           MOV     A,R1
   \                     ??delayxms_7:
   \   00001E   70F8         JNZ     ??delayxms_6
    775            while(xms--);
   \                     ??delayxms_8:
   \   000020   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000023   7001         JNZ     ??delayxms_9
   \   000025   E9           MOV     A,R1
   \                     ??delayxms_9:
   \   000026   70F8         JNZ     ??delayxms_8
    776            while(xms--);
   \                     ??delayxms_10:
   \   000028   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00002B   7001         JNZ     ??delayxms_11
   \   00002D   E9           MOV     A,R1
   \                     ??delayxms_11:
   \   00002E   70F8         JNZ     ??delayxms_10
    777          }
   \   000030   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   74FF         MOV     A,#-0x1
   \   000006   28           ADD     A,R0
   \   000007   1A           DEC     R2
   \   000008   74FF         MOV     A,#-0x1
   \   00000A   39           ADDC    A,R1
   \   00000B   FB           MOV     R3,A
   \   00000C   E8           MOV     A,R0
   \   00000D   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FP_Save_Finger>`:
   \   000000   01000606     DB 1, 0, 6, 6, 1, 0, 11, 0, 25
   \            01000B00
   \            19      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FP_Delete_Model>`:
   \   000000   0100070C     DB 1, 0, 7, 12, 0, 0, 0, 1, 0, 0
   \            00000001
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   1027         DW 10000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myCheckCardDelay>`:
   \   000000   A00F         DW 4000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Fpm10aon>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleOsalEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HanderMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HanderMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReceiveDataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??paramRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    paramRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_uart_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_uart_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_uart_send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_uart_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_uart_recv?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_uart_recv

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Get_Img?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Get_Img

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Delete_All_Model?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Delete_All_Model

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Img_To_Buffer1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Img_To_Buffer2?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Img_To_Buffer2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Reg_Model?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Reg_Model

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Save_Finger?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Save_Finger

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Search_Finger?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Search_Finger

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??test_fig?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    test_fig

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??FINGERPRINT_Cmd_Delete_Model?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FINGERPRINT_Cmd_Delete_Model

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??delayxms?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    delayxms

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     FINGERPRINT_Cmd_Delete_All_Model
                                        1      0     10
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     FINGERPRINT_Cmd_Delete_Model       1      0     56
       -> rfid_uart_send                0      0     24
       -> rfid_uart_send                0      0     24
       -> rfid_uart_recv                0      0     24
     FINGERPRINT_Cmd_Get_Img            1      0     54
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     FINGERPRINT_Cmd_Img_To_Buffer1     1      0     54
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     FINGERPRINT_Cmd_Img_To_Buffer2     1      0     54
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     FINGERPRINT_Cmd_Reg_Model          1      0     54
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     FINGERPRINT_Cmd_Save_Finger        1      0     54
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     FINGERPRINT_Cmd_Search_Finger      1      0     54
       -> rfid_uart_send                0      0     20
       -> rfid_uart_send                0      0     20
       -> rfid_uart_recv                0      0     20
     delayxms                           0      0     44
     paramRead                          1      0     95
       -> ZMacGetReq                    0      0     26
       -> MT_ReverseBytes               0      0     26
       -> AssocMakeList                 0      0     26
     rfid_uart_init                     0      0     44
     rfid_uart_recv                     1      0     12
     rfid_uart_send                     0      0     12
     test_fig                           2      0     44
       -> FINGERPRINT_Cmd_Get_Img       4      0      0
     zb_AllowBindConfirm                0      0      0
     zb_BindConfirm                     0      0      0
     zb_FindDeviceConfirm               0      0      0
     zb_HanderMsg                       0      0      0
     zb_HandleKeys                      2      0      0
       -> FINGERPRINT_Cmd_Delete_All_Model
                                        4      0      0
     zb_HandleOsalEvent                 1      0     49
       -> zb_ReadConfiguration          0      0     88
       -> zb_WriteConfiguration         0      0     88
       -> zb_ReadConfiguration          0      0     88
       -> zb_WriteConfiguration         0      0     88
       -> rfid_uart_init                0      0     88
       -> osal_start_timerEx            0      0     88
       -> zb_StartRequest               0      0     88
       -> delayxms                      0      0     88
       -> delayxms                      0      0     88
       -> delayxms                      0      0     88
       -> delayxms                      0      0     88
       -> delayxms                      0      0     88
       -> delayxms                      0      0     88
       -> delayxms                      0      0     88
       -> test_fig                      0      0     88
       -> FINGERPRINT_Cmd_Get_Img       0      0     88
       -> FINGERPRINT_Cmd_Img_To_Buffer1
                                        0      0     88
       -> FINGERPRINT_Cmd_Search_Finger
                                        0      0     88
       -> zb_SendDataRequest            0      0     98
       -> HalLedSet                     0      0     88
       -> delayxms                      0      0     88
       -> zb_SendDataRequest            0      0     98
       -> FINGERPRINT_Cmd_Delete_Model
                                        0      0     88
       -> HalLedSet                     0      0     88
       -> zb_SendDataRequest            0      0     98
       -> delayxms                      0      0     88
       -> test_fig                      0      0     88
       -> FINGERPRINT_Cmd_Get_Img       0      0     88
       -> FINGERPRINT_Cmd_Img_To_Buffer1
                                        0      0     88
       -> FINGERPRINT_Cmd_Get_Img       0      0     88
       -> FINGERPRINT_Cmd_Img_To_Buffer2
                                        0      0     88
       -> FINGERPRINT_Cmd_Reg_Model     0      0     88
       -> FINGERPRINT_Cmd_Save_Finger
                                        0      0     88
       -> HalLedSet                     0      0     88
       -> zb_SendDataRequest            0      0     98
       -> HalLedSet                     0      0     88
       -> HalLedSet                     0      0     88
       -> zb_SendDataRequest            0      0     98
       -> zb_SendDataRequest            0      0     98
       -> osal_start_timerEx            0      0     88
     zb_ReceiveDataIndication           1      0     91
       -> HalLedSet                     0      0    164
       -> HalLedSet                     0      0    164
       -> zb_SendDataRequest            0      0    174
       -> zb_SendDataRequest            0      0    174
       -> paramRead                     0      0    164
       -> zb_SendDataRequest            0      0    174
       -> zb_SendDataRequest            0      0    174
     zb_SendDataConfirm                 0      0      0
     zb_StartConfirm                    0      0      9
       -> osal_start_timerEx            0      0     18


   Segment part sizes:

     Function/Label                           Bytes
     --------------                           -----
     U0CSR                                       1
     _A_TCON                                     1
     U0DBUF                                      1
     U0BAUD                                      1
     U0UCR                                       1
     U0GCR                                       1
     _A_IRCON2                                   1
     PERCFG                                      1
     P0SEL                                       1
     data_uart                                  18
     FP_Pack_Head                                6
     FP_Get_Img                                  6
     FP_Img_To_Buffer1                           7
     FP_Img_To_Buffer2                           7
     FP_Reg_Model                                6
     FP_Search                                  11
     FP_Delet_All_Model                          6
     FP_Save_Finger                              9
     FP_Delete_Model                            10
     index_command                               1
     myAppState                                  1
     myStartRetryDelay                           2
     myCheckCardDelay                            2
     Fpm10aon                                    1
     zhiwen_id                                   4
     z                                           1
     zb_InCmdList                                4
     zb_OutCmdList                               6
     zb_SimpleDesc                              12
     zb_HandleOsalEvent                        872
     ?Subroutine12                               2
     ??Subroutine20_0                            8
     ??Subroutine21_0                            6
     ?Subroutine8                               10
     ?Subroutine17                               8
     ?Subroutine4                               15
     ?Subroutine3                               21
     ?Subroutine9                                7
     ?Subroutine0                                3
     ??Subroutine23_0                            5
     ?Subroutine13                               8
     zb_HandleKeys                               7
     ?Subroutine1                                7
     zb_StartConfirm                            41
     zb_SendDataConfirm                          3
     zb_BindConfirm                              3
     zb_AllowBindConfirm                         3
     zb_FindDeviceConfirm                        3
     zb_HanderMsg                                3
     zb_ReceiveDataIndication                  549
     ?Subroutine15                              22
     ?Subroutine14                               9
     paramRead                                 327
     ?Subroutine10                               6
     ?Subroutine18                               1
     ??Subroutine22_0                            7
     rfid_uart_init                             23
     rfid_uart_send                             11
     rfid_uart_recv                             14
     FINGERPRINT_Cmd_Get_Img                    39
     ?Subroutine7                                6
     ?Subroutine2                               11
     ??Subroutine24_0                            6
     ?Subroutine19                              22
     ?Subroutine16                              11
     FINGERPRINT_Cmd_Delete_All_Model
                                                39
     FINGERPRINT_Cmd_Img_To_Buffer1             39
     ?Subroutine5                                6
     FINGERPRINT_Cmd_Img_To_Buffer2             39
     FINGERPRINT_Cmd_Reg_Model                  39
     FINGERPRINT_Cmd_Save_Finger                97
     ?Subroutine6                                4
     FINGERPRINT_Cmd_Search_Finger              44
     test_fig                                   11
     FINGERPRINT_Cmd_Delete_Model              135
     delayxms                                   51
     ?Subroutine11                              14
     ?<Initializer for FP_Save_Finger>           9
     ?<Initializer for FP_Delete_Model>         10
     ?<Initializer for myStartRetryDelay>        2
     ?<Initializer for myCheckCardDelay>         2
     ?<Initializer for Fpm10aon>                 1
     ??zb_HandleOsalEvent?relay                  6
     ??zb_HandleKeys?relay                       6
     ??zb_StartConfirm?relay                     6
     ??zb_SendDataConfirm?relay                  6
     ??zb_BindConfirm?relay                      6
     ??zb_AllowBindConfirm?relay                 6
     ??zb_FindDeviceConfirm?relay                6
     ??zb_HanderMsg?relay                        6
     ??zb_ReceiveDataIndication?relay            6
     ??paramRead?relay                           6
     ??rfid_uart_init?relay                      6
     ??rfid_uart_send?relay                      6
     ??rfid_uart_recv?relay                      6
     ??FINGERPRINT_Cmd_Get_Img?relay             6
     ??FINGERPRINT_Cmd_Delete_All_Model?relay    6
     ??FINGERPRINT_Cmd_Img_To_Buffer1?relay      6
     ??FINGERPRINT_Cmd_Img_To_Buffer2?relay      6
     ??FINGERPRINT_Cmd_Reg_Model?relay           6
     ??FINGERPRINT_Cmd_Save_Finger?relay         6
     ??FINGERPRINT_Cmd_Search_Finger?relay       6
     ??test_fig?relay                            6
     ??FINGERPRINT_Cmd_Delete_Model?relay        6
     ??delayxms?relay                            6

 
 2 617 bytes in segment BANKED_CODE
   138 bytes in segment BANK_RELAYS
     9 bytes in segment SFR_AN
    24 bytes in segment XDATA_I
    24 bytes in segment XDATA_ID
    71 bytes in segment XDATA_ROM_C
    25 bytes in segment XDATA_Z
 
 2 779 bytes of CODE  memory
    71 bytes of CONST memory
     0 bytes of DATA  memory (+ 9 bytes shared)
    49 bytes of XDATA memory

Errors: none
Warnings: 2
