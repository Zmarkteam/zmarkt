###############################################################################
#                                                                             #
# IAR C/C++ Compiler V7.60.1.40026 for 8051             01/Nov/2011  09:32:08 #
# Copyright (C) 2004-2010 IAR Systems AB.                                     #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530      #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\Source\SimpleRfid.c                   #
#    Command line       =  -f "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530  #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wC #
#                          oord.cfg" (-DCPU32MHZ -DROOT=__near_func           #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530  #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wC #
#                          onfig.cfg" (-DZIGBEEPRO -DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "H:\3gbox\zigbee\zigbee×ÛºÏ #
#                          Ó¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack               #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\Sour #
#                          ce\SimpleRfid.c" -D HOLD_AUTO_START -D             #
#                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D       #
#                          xNV_RESTORE -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC  #
#                          -D MT_SYS_FUNC -D MT_UTIL_FUNC -D xMT_SAPI_FUNC    #
#                          -D xMT_SAPI_CB_FUNC -D xMT_ZDO_FUNC -D             #
#                          xMT_ZDO_CB_FUNC -lC "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦Ó #
#                          ÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                  #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\SimpleCoordinator\List\" -lA                  #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\SimpleCoordinator\List\"     #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\SimpleCoordinator\Obj\" -e   #
#                          --require_prototypes --no_code_motion --debug      #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "H:\3gbox\zigbee\zigbee×Ûº #
#                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack              #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\ #
#                          cc2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstac #
#                          k\Samples\SimpleApp\CC2530DB\..\Source\" -I        #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"    #
#                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530  #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\ha #
#                          l\include\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾ #
#                          ´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                       #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\hal\target\CC2530EB #
#                          \" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc25 #
#                          30 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sa #
#                          mples\SimpleApp\CC2530DB\..\..\..\..\..\Components #
#                          \mac\include\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑ #
#                          ÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                    #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\high_level\"    #
#                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530  #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\" -I "H:\3gbox\zigbee\zigbee×ÛºÏ #
#                          Ó¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack               #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mac\low_level\srf04 #
#                          \single_chip\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑ #
#                          ÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                    #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\mt\" -I             #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\os #
#                          al\include\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ #
#                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                      #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\osal\mcu\ccsoc\"    #
#                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530  #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\se #
#                          rvices\saddr\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑ #
#                          ÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                    #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\services\sdata\"    #
#                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530  #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\af\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂ #
#                          ë\cc2530 ×ÛºÏÊµÑé z-stack                          #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\nwk\" -I      #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sapi\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´ #
#                          úÂë\cc2530 ×ÛºÏÊµÑé z-stack                        #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\sec\" -I      #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sys\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´ú #
#                          Âë\cc2530 ×ÛºÏÊµÑé z-stack                         #
#                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC25 #
#                          30DB\..\..\..\..\..\Components\stack\zdo\" -I      #
#                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc #
#                          2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\ #
#                          Samples\SimpleApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\f8w\" -I "D:\Program Files\IAR             #
#                          Systems\Embedded Workbench 5.4\8051\INC\" -I       #
#                          "D:\Program Files\IAR Systems\Embedded Workbench   #
#                          5.4\8051\INC\CLIB\" -Ohz                           #
#    List file          =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530      #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\SimpleCoordinator\List\Simpl #
#                          eRfid.lst                                          #
#    Object file        =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530      #
#                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sampl #
#                          es\SimpleApp\CC2530DB\SimpleCoordinator\Obj\Simple #
#                          Rfid.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\Source\SimpleRfid.c
      1          
      2          /**************************************************************************************************
      3            Filename:       SimpleSwitch.c
      4            Revised:        $Date: 2007-10-27 17:16:54 -0700 (Sat, 27 Oct 2007) $
      5            Revision:       $Revision: 15793 $
      6          
      7            Description:    Sample application for a simple light switch utilizing the Simple API.
      8          
      9           
     10            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com. 
     39          **************************************************************************************************/
     40          
     41          /******************************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "sapi.h"
     47          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     48          #include "hal_led.h"
     49          #include "hal_adc.h"
     50          #include "hal_mcu.h"
     51          #include "SimpleApp.h"
     52          
     53          
     54          #include "mt.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          // Application States
     61          #define APP_INIT                           0    // Initial state
     62          #define APP_START                          1    // Sensor has joined network
     63          #define APP_BOUND                          2    // Sensor is bound to collector
     64          
     65          // Application osal event identifiers
     66          // Bit mask of events ( from 0x0000 to 0x00FF )
     67          #define MY_START_EVT                0x0001
     68          #define MY_REPORT_EVT               0x0002
     69          
     70          /*********************************************************************
     71           * TYPEDEFS
     72           */
     73          
     74          /*********************************************************************
     75           * LOCAL VARIABLES
     76           */
     77          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          static uint8 myAppState = APP_INIT;
   \                     myAppState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     80          static uint16 myStartRetryDelay = 10000;      // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
     81          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          static uint16 myCheckCardDelay = 250;         //milliseconds
   \                     myCheckCardDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myCheckCardDelay>`
   \   000002                REQUIRE __INIT_XDATA_I
     83          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          static uint8 rfidOn = 1;
   \                     rfidOn:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for rfidOn>`
   \   000001                REQUIRE __INIT_XDATA_I
     85          /*********************************************************************
     86           * GLOBAL VARIABLES
     87           */
     88          
     89          // Inputs and Outputs for Switch device
     90          #define NUM_IN_CMD_SENSOR                 2
     91          #define NUM_OUT_CMD_SENSOR                3
     92          
     93          

   \                                 In  segment XDATA_ROM_C, align 1
     94          const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   01000200     DW 1, 2
     95          {
     96            ID_CMD_READ_REQ,
     97            ID_CMD_WRITE_REQ,
     98          };

   \                                 In  segment XDATA_ROM_C, align 1
     99          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   01800280     DW 32769, 32770, 3
   \            0300    
    100          {
    101              ID_CMD_READ_RES,
    102              ID_CMD_WRITE_RES,
    103              ID_CMD_REPORT,
    104          };
    105          
    106          
    107          
    108          
    109          
    110          // Define SimpleDescriptor for Switch device

   \                                 In  segment XDATA_ROM_C, align 1
    111          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   100F0300     DW 3856, 3
   \   000005   0102         DB 1, 2
   \   000007   ....         DW zb_InCmdList
   \   000009   03           DB 3
   \   00000A   ....         DW zb_OutCmdList
    112          {
    113            MY_ENDPOINT_ID,             //  Endpoint
    114            MY_PROFILE_ID,              //  Profile ID
    115            DEV_ID_SENSOR,              //  Device ID
    116            DEVICE_VERSION_SENSOR,      //  Device Version
    117            0,                          //  Reserved
    118            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    119            (cId_t *) zb_InCmdList,             //  Input Command List
    120            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    121            (cId_t *) zb_OutCmdList     //  Output Command List
    122          };
    123          
    124          /********************************************************
    125           *
    126           */
    127          void zb_HanderMsg(osal_event_hdr_t *msg);
    128          
    129          /*********************************************************************
    130           * LOCAL FUNCTIONS
    131           */
    132          
    133          
    134          static int paramWrite(uint16 pid, byte *dat);
    135          static int paramRead(uint16 pid, byte *dat);
    136          
    137          
    138          void rfid_uart_init(void);
    139          void rfid_uart_send(unsigned char ch);
    140          int  rfid_uart_recv(void);
    141          void rfid_commands(char *cmd, int len);
    142          char datxor(char *dat, int len);
    143          int rfid_id(char *id);
    144          
    145          /*****************************************************************************
    146           * @fn          zb_HandleOsalEvent
    147           *
    148           * @brief       The zb_HandleOsalEvent function is called by the operating
    149           *              system when a task event is set
    150           *
    151           * @param       event - Bitmask containing the events that have been set
    152           *
    153           * @return      none
    154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    155          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    156          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    157           
    158             if (event & ZB_ENTRY_EVENT) {
   \   00000E   7410         MOV     A,#0x10
   \   000010   5F           ANL     A,R7
   \   000011   F9           MOV     R1,A
   \   000012   E4           CLR     A
   \   000013   7001         JNZ     ??zb_HandleOsalEvent_0
   \   000015   E9           MOV     A,R1
   \                     ??zb_HandleOsalEvent_0:
   \   000016   6058         JZ      ??CrossCallReturnLabel_0
    159                  uint8 startOptions;
    160                  uint8 logicalType;
    161            
    162                  zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000018                ; Setup parameters for call to function zb_ReadConfiguration
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7987         MOV     R1,#-0x79
   \   000026   12....       LCALL   ??zb_ReadConfiguration?relay
    163                  if ( logicalType != ZG_DEVICETYPE_ENDDEVICE )
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6402         XRL     A,#0x2
   \   000032   600E         JZ      ??zb_HandleOsalEvent_1
    164                  //if ( logicalType != ZG_DEVICETYPE_ROUTER )
    165                  //if ( logicalType != ZG_DEVICETYPE_COORDINATOR )
    166                  {
    167                    logicalType = ZG_DEVICETYPE_ENDDEVICE;
   \   000034   7402         MOV     A,#0x2
   \   000036   F0           MOVX    @DPTR,A
    168                    //logicalType = ZG_DEVICETYPE_ROUTER;
    169                    //logicalType = ZG_DEVICETYPE_COORDINATOR;
    170                    zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
   \   000037                ; Setup parameters for call to function zb_WriteConfiguration
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   7987         MOV     R1,#-0x79
   \   00003F   12....       LCALL   ??zb_WriteConfiguration?relay
    171                  }
    172          
    173                  // Do more configuration if necessary and then restart device with auto-start bit set
    174                  // write endpoint to simple desc...dont pass it in start req..then reset
    175                  zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \                     ??zb_HandleOsalEvent_1:
   \   000042                ; Setup parameters for call to function zb_ReadConfiguration
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AC82         MOV     R4,DPL
   \   000049   AD83         MOV     R5,DPH
   \   00004B   7A01         MOV     R2,#0x1
   \   00004D   7903         MOV     R1,#0x3
   \   00004F   12....       LCALL   ??zb_ReadConfiguration?relay
    176                  if (startOptions != ZCD_STARTOPT_AUTO_START) {
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6404         XRL     A,#0x4
   \   00005A   600E         JZ      ??zb_HandleOsalEvent_2
    177                    startOptions = ZCD_STARTOPT_AUTO_START;
   \   00005C   7404         MOV     A,#0x4
   \   00005E   F0           MOVX    @DPTR,A
    178                    zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   00005F                ; Setup parameters for call to function zb_WriteConfiguration
   \   00005F   AC82         MOV     R4,DPL
   \   000061   AD83         MOV     R5,DPH
   \   000063   7A01         MOV     R2,#0x1
   \   000065   7903         MOV     R1,#0x3
   \   000067   12....       LCALL   ??zb_WriteConfiguration?relay
    179                  } 
    180                  
    181                  rfid_uart_init();
   \                     ??zb_HandleOsalEvent_2:
   \   00006A                ; Setup parameters for call to function rfid_uart_init
   \   00006A   12....       LCALL   ??rfid_uart_init?relay
    182                  
    183                  osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
   \   00006D                ; Setup parameters for call to function osal_start_timerEx
   \   00006D   12....       LCALL   ?Subroutine3 & 0xFFFF
    184            }
    185            
    186            if ( event & MY_START_EVT )
   \                     ??CrossCallReturnLabel_0:
   \   000070   EE           MOV     A,R6
   \   000071   A2E0         MOV     C,0xE0 /* A   */.0
   \   000073   5003         JNC     ??zb_HandleOsalEvent_3
    187            {  
    188              zb_StartRequest();
   \   000075                ; Setup parameters for call to function zb_StartRequest
   \   000075   12....       LCALL   ??zb_StartRequest?relay
    189            }
    190          
    191            if (event & MY_REPORT_EVT) {
   \                     ??zb_HandleOsalEvent_3:
   \   000078   EE           MOV     A,R6
   \   000079   5402         ANL     A,#0x2
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??CrossCallReturnLabel_1 & 0xFFFF
    192          
    193              if (rfidOn) {
   \   000080   90....       MOV     DPTR,#rfidOn
   \   000083   E0           MOVX    A,@DPTR
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??zb_HandleOsalEvent_4 & 0xFFFF
    194                static char card = 0;
    195                static char id[4];
    196                
    197                //rfid_uart_init();
    198                
    199                if (rfid_id(id)) {
   \   000089                ; Setup parameters for call to function rfid_id
   \   000089   7A..         MOV     R2,#(??id & 0xff)
   \   00008B   7B..         MOV     R3,#((??id >> 8) & 0xff)
   \   00008D   12....       LCALL   ??rfid_id?relay
   \   000090   EA           MOV     A,R2
   \   000091   7001         JNZ     ??zb_HandleOsalEvent_5
   \   000093   EB           MOV     A,R3
   \                     ??zb_HandleOsalEvent_5:
   \   000094   90....       MOV     DPTR,#??card
   \   000097   7003         JNZ     $+5
   \   000099   02....       LJMP    ??zb_HandleOsalEvent_6 & 0xFFFF
    200                  if (card == 0) {
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6003         JZ      $+5
   \   00009F   02....       LJMP    ??zb_HandleOsalEvent_7 & 0xFFFF
    201                    card = 1;
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   F0           MOVX    @DPTR,A
    202                    HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   0000A5                ; Setup parameters for call to function HalLedSet
   \   0000A5   FA           MOV     R2,A
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??HalLedSet?relay
    203                    if (myAppState == APP_START) {
   \   0000AA   90....       MOV     DPTR,#myAppState
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6401         XRL     A,#0x1
   \   0000B0   6003         JZ      $+5
   \   0000B2   02....       LJMP    ??zb_HandleOsalEvent_7 & 0xFFFF
    204                      char dat[6];
    205                      dat[0] = 0x08;
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   7408         MOV     A,#0x8
   \   0000BC   F0           MOVX    @DPTR,A
    206                      dat[1] = 0x10;
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   7410         MOV     A,#0x10
   \   0000C4   F0           MOVX    @DPTR,A
    207                      dat[2] = id[0];
   \   0000C5   90....       MOV     DPTR,#??id
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C0E0         PUSH    A
   \   0000CB   7404         MOV     A,#0x4
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
    208                      dat[3] = id[1];
   \   0000D3   90....       MOV     DPTR,#(??id + 1)
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C0E0         PUSH    A
   \   0000D9   7405         MOV     A,#0x5
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
    209                      dat[4] = id[2];
   \   0000E1   90....       MOV     DPTR,#(??id + 2)
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   C0E0         PUSH    A
   \   0000E7   7406         MOV     A,#0x6
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   D0E0         POP     A
   \   0000EE   F0           MOVX    @DPTR,A
    210                      dat[5] = id[3];
   \   0000EF   90....       MOV     DPTR,#(??id + 3)
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   C0E0         PUSH    A
   \   0000F5   7407         MOV     A,#0x7
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   D0E0         POP     A
   \   0000FC   F0           MOVX    @DPTR,A
    211                      zb_SendDataRequest(0, ID_CMD_REPORT, 6, dat, 0, AF_ACK_REQUEST, 0 );
                                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000FD                ; Setup parameters for call to function zb_SendDataRequest
   \   0000FD   75..00       MOV     ?V0 + 0,#0x0
   \   000100   78..         MOV     R0,#?V0 + 0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000105   75..10       MOV     ?V0 + 0,#0x10
   \   000108   78..         MOV     R0,#?V0 + 0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010D   75..00       MOV     ?V0 + 0,#0x0
   \   000110   78..         MOV     R0,#?V0 + 0
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000115   7405         MOV     A,#0x5
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   8582..       MOV     ?V0 + 0,DPL
   \   00011D   8583..       MOV     ?V0 + 1,DPH
   \   000120   78..         MOV     R0,#?V0 + 0
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   7906         MOV     R1,#0x6
   \   000127   7C03         MOV     R4,#0x3
   \   000129   7D00         MOV     R5,#0x0
   \   00012B   7A00         MOV     R2,#0x0
   \   00012D   7B00         MOV     R3,#0x0
   \   00012F   12....       LCALL   ??zb_SendDataRequest?relay
   \   000132   7405         MOV     A,#0x5
   \   000134   12....       LCALL   ?DEALLOC_XSTACK8
    212                    }
    213                  }
    214                  myCheckCardDelay = 1000;
   \                     ??zb_HandleOsalEvent_7:
   \   000137   90....       MOV     DPTR,#myCheckCardDelay
   \   00013A   74E8         MOV     A,#-0x18
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   7403         MOV     A,#0x3
   \   000140   8013         SJMP    ??zb_HandleOsalEvent_8
    215                } else {
    216                  if (card) {
   \                     ??zb_HandleOsalEvent_6:
   \   000142   E0           MOVX    A,@DPTR
   \   000143   6008         JZ      ??zb_HandleOsalEvent_9
    217                    card = 0;
   \   000145   E4           CLR     A
   \   000146   F0           MOVX    @DPTR,A
    218                    HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000147                ; Setup parameters for call to function HalLedSet
   \   000147   FA           MOV     R2,A
   \   000148   7901         MOV     R1,#0x1
   \   00014A   12....       LCALL   ??HalLedSet?relay
    219                  }
    220                  myCheckCardDelay = 250;
   \                     ??zb_HandleOsalEvent_9:
   \   00014D   90....       MOV     DPTR,#myCheckCardDelay
   \   000150   74FA         MOV     A,#-0x6
   \   000152   F0           MOVX    @DPTR,A
   \   000153   A3           INC     DPTR
   \   000154   E4           CLR     A
   \                     ??zb_HandleOsalEvent_8:
   \   000155   F0           MOVX    @DPTR,A
    221                }
    222              }   
    223              osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myCheckCardDelay );
   \                     ??zb_HandleOsalEvent_4:
   \   000156                ; Setup parameters for call to function osal_start_timerEx
   \   000156   12....       LCALL   ?Subroutine3 & 0xFFFF
    224            }
    225            
    226            
    227            
    228            
    229            
    230          }
   \                     ??CrossCallReturnLabel_1:
   \   000159   7408         MOV     A,#0x8
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015E                REQUIRE ?Subroutine0
   \   00015E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#myCheckCardDelay
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   7A02         MOV     R2,#0x2
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   90....       MOV     DPTR,#sapi_TaskID
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ??osal_start_timerEx?relay
   \   000014   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??card:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??id:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    231          /*********************************************************************
    232           * @fn      zb_HandleKeys
    233           *
    234           * @brief   Handles all key events for this device.
    235           *
    236           * @param   shift - true if in shift/alt.
    237           * @param   keys - bit field for key events. Valid entries:
    238           *                 EVAL_SW4
    239           *                 EVAL_SW3
    240           *                 EVAL_SW2
    241           *                 EVAL_SW1
    242           *
    243           * @return  none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    246          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    247           
    248          }
   \   000000   02....       LJMP    ?BRET
    249          /******************************************************************************
    250           * @fn          zb_StartConfirm
    251           *
    252           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    253           *              after a start request operation completes
    254           *
    255           * @param       status - The status of the start operation.  Status of
    256           *                       ZB_SUCCESS indicates the start operation completed
    257           *                       successfully.  Else the status is an error code.
    258           *
    259           * @return      none
    260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    261          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    262          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    263            if ( status == ZB_SUCCESS )
   \   000006   7008         JNZ     ??zb_StartConfirm_0
    264            {
    265              myAppState = APP_START;
   \   000008   7401         MOV     A,#0x1
   \   00000A   90....       MOV     DPTR,#myAppState
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   8014         SJMP    ??zb_StartConfirm_1
    266              // Set event to bind to a collector
    267              //osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
    268            }
    269            else
    270            {
    271              // Try joining again later with a delay
    272              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   000010                ; Setup parameters for call to function osal_start_timerEx
   \   000010   90....       MOV     DPTR,#myStartRetryDelay
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FC           MOV     R4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FD           MOV     R5,A
   \   000018   7A01         MOV     R2,#0x1
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#sapi_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??osal_start_timerEx?relay
    273            }
    274          }
   \                     ??zb_StartConfirm_1:
   \   000024                REQUIRE ?Subroutine1
   \   000024                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    275          /******************************************************************************
    276           * @fn          zb_SendDataConfirm
    277           *
    278           * @brief       The zb_SendDataConfirm callback function is called by the
    279           *              ZigBee after a send data operation completes
    280           *
    281           * @param       handle - The handle identifying the data transmission.
    282           *              status - The status of the operation.
    283           *
    284           * @return      none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    287          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    288            if ( status != ZSuccess )
    289            {
    290              // Remove bindings to the existing collector
    291            }
    292            else
    293            {
    294              // send data ??
    295            }
    296          }
   \   000000   02....       LJMP    ?BRET
    297          /******************************************************************************
    298           * @fn          zb_BindConfirm
    299           *
    300           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    301           *              after a bind operation completes.
    302           *
    303           * @param       commandId - The command ID of the binding being confirmed.
    304           *              status - The status of the bind operation.
    305           *
    306           * @return      none
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    309          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    310          
    311          
    312          }
   \   000000   02....       LJMP    ?BRET
    313          /******************************************************************************
    314           * @fn          zb_AllowBindConfirm
    315           *
    316           * @brief       Indicates when another device attempted to bind to this device
    317           *
    318           * @param
    319           *
    320           * @return      none
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    323          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    324          }
   \   000000   02....       LJMP    ?BRET
    325          /******************************************************************************
    326           * @fn          zb_FindDeviceConfirm
    327           *
    328           * @brief       The zb_FindDeviceConfirm callback function is called by the
    329           *              ZigBee stack when a find device operation completes.
    330           *
    331           * @param       searchType - The type of search that was performed.
    332           *              searchKey - Value that the search was executed on.
    333           *              result - The result of the search.
    334           *
    335           * @return      none
    336           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    337          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    338          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    339          }
   \   000000   02....       LJMP    ?BRET
    340          
    341          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          void zb_HanderMsg(osal_event_hdr_t *msg)
   \                     zb_HanderMsg:
    343          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    344          }
   \   000000   02....       LJMP    ?BRET
    345          
    346          /******************************************************************************
    347           * @fn          zb_ReceiveDataIndication
    348           *
    349           * @brief       The zb_ReceiveDataIndication callback function is called
    350           *              asynchronously by the ZigBee stack to notify the application
    351           *              when data is received from a peer device.
    352           *
    353           * @param       source - The short address of the peer device that sent the data
    354           *              command - The commandId associated with the data
    355           *              len - The number of bytes in the pData parameter
    356           *              pData - The data sent by the peer device
    357           *
    358           * @return      none
    359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    361          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   7452         MOV     A,#0x52
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 4,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 5,A
   \   00001E   7454         MOV     A,#0x54
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 1,A
    362            int i;
    363            uint16 pid;
    364            byte dat[64];
    365            byte rlen = 1;
   \   00002A   75..01       MOV     ?V0 + 6,#0x1
    366            int ret;
    367            
    368            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   00002D                ; Setup parameters for call to function HalLedSet
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7901         MOV     R1,#0x1
   \   000031   12....       LCALL   ??HalLedSet?relay
    369            HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK ); 
   \   000034                ; Setup parameters for call to function HalLedSet
   \   000034   7A02         MOV     R2,#0x2
   \   000036   7901         MOV     R1,#0x1
   \   000038   12....       LCALL   ??HalLedSet?relay
    370            switch (command) {
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zb_ReceiveDataIndication>_0`:
   \   000040   0100         DW        1
   \   000042   01           DB        1
   \   000043   ....         DW        ??zb_ReceiveDataIndication_0
   \   000045   ....         DW        ??zb_ReceiveDataIndication_1
   \   000047   ....         DW        ??zb_ReceiveDataIndication_2
    371            case ID_CMD_WRITE_REQ:
    372              for (i=0; i<len; i+=2) {
   \                     ??zb_ReceiveDataIndication_2:
   \   000049   75..00       MOV     ?V0 + 2,#0x0
   \   00004C   75..00       MOV     ?V0 + 3,#0x0
   \   00004F   8019         SJMP    ??zb_ReceiveDataIndication_3
    373                pid = pData[i]<<8 | pData[i+1];
    374                ret = paramWrite(pid, pData+2);
   \                     ??zb_ReceiveDataIndication_4:
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   90....       MOV     DPTR,#rfidOn
   \   00005D   F0           MOVX    @DPTR,A
    375                if (ret <= 0) {
    376                  dat[0] = 1;
    377                  zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
    378                  return;
    379                } 
    380                i += ret;
   \   00005E   E5..         MOV     A,?V0 + 2
   \   000060   2403         ADD     A,#0x3
   \   000062   F5..         MOV     ?V0 + 2,A
   \   000064   E5..         MOV     A,?V0 + 3
   \   000066   3400         ADDC    A,#0x0
   \   000068   F5..         MOV     ?V0 + 3,A
   \                     ??zb_ReceiveDataIndication_3:
   \   00006A   C3           CLR     C
   \   00006B   E5..         MOV     A,?V0 + 2
   \   00006D   95..         SUBB    A,?V0 + 4
   \   00006F   E5..         MOV     A,?V0 + 3
   \   000071   95..         SUBB    A,?V0 + 5
   \   000073   5053         JNC     ??zb_ReceiveDataIndication_5
   \   000075   E5..         MOV     A,?V0 + 0
   \   000077   25..         ADD     A,?V0 + 2
   \   000079   F582         MOV     DPL,A
   \   00007B   E5..         MOV     A,?V0 + 1
   \   00007D   35..         ADDC    A,?V0 + 3
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F8           MOV     R0,A
   \   000086   7401         MOV     A,#0x1
   \   000088   68           XRL     A,R0
   \   000089   7003         JNZ     ??zb_ReceiveDataIndication_6
   \   00008B   7408         MOV     A,#0x8
   \   00008D   69           XRL     A,R1
   \                     ??zb_ReceiveDataIndication_6:
   \   00008E   60C1         JZ      ??zb_ReceiveDataIndication_4
   \   000090   7401         MOV     A,#0x1
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   F0           MOVX    @DPTR,A
   \   000099                ; Setup parameters for call to function zb_SendDataRequest
   \   000099   75..00       MOV     ?V0 + 0,#0x0
   \                     ??zb_ReceiveDataIndication_7:
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   75..10       MOV     ?V0 + 0,#0x10
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A9   75..00       MOV     ?V0 + 0,#0x0
   \   0000AC   78..         MOV     R0,#?V0 + 0
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B1   7403         MOV     A,#0x3
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   8582..       MOV     ?V0 + 0,DPL
   \   0000B9   8583..       MOV     ?V0 + 1,DPH
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   7901         MOV     R1,#0x1
   \   0000C3   7C02         MOV     R4,#0x2
   \   0000C5   02....       LJMP    ??zb_ReceiveDataIndication_8 & 0xFFFF
    381              }
    382              dat[0] = 0;
   \                     ??zb_ReceiveDataIndication_5:
   \   0000C8   E4           CLR     A
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   F0           MOVX    @DPTR,A
    383              zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
   \   0000D0                ; Setup parameters for call to function zb_SendDataRequest
   \   0000D0   F5..         MOV     ?V0 + 0,A
   \   0000D2   80C8         SJMP    ??zb_ReceiveDataIndication_7
    384              break;
    385            case ID_CMD_READ_REQ:
    386              for (i=0; i<len; i+=2) {
   \                     ??zb_ReceiveDataIndication_1:
   \   0000D4   75..00       MOV     ?V0 + 2,#0x0
   \   0000D7   75..00       MOV     ?V0 + 3,#0x0
   \   0000DA   8011         SJMP    ??zb_ReceiveDataIndication_9
    387                pid = pData[i]<<8 | pData[i+1];
    388                dat[rlen++] = pData[i];
    389                dat[rlen++] = pData[i+1];
    390                ret = paramRead(pid, dat+rlen);
    391                if (ret <= 0) {
    392                  dat[0] = 1;
    393                  zb_SendDataRequest( source, ID_CMD_READ_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
    394                  return;
    395                }
    396                rlen += ret;
   \                     ??zb_ReceiveDataIndication_10:
   \   0000DC   E8           MOV     A,R0
   \   0000DD   25..         ADD     A,?V0 + 6
   \   0000DF   F5..         MOV     ?V0 + 6,A
   \   0000E1   E5..         MOV     A,?V0 + 2
   \   0000E3   2402         ADD     A,#0x2
   \   0000E5   F5..         MOV     ?V0 + 2,A
   \   0000E7   E5..         MOV     A,?V0 + 3
   \   0000E9   3400         ADDC    A,#0x0
   \   0000EB   F5..         MOV     ?V0 + 3,A
   \                     ??zb_ReceiveDataIndication_9:
   \   0000ED   C3           CLR     C
   \   0000EE   E5..         MOV     A,?V0 + 2
   \   0000F0   95..         SUBB    A,?V0 + 4
   \   0000F2   E5..         MOV     A,?V0 + 3
   \   0000F4   95..         SUBB    A,?V0 + 5
   \   0000F6   4003         JC      $+5
   \   0000F8   02....       LJMP    ??zb_ReceiveDataIndication_11 & 0xFFFF
   \   0000FB   E5..         MOV     A,?V0 + 0
   \   0000FD   25..         ADD     A,?V0 + 2
   \   0000FF   F8           MOV     R0,A
   \   000100   E5..         MOV     A,?V0 + 1
   \   000102   35..         ADDC    A,?V0 + 3
   \   000104   F9           MOV     R1,A
   \   000105   E8           MOV     A,R0
   \   000106   FC           MOV     R4,A
   \   000107   E9           MOV     A,R1
   \   000108   FD           MOV     R5,A
   \   000109   8C82         MOV     DPL,R4
   \   00010B   8D83         MOV     DPH,R5
   \   00010D   A3           INC     DPTR
   \   00010E   A882         MOV     R0,DPL
   \   000110   A983         MOV     R1,DPH
   \   000112   8C82         MOV     DPL,R4
   \   000114   8D83         MOV     DPH,R5
   \   000116   E0           MOVX    A,@DPTR
   \   000117   FB           MOV     R3,A
   \   000118   8882         MOV     DPL,R0
   \   00011A   8983         MOV     DPH,R1
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FA           MOV     R2,A
   \   00011E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000121   EB           MOV     A,R3
   \   000122   F0           MOVX    @DPTR,A
   \   000123   05..         INC     ?V0 + 6
   \   000125   8882         MOV     DPL,R0
   \   000127   8983         MOV     DPH,R1
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   C0E0         PUSH    A
   \   00012C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00012F   D0E0         POP     A
   \   000131   F0           MOVX    @DPTR,A
   \   000132   05..         INC     ?V0 + 6
   \   000134                ; Setup parameters for call to function paramRead
   \   000134   85....       MOV     ?V0 + 8,?V0 + 6
   \   000137   85..82       MOV     DPL,?XSP + 0
   \   00013A   85..83       MOV     DPH,?XSP + 1
   \   00013D   E582         MOV     A,DPL
   \   00013F   25..         ADD     A,?V0 + 8
   \   000141   FC           MOV     R4,A
   \   000142   E583         MOV     A,DPH
   \   000144   3400         ADDC    A,#0x0
   \   000146   FD           MOV     R5,A
   \   000147   12....       LCALL   ??paramRead?relay
   \   00014A   8A..         MOV     ?V0 + 8,R2
   \   00014C   A8..         MOV     R0,?V0 + 8
   \   00014E   C3           CLR     C
   \   00014F   E8           MOV     A,R0
   \   000150   9401         SUBB    A,#0x1
   \   000152   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000155   5085         JNC     ??zb_ReceiveDataIndication_10
   \   000157   7401         MOV     A,#0x1
   \   000159   85..82       MOV     DPL,?XSP + 0
   \   00015C   85..83       MOV     DPH,?XSP + 1
   \   00015F   F0           MOVX    @DPTR,A
   \   000160                ; Setup parameters for call to function zb_SendDataRequest
   \   000160   75..00       MOV     ?V0 + 0,#0x0
   \   000163   78..         MOV     R0,#?V0 + 0
   \   000165   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000168   75..10       MOV     ?V0 + 0,#0x10
   \   00016B   78..         MOV     R0,#?V0 + 0
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000170   75..00       MOV     ?V0 + 0,#0x0
   \   000173   78..         MOV     R0,#?V0 + 0
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000178   7403         MOV     A,#0x3
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   8582..       MOV     ?V0 + 0,DPL
   \   000180   8583..       MOV     ?V0 + 1,DPH
   \   000183   78..         MOV     R0,#?V0 + 0
   \   000185   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000188   7901         MOV     R1,#0x1
   \   00018A   8031         SJMP    ??zb_ReceiveDataIndication_12
    397              }
    398              dat[0] = 0;
   \                     ??zb_ReceiveDataIndication_11:
   \   00018C   E4           CLR     A
   \   00018D   85..82       MOV     DPL,?XSP + 0
   \   000190   85..83       MOV     DPH,?XSP + 1
   \   000193   F0           MOVX    @DPTR,A
    399              zb_SendDataRequest( source, ID_CMD_READ_RES, rlen, dat, 0, AF_ACK_REQUEST, 0 );
   \   000194                ; Setup parameters for call to function zb_SendDataRequest
   \   000194   F5..         MOV     ?V0 + 0,A
   \   000196   78..         MOV     R0,#?V0 + 0
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019B   75..10       MOV     ?V0 + 0,#0x10
   \   00019E   78..         MOV     R0,#?V0 + 0
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A3   75..00       MOV     ?V0 + 0,#0x0
   \   0001A6   78..         MOV     R0,#?V0 + 0
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AB   7403         MOV     A,#0x3
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   8582..       MOV     ?V0 + 0,DPL
   \   0001B3   8583..       MOV     ?V0 + 1,DPH
   \   0001B6   78..         MOV     R0,#?V0 + 0
   \   0001B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BB   A9..         MOV     R1,?V0 + 6
   \                     ??zb_ReceiveDataIndication_12:
   \   0001BD   7C01         MOV     R4,#0x1
   \                     ??zb_ReceiveDataIndication_8:
   \   0001BF   7D80         MOV     R5,#-0x80
   \   0001C1   EE           MOV     A,R6
   \   0001C2   FA           MOV     R2,A
   \   0001C3   EF           MOV     A,R7
   \   0001C4   FB           MOV     R3,A
   \   0001C5   12....       LCALL   ??zb_SendDataRequest?relay
   \   0001C8   7405         MOV     A,#0x5
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
    400              break;
    401            }
    402          }
   \                     ??zb_ReceiveDataIndication_0:
   \   0001CD   7440         MOV     A,#0x40
   \   0001CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D2   7F0A         MOV     R7,#0xa
   \   0001D4   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85....       MOV     ?V0 + 8,?V0 + 6
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E582         MOV     A,DPL
   \   00000B   25..         ADD     A,?V0 + 8
   \   00000D   F582         MOV     DPL,A
   \   00000F   E583         MOV     A,DPH
   \   000011   3400         ADDC    A,#0x0
   \   000013   F583         MOV     DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EB           MOV     A,R3
   \   000001   9400         SUBB    A,#0x0
   \   000003   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000005   65D0         XRL     A,PSW
   \   000007   33           RLC     A
   \   000008   22           RET
    403          
    404          
    405          /******************************************************************************
    406           * @fn          
    407           *
    408           * @brief       Reports temperature sensor reading
    409           *
    410           * @param
    411           *
    412           * @return
    413           */
    414          
    415          
    416          /******************************************************************************
    417           * @fn          myApp_ReadTemperature
    418           *
    419           * @brief       Reports temperature sensor reading
    420           *
    421           * @param
    422           *
    423           * @return
    424           */
    425          
    426          
    427          static int paramWrite(uint16 pid, byte *dat)
    428          {
    429            int len = 0;
    430            switch (pid) {
    431            case 0x0801:
    432              rfidOn = dat[0];
    433              len = 1;
    434              break;
    435            }
    436            return len;
    437          }
    438          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static int paramRead(uint16 pid, byte *dat)
   \                     paramRead:
    440          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    441            int len = 0;
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7D00         MOV     R5,#0x0
    442            switch (pid) {
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for paramRead>_0`:
   \   00001B   0000         DW        0
   \   00001D   0900         DW        9
   \   00001F   0100         DW        1
   \   000021   ....         DW        ??paramRead_0
   \   000023   0200         DW        2
   \   000025   ....         DW        ??paramRead_1
   \   000027   0300         DW        3
   \   000029   ....         DW        ??paramRead_2
   \   00002B   0400         DW        4
   \   00002D   ....         DW        ??paramRead_3
   \   00002F   0500         DW        5
   \   000031   ....         DW        ??paramRead_4
   \   000033   1400         DW        20
   \   000035   ....         DW        ??paramRead_5
   \   000037   1500         DW        21
   \   000039   ....         DW        ??paramRead_6
   \   00003B   0108         DW        2049
   \   00003D   ....         DW        ??paramRead_7
   \   00003F   1008         DW        2064
   \   000041   ....         DW        ??paramRead_8
   \   000043   ....         DW        ??paramRead_8
    443            case 0x0001:
    444              dat[0] = 0x11; dat[1] = 0x33;
   \                     ??paramRead_0:
   \   000045   7411         MOV     A,#0x11
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   7433         MOV     A,#0x33
   \                     ??paramRead_9:
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
    445              len = 2;
   \   000050   0C           INC     R4
   \   000051   02....       LJMP    ??paramRead_10 & 0xFFFF
    446              break;
    447            case 0x0002:
    448              dat[0] = 0x22; dat[1] = 0x44;
   \                     ??paramRead_1:
   \   000054   7422         MOV     A,#0x22
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   7444         MOV     A,#0x44
   \   00005D   80EF         SJMP    ??paramRead_9
    449              len = 2;
    450              break;
    451            case 0x0003:
    452              dat[0] = 0x00; dat[1] = 0x01;
   \                     ??paramRead_2:
   \   00005F   E4           CLR     A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   F0           MOVX    @DPTR,A
   \   000065   7401         MOV     A,#0x1
   \   000067   80E5         SJMP    ??paramRead_9
    453              len = 2;
    454              break;
    455            case 0x0004:
    456              dat[0] = dat[1] = dat[2] = dat[3] = dat[4] = dat[5] = 1;
   \                     ??paramRead_3:
   \   000069   7401         MOV     A,#0x1
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000076   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000079   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00007C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   F0           MOVX    @DPTR,A
    457              len = 6;
   \   000085   7C06         MOV     R4,#0x6
   \   000087   02....       LJMP    ??paramRead_8 & 0xFFFF
    458              break;
    459            case 0x0005:
    460              dat[0] = DEV_ID_RFID;
   \                     ??paramRead_4:
   \   00008A   7408         MOV     A,#0x8
   \   00008C   02....       LJMP    ??paramRead_11 & 0xFFFF
    461              len = 1;
    462              break;
    463              
    464            /* -----------  ÍøÂç²ÎÊý ------------------- */  
    465            case 0x0014: //macµØÖ·
    466               /*osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf ); rm by liren */
    467              ZMacGetReq( ZMacExtAddr, dat ); // add by liren
   \                     ??paramRead_5:
   \   00008F                ; Setup parameters for call to function ZMacGetReq
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   79E2         MOV     R1,#-0x1e
   \   000095   12....       LCALL   ??ZMacGetReq?relay
    468              // Outgoing extended address needs to be reversed
    469              MT_ReverseBytes( dat, Z_EXTADDR_LEN );
   \   000098                ; Setup parameters for call to function MT_ReverseBytes
   \   000098   7908         MOV     R1,#0x8
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   ??MT_ReverseBytes?relay
    470              len = Z_EXTADDR_LEN;
   \   0000A1   7C08         MOV     R4,#0x8
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   02....       LJMP    ??paramRead_8 & 0xFFFF
    471              break;
    472            case 0x0015:
    473            {
    474                uint8 assocCnt = 0;
   \                     ??paramRead_6:
   \   0000A8   E4           CLR     A
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   F0           MOVX    @DPTR,A
    475                uint16 *assocList;
    476                int i;
    477          #if defined(RTR_NWK) && !defined( NONWK )
    478              assocList = AssocMakeList( &assocCnt );
   \   0000B0                ; Setup parameters for call to function AssocMakeList
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   ??AssocMakeList?relay
   \   0000B7   8A..         MOV     ?V0 + 2,R2
   \   0000B9   8B..         MOV     ?V0 + 3,R3
    479          #else
    480              assocCnt = 0;
    481              assocList = NULL;
    482          #endif
    483              dat[0] = assocCnt;
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   F0           MOVX    @DPTR,A
    484              for (i=0; i<assocCnt&&i<16; i++) {
   \   0000C7   7A00         MOV     R2,#0x0
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   8039         SJMP    ??paramRead_12
    485                dat[1+2*i] = HI_UINT16(assocList[i]);
   \                     ??paramRead_13:
   \   0000CD   EA           MOV     A,R2
   \   0000CE   F8           MOV     R0,A
   \   0000CF   EB           MOV     A,R3
   \   0000D0   F9           MOV     R1,A
   \   0000D1   E8           MOV     A,R0
   \   0000D2   C3           CLR     C
   \   0000D3   33           RLC     A
   \   0000D4   F8           MOV     R0,A
   \   0000D5   E9           MOV     A,R1
   \   0000D6   33           RLC     A
   \   0000D7   F9           MOV     R1,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   28           ADD     A,R0
   \   0000DA   FC           MOV     R4,A
   \   0000DB   EF           MOV     A,R7
   \   0000DC   39           ADDC    A,R1
   \   0000DD   FD           MOV     R5,A
   \   0000DE   E5..         MOV     A,?V0 + 2
   \   0000E0   28           ADD     A,R0
   \   0000E1   F8           MOV     R0,A
   \   0000E2   E5..         MOV     A,?V0 + 3
   \   0000E4   39           ADDC    A,R1
   \   0000E5   F9           MOV     R1,A
   \   0000E6   8882         MOV     DPL,R0
   \   0000E8   8983         MOV     DPH,R1
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   8C82         MOV     DPL,R4
   \   0000EE   8D83         MOV     DPH,R5
   \   0000F0   A3           INC     DPTR
   \   0000F1   F0           MOVX    @DPTR,A
    486                dat[1+2*i+1] = LO_UINT16(assocList[i]);
   \   0000F2   8882         MOV     DPL,R0
   \   0000F4   8983         MOV     DPH,R1
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   8C82         MOV     DPL,R4
   \   0000F9   8D83         MOV     DPH,R5
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   F0           MOVX    @DPTR,A
    487              }
   \   0000FE   EA           MOV     A,R2
   \   0000FF   2401         ADD     A,#0x1
   \   000101   0A           INC     R2
   \   000102   EB           MOV     A,R3
   \   000103   3400         ADDC    A,#0x0
   \   000105   FB           MOV     R3,A
   \                     ??paramRead_12:
   \   000106   85..82       MOV     DPL,?XSP + 0
   \   000109   85..83       MOV     DPH,?XSP + 1
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F8           MOV     R0,A
   \   00010E   C3           CLR     C
   \   00010F   EA           MOV     A,R2
   \   000110   98           SUBB    A,R0
   \   000111   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000114   5009         JNC     ??paramRead_14
   \   000116   C3           CLR     C
   \   000117   EA           MOV     A,R2
   \   000118   9410         SUBB    A,#0x10
   \   00011A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00011D   40AE         JC      ??paramRead_13
    488              len = 1 + 2 * assocCnt;
   \                     ??paramRead_14:
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   C3           CLR     C
   \   000121   33           RLC     A
   \   000122   F8           MOV     R0,A
   \   000123   E4           CLR     A
   \   000124   33           RLC     A
   \   000125   F9           MOV     R1,A
   \   000126   7401         MOV     A,#0x1
   \   000128   28           ADD     A,R0
   \   000129   FC           MOV     R4,A
   \   00012A   E4           CLR     A
   \   00012B   39           ADDC    A,R1
   \   00012C   FD           MOV     R5,A
    489              break;
   \   00012D   800A         SJMP    ??paramRead_8
    490            }
    491           /* ------------------------------------ */
    492            case 0x0801:
    493              dat[0] = rfidOn;
   \                     ??paramRead_7:
   \   00012F   90....       MOV     DPTR,#rfidOn
   \   000132   E0           MOVX    A,@DPTR
   \                     ??paramRead_11:
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   F0           MOVX    @DPTR,A
    494              len = 1;
   \                     ??paramRead_10:
   \   000138   0C           INC     R4
    495              break;
    496            case 0x0810:  /* Ö÷¶¯¶ÁÈ¡¿¨Æ¬ID*/
    497              
    498              len = 0;
    499              break;
    500            }
    501            return len;
   \                     ??paramRead_8:
   \   000139   EC           MOV     A,R4
   \   00013A   FA           MOV     R2,A
   \   00013B   ED           MOV     A,R5
   \   00013C   FB           MOV     R3,A
   \   00013D   7401         MOV     A,#0x1
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142                REQUIRE ?Subroutine2
   \   000142                ; // Fall through to label ?Subroutine2
    502          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine10_0
   \   000001                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    503          
    504          
    505          
    506          
    507          
    508          
    509          
    510          #define RFID_UART 0 //1
    511          
    512          
    513          /*UART0Í¨ÐÅ³õÊ¼»¯
    514          -------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          void rfid_uart_init(void)
   \                     rfid_uart_init:
    516          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    517          #if 1
    518             P0SEL |=  0x0C;                  //³õÊ¼»¯UART0¶Ë¿Ú
   \   000000   43F30C       ORL     0xf3,#0xc
   \   000003   E5F3         MOV     A,0xf3
    519             PERCFG&= ~0x01;                  //Ñ¡ÔñUART0Îª¿ÉÑ¡Î»ÖÃÒ»
   \   000005   53F1FE       ANL     0xf1,#0xfe
    520          #else
    521             PERCFG |= 0x01;
    522             P1SEL |= 0xc0;
    523          #endif
    524             U0UCR = 0;                       //ÉèÖÃÍ£Ö¹Î»ÓëÆæÅ¼Ð£Ñé 
   \   000008   75C400       MOV     0xc4,#0x0
    525             U0CSR = 0xC0;                    //ÉèÖÃÎªUARTÄ£Ê½,¶øÇÒÊ¹ÄÜ½ÓÊÜÆ÷
   \   00000B   7586C0       MOV     0x86,#-0x40
    526             
    527             U0GCR = 11;
   \   00000E   75C50B       MOV     0xc5,#0xb
    528             U0BAUD = 216;                    //ÉèÖÃUART0²¨ÌØÂÊÎª115200bps
   \   000011   75C2D8       MOV     0xc2,#-0x28
    529            
    530          }
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE U0CSR
   \   000017                REQUIRE U0BAUD
   \   000017                REQUIRE U0UCR
   \   000017                REQUIRE U0GCR
   \   000017                REQUIRE PERCFG
   \   000017                REQUIRE P0SEL
    531          /*UART0·¢ËÍÊý¾Ý
    532          -------------------------------------------------------*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void  rfid_uart_send(unsigned char data)
   \                     rfid_uart_send:
    534          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    535            U0DBUF = data;
   \   000000   89C1         MOV     0xc1,R1
    536            while(!UTX0IF);    //µÈ´ýUART¿ÕÏÐÊ±·¢ËÍÊý¾Ý
   \                     ??rfid_uart_send_0:
   \   000002   A2E9         MOV     C,0xe8.1
   \   000004   50FC         JNC     ??rfid_uart_send_0
    537            UTX0IF = 0;
   \   000006   C2E9         CLR     0xe8.1
    538          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE U0DBUF
   \   00000B                REQUIRE _A_IRCON2
    539          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          int rfid_uart_recv(void)
   \                     rfid_uart_recv:
    541          {
   \   000000                ; Saved register size: 2
   \   000000                ; Auto size: 0
    542            int data = -1;
   \   000000   7AFF         MOV     R2,#-0x1
   \   000002   7BFF         MOV     R3,#-0x1
    543            unsigned int i=50000;
   \   000004   7850         MOV     R0,#0x50
   \   000006   79C3         MOV     R1,#-0x3d
   \   000008   800D         SJMP    ??rfid_uart_recv_0
    544            while (!URX0IF && --i) { }//²éÑ¯ÊÇ·ñÊÕµ½Êý¾Ý£¬·ñÔò¼ÌÐøµÈ´ý
   \                     ??rfid_uart_recv_1:
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   18           DEC     R0
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   7001         JNZ     ??rfid_uart_recv_2
   \   000014   E9           MOV     A,R1
   \                     ??rfid_uart_recv_2:
   \   000015   600F         JZ      ??rfid_uart_recv_3
   \                     ??rfid_uart_recv_0:
   \   000017   A28B         MOV     C,0x88.3
   \   000019   E8           MOV     A,R0
   \   00001A   50EE         JNC     ??rfid_uart_recv_1
    545            if ( i > 0 ) {
   \   00001C   7001         JNZ     ??rfid_uart_recv_4
   \   00001E   E9           MOV     A,R1
   \                     ??rfid_uart_recv_4:
   \   00001F   6005         JZ      ??rfid_uart_recv_3
    546              data = 0xff & U0DBUF;          //ÌáÈ¡½ÓÊÕµ½µÄÊý¾Ý
   \   000021   AAC1         MOV     R2,0xc1
   \   000023   0B           INC     R3
    547              URX0IF = 0;
   \   000024   C28B         CLR     0x88.3
    548            }
    549            return data;          
   \                     ??rfid_uart_recv_3:
   \   000026   02....       LJMP    ?BRET
   \   000029                REQUIRE _A_TCON
   \   000029                REQUIRE U0DBUF
    550          }
    551          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          void rfid_commands(char *cmd, int len)
   \                     rfid_commands:
    553          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    554            int i;
    555            for (i=0; i<len; i++)
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   \   000013   801B         SJMP    ??rfid_commands_0
    556              rfid_uart_send(cmd[i]);
   \                     ??rfid_commands_1:
   \   000015                ; Setup parameters for call to function rfid_uart_send
   \   000015   EE           MOV     A,R6
   \   000016   25..         ADD     A,?V0 + 2
   \   000018   F582         MOV     DPL,A
   \   00001A   EF           MOV     A,R7
   \   00001B   35..         ADDC    A,?V0 + 3
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   ??rfid_uart_send?relay
   \   000024   E5..         MOV     A,?V0 + 2
   \   000026   2401         ADD     A,#0x1
   \   000028   F5..         MOV     ?V0 + 2,A
   \   00002A   E5..         MOV     A,?V0 + 3
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   F5..         MOV     ?V0 + 3,A
   \                     ??rfid_commands_0:
   \   000030   C3           CLR     C
   \   000031   E5..         MOV     A,?V0 + 2
   \   000033   95..         SUBB    A,?V0 + 0
   \   000035   E5..         MOV     A,?V0 + 3
   \   000037   95..         SUBB    A,?V0 + 1
   \   000039   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00003B   65D0         XRL     A,PSW
   \   00003D   33           RLC     A
   \   00003E   40D5         JC      ??rfid_commands_1
    557          }
   \   000040   02....       LJMP    ?Subroutine2 & 0xFFFF
    558          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          char datxor(char *dat, int len)
   \                     datxor:
    560          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    561            char x = 'X';
   \   000005   7958         MOV     R1,#0x58
    562            char i;
    563            for (i=0; i<len; i++) {
   \   000007   7E00         MOV     R6,#0x0
   \   000009   800F         SJMP    ??datxor_0
    564              x ^= dat[i];
   \                     ??datxor_1:
   \   00000B   EA           MOV     A,R2
   \   00000C   25..         ADD     A,?V0 + 0
   \   00000E   F582         MOV     DPL,A
   \   000010   EB           MOV     A,R3
   \   000011   3400         ADDC    A,#0x0
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C9           XCH     A,R1
   \   000017   69           XRL     A,R1
   \   000018   F9           MOV     R1,A
    565            }
   \   000019   0E           INC     R6
   \                     ??datxor_0:
   \   00001A   8E..         MOV     ?V0 + 0,R6
   \   00001C   C3           CLR     C
   \   00001D   E5..         MOV     A,?V0 + 0
   \   00001F   9C           SUBB    A,R4
   \   000020   E4           CLR     A
   \   000021   9D           SUBB    A,R5
   \   000022   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000024   65D0         XRL     A,PSW
   \   000026   33           RLC     A
   \   000027   40E2         JC      ??datxor_1
    566            return x;
   \   000029   02....       LJMP    ?Subroutine0 & 0xFFFF
    567          }
    568          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    569          char cmd[16];
   \                     cmd:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    570          char dat[32];
   \                     dat:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    571          int rfid_id(char *id)
   \                     rfid_id:
    572          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    573            
    574            char idx = 0;
    575            cmd[0] = 0x02, cmd[1] = 0x00, cmd[2] = 0x02;
   \   000009   7402         MOV     A,#0x2
   \   00000B   90....       MOV     DPTR,#cmd
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   E4           CLR     A
   \   000010   90....       MOV     DPTR,#(cmd + 1)
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7402         MOV     A,#0x2
   \   000016   90....       MOV     DPTR,#(cmd + 2)
   \   000019   F0           MOVX    @DPTR,A
    576            rfid_commands(cmd, 3);
   \   00001A                ; Setup parameters for call to function rfid_commands
   \   00001A   7C03         MOV     R4,#0x3
   \   00001C   7D00         MOV     R5,#0x0
   \   00001E   7A..         MOV     R2,#(cmd & 0xff)
   \   000020   7B..         MOV     R3,#((cmd >> 8) & 0xff)
   \   000022   12....       LCALL   ??rfid_commands?relay
    577            
    578            dat[idx++] = rfid_uart_recv();
   \   000025                ; Setup parameters for call to function rfid_uart_recv
   \   000025   12....       LCALL   ??rfid_uart_recv?relay
   \   000028   EA           MOV     A,R2
   \   000029   90....       MOV     DPTR,#dat
   \   00002C   12....       LCALL   ?Subroutine4 & 0xFFFF
    579            dat[idx++] = rfid_uart_recv();
   \                     ??CrossCallReturnLabel_2:
   \   00002F   90....       MOV     DPTR,#(dat + 1)
   \   000032   12....       LCALL   ?Subroutine4 & 0xFFFF
    580            dat[idx++] = rfid_uart_recv();
   \                     ??CrossCallReturnLabel_3:
   \   000035   90....       MOV     DPTR,#(dat + 2)
   \   000038   F0           MOVX    @DPTR,A
    581            if (dat[0]!=0x02 || dat[1]!=0x00 || dat[2]!=0x00){
   \   000039   90....       MOV     DPTR,#dat
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6402         XRL     A,#0x2
   \   00003F   700C         JNZ     ??rfid_id_0
   \   000041   90....       MOV     DPTR,#(dat + 1)
   \   000044   E0           MOVX    A,@DPTR
   \   000045   7006         JNZ     ??rfid_id_0
   \   000047   90....       MOV     DPTR,#(dat + 2)
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   600C         JZ      ??rfid_id_1
    582              dat[idx++] = rfid_uart_recv(); // ck
   \                     ??rfid_id_0:
   \   00004D                ; Setup parameters for call to function rfid_uart_recv
   \   00004D   12....       LCALL   ??rfid_uart_recv?relay
   \   000050   EA           MOV     A,R2
   \   000051   90....       MOV     DPTR,#(dat + 3)
   \   000054   F0           MOVX    @DPTR,A
    583              return 0;
   \                     ??rfid_id_2:
   \   000055   7A00         MOV     R2,#0x0
   \   000057   8057         SJMP    ??rfid_id_3
    584            }
    585            dat[idx++] = rfid_uart_recv();
   \                     ??rfid_id_1:
   \   000059                ; Setup parameters for call to function rfid_uart_recv
   \   000059   12....       LCALL   ??rfid_uart_recv?relay
   \   00005C   EA           MOV     A,R2
   \   00005D   90....       MOV     DPTR,#(dat + 3)
   \   000060   12....       LCALL   ?Subroutine4 & 0xFFFF
    586            dat[idx++] = rfid_uart_recv();
   \                     ??CrossCallReturnLabel_4:
   \   000063   90....       MOV     DPTR,#(dat + 4)
   \   000066   12....       LCALL   ?Subroutine4 & 0xFFFF
    587            dat[idx++] = rfid_uart_recv();
   \                     ??CrossCallReturnLabel_5:
   \   000069   90....       MOV     DPTR,#(dat + 5)
   \   00006C   12....       LCALL   ?Subroutine4 & 0xFFFF
    588            dat[idx++] = rfid_uart_recv();
   \                     ??CrossCallReturnLabel_6:
   \   00006F   90....       MOV     DPTR,#(dat + 6)
   \   000072   12....       LCALL   ?Subroutine4 & 0xFFFF
    589            
    590            dat[idx++] = rfid_uart_recv();
   \                     ??CrossCallReturnLabel_7:
   \   000075   90....       MOV     DPTR,#(dat + 7)
   \   000078   F0           MOVX    @DPTR,A
    591          
    592            if (datxor(dat, idx)) {
   \   000079                ; Setup parameters for call to function datxor
   \   000079   7C08         MOV     R4,#0x8
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7A..         MOV     R2,#(dat & 0xff)
   \   00007F   7B..         MOV     R3,#((dat >> 8) & 0xff)
   \   000081   12....       LCALL   ??datxor?relay
   \   000084   E9           MOV     A,R1
   \   000085   70CE         JNZ     ??rfid_id_2
    593              return 0;
    594            }
    595            if (id != NULL) {
   \   000087   EE           MOV     A,R6
   \   000088   7001         JNZ     ??rfid_id_4
   \   00008A   EF           MOV     A,R7
   \                     ??rfid_id_4:
   \   00008B   6021         JZ      ??rfid_id_5
    596              id[0] = dat[3];
   \   00008D   90....       MOV     DPTR,#(dat + 3)
   \   000090   E0           MOVX    A,@DPTR
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   F0           MOVX    @DPTR,A
    597              id[1] = dat[4];
   \   000096   90....       MOV     DPTR,#(dat + 4)
   \   000099   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00009C   F0           MOVX    @DPTR,A
    598              id[2] = dat[5];
   \   00009D   90....       MOV     DPTR,#(dat + 5)
   \   0000A0   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A3   A3           INC     DPTR
   \   0000A4   F0           MOVX    @DPTR,A
    599              id[3] = dat[6];
   \   0000A5   90....       MOV     DPTR,#(dat + 6)
   \   0000A8   12....       LCALL   ?Subroutine5 & 0xFFFF
    600            }
   \                     ??CrossCallReturnLabel_10:
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   F0           MOVX    @DPTR,A
    601            return 1;
   \                     ??rfid_id_5:
   \   0000AE   7A01         MOV     R2,#0x1
   \                     ??rfid_id_3:
   \   0000B0   7B00         MOV     R3,#0x0
   \   0000B2   02....       LJMP    ?Subroutine1 & 0xFFFF
    602          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function rfid_uart_recv
   \   000001                ; Setup parameters for call to function rfid_uart_recv
   \   000001                ; Setup parameters for call to function rfid_uart_recv
   \   000001                ; Setup parameters for call to function rfid_uart_recv
   \   000001                ; Setup parameters for call to function rfid_uart_recv
   \   000001                ; Setup parameters for call to function rfid_uart_recv
   \   000001   12....       LCALL   ??rfid_uart_recv?relay
   \   000004   EA           MOV     A,R2
   \   000005   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   1027         DW 10000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myCheckCardDelay>`:
   \   000000   FA00         DW 250

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for rfidOn>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleOsalEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBindConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_HanderMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HanderMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReceiveDataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??paramRead?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    paramRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_uart_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_uart_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_uart_send?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_uart_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_uart_recv?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_uart_recv

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_commands?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_commands

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??datxor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    datxor

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rfid_id?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rfid_id

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     datxor                         0      0     19
     paramRead                      1      0     95
       -> ZMacGetReq                0      0     26
       -> MT_ReverseBytes           0      0     26
       -> AssocMakeList             0      0     26
     rfid_commands                  0      0     21
       -> rfid_uart_send            0      0     24
     rfid_id                        1      0     27
       -> rfid_commands             0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> rfid_uart_recv            0      0     18
       -> datxor                    0      0     18
     rfid_uart_init                 0      0     18
     rfid_uart_recv                 2      0      9
     rfid_uart_send                 0      0     12
     zb_AllowBindConfirm            0      0      0
     zb_BindConfirm                 0      0      0
     zb_FindDeviceConfirm           0      0      0
     zb_HanderMsg                   0      0      0
     zb_HandleKeys                  0      0      0
     zb_HandleOsalEvent             1      0     23
       -> zb_ReadConfiguration      0      0     36
       -> zb_WriteConfiguration     0      0     36
       -> zb_ReadConfiguration      0      0     36
       -> zb_WriteConfiguration     0      0     36
       -> rfid_uart_init            0      0     36
       -> osal_start_timerEx        0      0     36
       -> zb_StartRequest           0      0     36
       -> rfid_id                   0      0     36
       -> HalLedSet                 0      0     36
       -> zb_SendDataRequest        0      0     46
       -> HalLedSet                 0      0     36
       -> osal_start_timerEx        0      0     36
     zb_ReceiveDataIndication       1      0     91
       -> HalLedSet                 0      0    164
       -> HalLedSet                 0      0    164
       -> zb_SendDataRequest        0      0    174
       -> zb_SendDataRequest        0      0    174
       -> paramRead                 0      0    164
       -> zb_SendDataRequest        0      0    174
       -> zb_SendDataRequest        0      0    174
     zb_SendDataConfirm             0      0      0
     zb_StartConfirm                0      0      9
       -> osal_start_timerEx        0      0     18


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     U0CSR                                   1
     _A_TCON                                 1
     U0DBUF                                  1
     U0BAUD                                  1
     U0UCR                                   1
     U0GCR                                   1
     _A_IRCON2                               1
     PERCFG                                  1
     P0SEL                                   1
     myAppState                              1
     myStartRetryDelay                       2
     myCheckCardDelay                        2
     rfidOn                                  1
     zb_InCmdList                            4
     zb_OutCmdList                           6
     zb_SimpleDesc                          12
     zb_HandleOsalEvent                    350
     ?Subroutine0                            5
     ?Subroutine3                           21
     card                                    1
     id                                      4
     zb_HandleKeys                           3
     zb_StartConfirm                        36
     ?Subroutine1                            5
     zb_SendDataConfirm                      3
     zb_BindConfirm                          3
     zb_AllowBindConfirm                     3
     zb_FindDeviceConfirm                    3
     zb_HanderMsg                            3
     zb_ReceiveDataIndication              471
     ?Subroutine8                           22
     ?Subroutine7                            9
     paramRead                             322
     ?Subroutine2                            5
     ?Subroutine6                            6
     ?Subroutine9                            1
     ??Subroutine10_0                        7
     rfid_uart_init                         23
     rfid_uart_send                         11
     rfid_uart_recv                         41
     rfid_commands                          67
     datxor                                 44
     cmd                                    16
     dat                                    32
     rfid_id                               181
     ?Subroutine5                            7
     ?Subroutine4                            6
     ?<Initializer for myStartRetryDelay>    2
     ?<Initializer for myCheckCardDelay>     2
     ?<Initializer for rfidOn>               1
     ??zb_HandleOsalEvent?relay              6
     ??zb_HandleKeys?relay                   6
     ??zb_StartConfirm?relay                 6
     ??zb_SendDataConfirm?relay              6
     ??zb_BindConfirm?relay                  6
     ??zb_AllowBindConfirm?relay             6
     ??zb_FindDeviceConfirm?relay            6
     ??zb_HanderMsg?relay                    6
     ??zb_ReceiveDataIndication?relay        6
     ??paramRead?relay                       6
     ??rfid_uart_init?relay                  6
     ??rfid_uart_send?relay                  6
     ??rfid_uart_recv?relay                  6
     ??rfid_commands?relay                   6
     ??datxor?relay                          6
     ??rfid_id?relay                         6

 
 1 658 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     9 bytes in segment SFR_AN
     5 bytes in segment XDATA_I
     5 bytes in segment XDATA_ID
    22 bytes in segment XDATA_ROM_C
    54 bytes in segment XDATA_Z
 
 1 759 bytes of CODE  memory
    22 bytes of CONST memory
     0 bytes of DATA  memory (+ 9 bytes shared)
    59 bytes of XDATA memory

Errors: none
Warnings: 1
