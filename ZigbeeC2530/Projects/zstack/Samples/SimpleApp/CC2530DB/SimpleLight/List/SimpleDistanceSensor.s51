///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.60.1.40026 for 8051            06/Sep/2011  20:18:13 /
// Copyright (C) 2004-2010 IAR Systems AB.                                    /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\Source\SimpleDistanceSensor.c       /
//    Command line       =  -f "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func       /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f "H:\3gbox\zigbee\zigbee×Ûº /
//                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack             /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"      /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "H:\3gbox\zigbee\zigbee×Ûº /
//                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack             /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\Sou /
//                          rce\SimpleDistanceSensor.c" -D NWK_AUTO_POLL -D   /
//                          HOLD_AUTO_START -D REFLECTOR -D POWER_SAVING -D   /
//                          NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK   /
//                          -D xMT_SYS_FUNC -D xMT_SAPI_FUNC -D               /
//                          xMT_SAPI_CB_FUNC -lC "H:\3gbox\zigbee\zigbee×ÛºÏÓ /
//                          ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack               /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\SimpleLight\List\" -lA                      /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\SimpleLight\List\"         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\SimpleLight\Obj\" -e       /
//                          --require_prototypes --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\" -I                       /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\Source\" -I             /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\ZMain\TI2530DB\"  /
//                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\..\..\Components /
//                          \hal\include\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃ /
//                          ÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                  /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\hal\target\CC2530 /
//                          EB\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\c /
//                          c2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstac /
//                          k\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\include\" -I "H:\3gbox\zigbee\zigbee×Ûº /
//                          ÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack             /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\mac\high_level\"  /
//                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\" -I                         /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\" -I              /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          mt\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\c /
//                          c2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstac /
//                          k\Samples\SimpleApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\osal\include\" -I                           /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          osal\mcu\ccsoc\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ /
//                          ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\services\saddr\"  /
//                          -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 /
//                           ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Sam /
//                          ples\SimpleApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\sdata\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ /
//                          ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack               /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\stack\af\" -I     /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\nwk\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ /
//                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                     /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\stack\sapi\" -I   /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\sec\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ /
//                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                     /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\stack\sys\" -I    /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          stack\zdo\" -I "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ /
//                          ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack                     /
//                          2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\zmac\" -I         /
//                          "H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530    /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\..\..\..\..\..\Components\ /
//                          zmac\f8w\" -I "D:\Program Files\IAR               /
//                          Systems\Embedded Workbench 5.4\8051\INC\" -I      /
//                          "D:\Program Files\IAR Systems\Embedded Workbench  /
//                          5.4\8051\INC\CLIB\" -Ohz                          /
//    List file          =  H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530     /
//                          ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samp /
//                          les\SimpleApp\CC2530DB\SimpleLight\List\SimpleDis /
//                          tanceSensor.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SimpleDistanceSensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??paramRead?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HanderMsg?relay
        FUNCTION ??zb_HanderMsg?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        FUNCTION paramRead,0a1203H
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HanderMsg
        FUNCTION zb_HanderMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 87, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
srf05Init           SYMBOL "srf05Init"
zb_StartRequest     SYMBOL "zb_StartRequest"
HalLedSet           SYMBOL "HalLedSet"
srf05Distance       SYMBOL "srf05Distance"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
ZMacGetReq          SYMBOL "ZMacGetReq"
MT_ReverseBytes     SYMBOL "MT_ReverseBytes"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??MT_ReverseBytes?relay SYMBOL "?relay", MT_ReverseBytes
??ZMacGetReq?relay  SYMBOL "?relay", ZMacGetReq
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??srf05Distance?relay SYMBOL "?relay", srf05Distance
??srf05Init?relay   SYMBOL "?relay", srf05Init
??zb_ReadConfiguration?relay SYMBOL "?relay", zb_ReadConfiguration
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
??zb_WriteConfiguration?relay SYMBOL "?relay", zb_WriteConfiguration
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HanderMsg        SYMBOL "zb_HanderMsg"
??zb_HanderMsg?relay SYMBOL "?relay", zb_HanderMsg
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN srf05Init
        FUNCTION srf05Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN srf05Distance
        FUNCTION srf05Distance,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ReverseBytes
        FUNCTION MT_ReverseBytes,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??MT_ReverseBytes?relay
        FUNCTION ??MT_ReverseBytes?relay,00H
        EXTERN ??ZMacGetReq?relay
        FUNCTION ??ZMacGetReq?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??srf05Distance?relay
        FUNCTION ??srf05Distance?relay,00H
        EXTERN ??srf05Init?relay
        FUNCTION ??srf05Init?relay,00H
        EXTERN ??zb_ReadConfiguration?relay
        FUNCTION ??zb_ReadConfiguration?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,00H
        EXTERN ??zb_WriteConfiguration?relay
        FUNCTION ??zb_WriteConfiguration?relay,00H
        EXTERN sapi_TaskID

// H:\3gbox\zigbee\zigbee×ÛºÏÓ¦ÓÃÑÝÊ¾´úÂë\cc2530 ×ÛºÏÊµÑé z-stack 2.4.0-1.4.0\Projects\zstack\Samples\SimpleApp\Source\SimpleDistanceSensor.c
//    1 
//    2 /**************************************************************************************************
//    3   Filename:       SimpleSwitch.c
//    4   Revised:        $Date: 2007-10-27 17:16:54 -0700 (Sat, 27 Oct 2007) $
//    5   Revision:       $Revision: 15793 $
//    6 
//    7   Description:    Sample application for a simple light switch utilizing the Simple API.
//    8 
//    9 
//   10   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com. 
//   39 **************************************************************************************************/
//   40 
//   41 /******************************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "sapi.h"
//   48 #include "hal_key.h"
//   49 #include "hal_led.h"
//   50 #include "hal_adc.h"
//   51 #include "hal_mcu.h"
//   52 #include "SimpleApp.h"
//   53 
//   54 
//   55 #include "mt.h"
//   56 
//   57 #include "ys-srf05.h"
//   58 
//   59 /*********************************************************************
//   60  * CONSTANTS
//   61  */
//   62 
//   63 // Application States
//   64 #define APP_INIT                           0    // Initial state
//   65 #define APP_START                          1    // Sensor has joined network
//   66 #define APP_BOUND                          2    // Sensor is bound to collector
//   67 
//   68 // Application osal event identifiers
//   69 // Bit mask of events ( from 0x0000 to 0x00FF )
//   70 #define MY_START_EVT                0x0001
//   71 #define MY_REPORT_DISTANCE_EVT          0x0002
//   72 #define MY_REPORT_BATT_EVT          0x0004
//   73 #define MY_FIND_COLLECTOR_EVT       0x0008
//   74 /*********************************************************************
//   75  * TYPEDEFS
//   76  */
//   77 
//   78 /*********************************************************************
//   79  * LOCAL VARIABLES
//   80  */
//   81 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   82 static uint8 myAppState = APP_INIT;
myAppState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   83 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//   84 static uint16 myStartRetryDelay = 10000;      // milliseconds
myStartRetryDelay:
        DS 2
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I
//   85 
//   86 
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   88 static byte myWorkMode = 0;
myWorkMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   89 static byte myTrigeMode = 0;
//   90 /*********************************************************************
//   91  * GLOBAL VARIABLES
//   92  */
//   93 
//   94 // Inputs and Outputs for Switch device
//   95 #define NUM_IN_CMD_SENSOR                 2
//   96 #define NUM_OUT_CMD_SENSOR                3
//   97 
//   98 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//   99 const cId_t zb_InCmdList[NUM_IN_CMD_SENSOR] =
zb_InCmdList:
        DW 1, 2
//  100 {
//  101   ID_CMD_READ_REQ,
//  102   ID_CMD_WRITE_REQ,
//  103 };

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  104 const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
zb_OutCmdList:
        DW 32769, 32770, 3
//  105 {
//  106     ID_CMD_READ_RES,
//  107     ID_CMD_WRITE_RES,
//  108     ID_CMD_REPORT,
//  109 };
//  110 
//  111 
//  112 #define TEMP_REPORT     0x01
//  113 #define BATTERY_REPORT 0x02
//  114 
//  115 
//  116 // Define SimpleDescriptor for Switch device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  117 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DW 3856, 1
        DB 1, 2
        DW zb_InCmdList
        DB 3
        DW zb_OutCmdList
//  118 {
//  119   MY_ENDPOINT_ID,             //  Endpoint
//  120   MY_PROFILE_ID,              //  Profile ID
//  121   DEV_ID_SENTEMP,              //  Device ID
//  122   DEVICE_VERSION_SENSOR,      //  Device Version
//  123   0,                          //  Reserved
//  124   NUM_IN_CMD_SENSOR,          //  Number of Input Commands
//  125   (cId_t *) zb_InCmdList,             //  Input Command List
//  126   NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
//  127   (cId_t *) zb_OutCmdList     //  Output Command List
//  128 };
//  129 
//  130 /********************************************************
//  131  *
//  132  */
//  133 void zb_HanderMsg(osal_event_hdr_t *msg);
//  134 
//  135 /*********************************************************************
//  136  * LOCAL FUNCTIONS
//  137  */
//  138 
//  139 
//  140 
//  141 
//  142 static int paramWrite(uint16 pid, byte *dat);
//  143 static int paramRead(uint16 pid, byte *dat);
//  144 
//  145 /*****************************************************************************
//  146  * @fn          zb_HandleOsalEvent
//  147  *
//  148  * @brief       The zb_HandleOsalEvent function is called by the operating
//  149  *              system when a task event is set
//  150  *
//  151  * @param       event - Bitmask containing the events that have been set
//  152  *
//  153  * @return      none
//  154  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  155 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
//  156 {
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, srf05Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, srf05Distance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  157   uint8 pData[4];
//  158 
//  159   
//  160    if (event & ZB_ENTRY_EVENT) {
        MOV     A,#0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??zb_HandleOsalEvent_0
        MOV     A,R1
??zb_HandleOsalEvent_0:
        JZ      ??zb_HandleOsalEvent_1
//  161         uint8 startOptions;
//  162         uint8 logicalType;
//  163   
//  164         zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_ReadConfiguration?relay
//  165         if ( logicalType != ZG_DEVICETYPE_ENDDEVICE )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??zb_HandleOsalEvent_2
//  166         {
//  167           logicalType = ZG_DEVICETYPE_ENDDEVICE;
        MOV     A,#0x2
        MOVX    @DPTR,A
//  168           zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_WriteConfiguration?relay
//  169         }
//  170 
//  171         // Do more configuration if necessary and then restart device with auto-start bit set
//  172         // write endpoint to simple desc...dont pass it in start req..then reset
//  173         zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
??zb_HandleOsalEvent_2:
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_ReadConfiguration?relay
//  174         if (startOptions != ZCD_STARTOPT_AUTO_START) {
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??zb_HandleOsalEvent_3
//  175           startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     A,#0x4
        MOVX    @DPTR,A
//  176           zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_WriteConfiguration?relay
//  177         }  
//  178         
//  179         srf05Init();
??zb_HandleOsalEvent_3:
        ; Setup parameters for call to function srf05Init
        LCALL   ??srf05Init?relay
//  180   }
//  181   
//  182   if ( event & MY_START_EVT )
??zb_HandleOsalEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleOsalEvent_4
//  183   {
//  184     
//  185     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  186   }
//  187   
//  188   if (event & MT_SYS_APP_MSG) 
//  189   {
//  190     /*    HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
//  191     
//  192     pData[0] = TEMP_REPORT;
//  193     pData[1] =  myApp_ReadTemperature();
//  194     zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, 2, pData, 0, AF_ACK_REQUEST, 0 );
//  195     */
//  196   }
//  197   
//  198   if ( event & MY_REPORT_DISTANCE_EVT )
??zb_HandleOsalEvent_4:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??CrossCallReturnLabel_0
//  199   {
//  200     // Read and report temperature value
//  201     HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  202     
//  203     pData[0] =  0x06;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  204     pData[1] =  0x02;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  205     pData[2] = 0xff & srf05Distance();
        ; Setup parameters for call to function srf05Distance
        LCALL   ??srf05Distance?relay
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  206     zb_SendDataRequest(0, ID_CMD_REPORT, 3, pData, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x3
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  207     osal_start_timerEx( sapi_TaskID, MY_REPORT_DISTANCE_EVT, myWorkMode*1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myWorkMode
        MOVX    A,@DPTR
        LCALL   ?Subroutine1 & 0xFFFF
//  208   }
//  209 }
??CrossCallReturnLabel_0:
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  210 /*********************************************************************
//  211  * @fn      zb_HandleKeys
//  212  *
//  213  * @brief   Handles all key events for this device.
//  214  *
//  215  * @param   shift - true if in shift/alt.
//  216  * @param   keys - bit field for key events. Valid entries:
//  217  *                 EVAL_SW4
//  218  *                 EVAL_SW3
//  219  *                 EVAL_SW2
//  220  *                 EVAL_SW1
//  221  *
//  222  * @return  none
//  223  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  224 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function zb_HandleKeys
//  225 {
        ; Saved register size: 0
        ; Auto size: 0
//  226  
//  227 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//  228 /******************************************************************************
//  229  * @fn          zb_StartConfirm
//  230  *
//  231  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  232  *              after a start request operation completes
//  233  *
//  234  * @param       status - The status of the start operation.  Status of
//  235  *                       ZB_SUCCESS indicates the start operation completed
//  236  *                       successfully.  Else the status is an error code.
//  237  *
//  238  * @return      none
//  239  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  240 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function zb_StartConfirm
//  241 {
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  242   if ( status == ZB_SUCCESS )
        JNZ     ??zb_StartConfirm_0
//  243   {
//  244     myAppState = APP_START;
        MOV     A,#0x1
        MOV     DPTR,#myAppState
        MOVX    @DPTR,A
        SJMP    ??zb_StartConfirm_1
//  245     // Set event to bind to a collector
//  246     //osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
//  247   }
//  248   else
//  249   {
//  250     // Try joining again later with a delay
//  251     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  252   }
//  253 }
??zb_StartConfirm_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  254 /******************************************************************************
//  255  * @fn          zb_SendDataConfirm
//  256  *
//  257  * @brief       The zb_SendDataConfirm callback function is called by the
//  258  *              ZigBee after a send data operation completes
//  259  *
//  260  * @param       handle - The handle identifying the data transmission.
//  261  *              status - The status of the operation.
//  262  *
//  263  * @return      none
//  264  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function zb_SendDataConfirm
//  266 {
        ; Saved register size: 0
        ; Auto size: 0
//  267   if ( status != ZSuccess )
//  268   {
//  269     // Remove bindings to the existing collector
//  270 
//  271   }
//  272   else
//  273   {
//  274     // send data ??
//  275   }
//  276 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  277 /******************************************************************************
//  278  * @fn          zb_BindConfirm
//  279  *
//  280  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  281  *              after a bind operation completes.
//  282  *
//  283  * @param       commandId - The command ID of the binding being confirmed.
//  284  *              status - The status of the bind operation.
//  285  *
//  286  * @return      none
//  287  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  288 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function zb_BindConfirm
//  289 {
        ; Saved register size: 0
        ; Auto size: 0
//  290 
//  291 
//  292 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock5
//  293 /******************************************************************************
//  294  * @fn          zb_AllowBindConfirm
//  295  *
//  296  * @brief       Indicates when another device attempted to bind to this device
//  297  *
//  298  * @param
//  299  *
//  300  * @return      none
//  301  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  302 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
//  303 {
        ; Saved register size: 0
        ; Auto size: 0
//  304 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
//  305 /******************************************************************************
//  306  * @fn          zb_FindDeviceConfirm
//  307  *
//  308  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  309  *              ZigBee stack when a find device operation completes.
//  310  *
//  311  * @param       searchType - The type of search that was performed.
//  312  *              searchKey - Value that the search was executed on.
//  313  *              result - The result of the search.
//  314  *
//  315  * @return      none
//  316  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  317 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
//  318 {
        ; Saved register size: 0
        ; Auto size: 0
//  319 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  320 
//  321 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  322 void zb_HanderMsg(osal_event_hdr_t *msg)
zb_HanderMsg:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function zb_HanderMsg
//  323 {
        ; Saved register size: 0
        ; Auto size: 0
//  324 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
//  325 
//  326 /******************************************************************************
//  327  * @fn          zb_ReceiveDataIndication
//  328  *
//  329  * @brief       The zb_ReceiveDataIndication callback function is called
//  330  *              asynchronously by the ZigBee stack to notify the application
//  331  *              when data is received from a peer device.
//  332  *
//  333  * @param       source - The short address of the peer device that sent the data
//  334  *              command - The commandId associated with the data
//  335  *              len - The number of bytes in the pData parameter
//  336  *              pData - The data sent by the peer device
//  337  *
//  338  * @return      none
//  339  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  340 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
zb_ReceiveDataIndication:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
//  341 {
        FUNCALL zb_ReceiveDataIndication, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, paramRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 64
        MOV     A,#-0x40
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 8,R4
        MOV     ?V0 + 9,R5
        MOV     A,#0x52
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x54
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  342   int i;
//  343   uint16 pid;
//  344   byte dat[64];
//  345   byte rlen = 1;
        MOV     ?V0 + 6,#0x1
//  346   int ret;
//  347   
//  348   HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  349   HalLedSet( HAL_LED_1, HAL_LED_MODE_BLINK ); 
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x2
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  350   switch (command) {
        MOV     R0,#?V0 + 8
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zb_ReceiveDataIndication>_0`:
        DATA
        DW        1
        DB        1
        DW        ??zb_ReceiveDataIndication_0
        DW        ??zb_ReceiveDataIndication_1
        DW        ??zb_ReceiveDataIndication_2
        CODE
//  351   case ID_CMD_WRITE_REQ:
//  352     for (i=0; i<len; i+=2) {
??zb_ReceiveDataIndication_2:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??zb_ReceiveDataIndication_3
??zb_ReceiveDataIndication_4:
        ; Setup parameters for call to function osal_start_timerEx
//  353       pid = pData[i]<<8 | pData[i+1];
//  354       ret = paramWrite(pid, pData+2);
        LCALL   ?Subroutine1 & 0xFFFF
//  355       if (ret <= 0) {
//  356         dat[0] = 1;
//  357         zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  358         return;
//  359       } 
//  360       i += ret;
??CrossCallReturnLabel_1:
        MOV     A,R6
        ADD     A,#0x3
        INC     R6
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??zb_ReceiveDataIndication_3:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 4
        MOV     A,R7
        SUBB    A,?V0 + 5
        JNC     ??zb_ReceiveDataIndication_5
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??zb_ReceiveDataIndication_6
        MOV     A,#0x6
        XRL     A,R1
??zb_ReceiveDataIndication_6:
        JNZ     ??zb_ReceiveDataIndication_7
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#myWorkMode
        MOVX    @DPTR,A
        JNZ     ??zb_ReceiveDataIndication_4
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??CrossCallReturnLabel_1
??zb_ReceiveDataIndication_7:
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 2,#0x0
??zb_ReceiveDataIndication_8:
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 2,#0x10
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x1
        MOV     R4,#0x2
        LJMP    ??zb_ReceiveDataIndication_9 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 82)
//  361     }
//  362     dat[0] = 0;
??zb_ReceiveDataIndication_5:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  363     zb_SendDataRequest( source, ID_CMD_WRITE_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 2,A
        SJMP    ??zb_ReceiveDataIndication_8
//  364     break;
//  365   case ID_CMD_READ_REQ:
//  366     for (i=0; i<len; i+=2) {
??zb_ReceiveDataIndication_1:
        MOV     R6,#0x0
        MOV     R7,#0x0
        SJMP    ??zb_ReceiveDataIndication_10
//  367       pid = pData[i]<<8 | pData[i+1];
//  368       dat[rlen++] = pData[i];
//  369       dat[rlen++] = pData[i+1];
//  370       ret = paramRead(pid, dat+rlen);
//  371       if (ret <= 0) {
//  372         dat[0] = 1;
//  373         zb_SendDataRequest( source, ID_CMD_READ_RES, 1, dat, 0, AF_ACK_REQUEST, 0 );
//  374         return;
//  375       }
//  376       rlen += ret;
??zb_ReceiveDataIndication_11:
        MOV     A,R0
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??zb_ReceiveDataIndication_10:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 4
        MOV     A,R7
        SUBB    A,?V0 + 5
        JC      $+5
        LJMP    ??zb_ReceiveDataIndication_12 & 0xFFFF
        MOV     A,?V0 + 2
        ADD     A,R6
        MOV     R0,A
        MOV     A,?V0 + 3
        ADDC    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,R3
        MOVX    @DPTR,A
        INC     ?V0 + 6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     ?V0 + 6
        ; Setup parameters for call to function paramRead
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     R4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ??paramRead?relay
        MOV     ?V0 + 8,R2
        MOV     R0,?V0 + 8
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??zb_ReceiveDataIndication_11
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 2,#0x10
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x1
        SJMP    ??zb_ReceiveDataIndication_13
        CFI CFA_XSP16 add(XSP16, 82)
//  377     }
//  378     dat[0] = 0;
??zb_ReceiveDataIndication_12:
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  379     zb_SendDataRequest( source, ID_CMD_READ_RES, rlen, dat, 0, AF_ACK_REQUEST, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 2,#0x10
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,?V0 + 6
??zb_ReceiveDataIndication_13:
        MOV     R4,#0x1
??zb_ReceiveDataIndication_9:
        MOV     R5,#-0x80
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 82)
//  380     break;
//  381   }
//  382 }
??zb_ReceiveDataIndication_0:
        MOV     A,#0x40
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+-1
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R4,A
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R4
        MOV     R2,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
//  383 
//  384 
//  385 
//  386 
//  387 static int paramWrite(uint16 pid, byte *dat)
//  388 {
//  389   int len = 0;
//  390   switch (pid) {
//  391   case 0x0601:
//  392     myWorkMode = dat[0]; 
//  393     len = 1;
//  394     
//  395     if (myWorkMode) {
//  396       osal_start_timerEx( sapi_TaskID, MY_REPORT_DISTANCE_EVT, myWorkMode*1000);  
//  397     } else {
//  398       osal_stop_timerEx( sapi_TaskID, MY_REPORT_DISTANCE_EVT );
//  399     }
//  400     break;
//  401   }
//  402   return len;
//  403 }
//  404 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  405 static int paramRead(uint16 pid, byte *dat)
paramRead:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function paramRead
//  406 {
        FUNCALL paramRead, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL paramRead, MT_ReverseBytes
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL paramRead, srf05Distance
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  407   int len = 0;
        MOV     R4,#0x0
//  408   switch (pid) {
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for paramRead>_0`:
        DATA
        DW        0
        DW        9
        DW        1
        DW        ??paramRead_0
        DW        2
        DW        ??paramRead_1
        DW        3
        DW        ??paramRead_2
        DW        4
        DW        ??paramRead_3
        DW        5
        DW        ??paramRead_4
        DW        20
        DW        ??paramRead_5
        DW        21
        DW        ??paramRead_6
        DW        1537
        DW        ??paramRead_7
        DW        1538
        DW        ??paramRead_8
        DW        ??paramRead_9
        CODE
//  409   case 0x0001:
//  410     dat[0] = 0x11; dat[1] = 0x33;
??paramRead_0:
        MOV     A,#0x11
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x33
??paramRead_10:
        INC     DPTR
        MOVX    @DPTR,A
//  411     len = 2;
        INC     R4
??paramRead_11:
        INC     R4
        SJMP    ??paramRead_9
//  412     break;
//  413   case 0x0002:
//  414     dat[0] = 0x22; dat[1] = 0x44;
??paramRead_1:
        MOV     A,#0x22
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x44
        SJMP    ??paramRead_10
//  415     len = 2;
//  416     break;
//  417   case 0x0003:
//  418     dat[0] = 0x00; dat[1] = 0x01;
??paramRead_2:
        CLR     A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     A,#0x1
        SJMP    ??paramRead_10
//  419     len = 2;
//  420     break;
//  421   case 0x0004:
//  422     dat[0] = dat[1] = dat[2] = dat[3] = dat[4] = dat[5] = 1;
??paramRead_3:
        MOV     A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  423     len = 6;
        MOV     R4,#0x6
        SJMP    ??paramRead_9
//  424     break;
//  425   case 0x0005:
//  426     dat[0] = DEV_ID_SENDISTENCE;
??paramRead_4:
        MOV     A,#0x6
??paramRead_12:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  427     len = 1;
        SJMP    ??paramRead_11
//  428     break;
//  429 
//  430   /* -----------  ÍøÂç²ÎÊý ------------------- */  
//  431   case 0x0014: //macµØÖ·
//  432      /*osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf ); rm by liren */
//  433     ZMacGetReq( ZMacExtAddr, dat ); // add by liren
??paramRead_5:
        ; Setup parameters for call to function ZMacGetReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#-0x1e
        LCALL   ??ZMacGetReq?relay
//  434     // Outgoing extended address needs to be reversed
//  435     MT_ReverseBytes( dat, Z_EXTADDR_LEN );
        ; Setup parameters for call to function MT_ReverseBytes
        MOV     R1,#0x8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MT_ReverseBytes?relay
//  436     len = Z_EXTADDR_LEN;
        MOV     R4,#0x8
        SJMP    ??paramRead_9
//  437     break;
//  438   case 0x0015:
//  439   {
//  440       uint8 assocCnt = 0;
//  441       uint16 *assocList;
//  442       int i;
//  443 #if defined(RTR_NWK) && !defined( NONWK )
//  444     assocList = AssocMakeList( &assocCnt );
//  445 #else
//  446     assocCnt = 0;
//  447     assocList = NULL;
//  448 #endif
//  449     dat[0] = assocCnt;
??paramRead_6:
        CLR     A
        SJMP    ??paramRead_12
//  450     for (i=0; i<assocCnt&&i<16; i++) {
//  451       dat[1+2*i] = HI_UINT16(assocList[i]);
//  452       dat[1+2*i+1] = LO_UINT16(assocList[i]);
//  453     }
//  454     len = 1 + 2 * assocCnt;
//  455     break;
//  456   }
//  457   /* --------------------------------------------------------*/
//  458   case 0x0601:
//  459     dat[0] = myWorkMode; 
??paramRead_7:
        MOV     DPTR,#myWorkMode
        MOVX    A,@DPTR
        SJMP    ??paramRead_12
//  460     len = 1;
//  461     break;
//  462   case 0x0602:
//  463     dat[0] = srf05Distance();
??paramRead_8:
        ; Setup parameters for call to function srf05Distance
        LCALL   ??srf05Distance?relay
        MOV     A,R2
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  464     len = 1;
        MOV     R4,#0x1
//  465     break;
//  466   }
//  467   return len;
??paramRead_9:
        MOV     A,R4
        MOV     R2,A
        MOV     R3,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock16
//  468 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_4
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_5
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        INC     DPTR
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_4
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_5
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myStartRetryDelay>`:
        DW 10000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HanderMsg?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HanderMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??paramRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    paramRead

        END
// 
// 1 018 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//    22 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 1 080 bytes of CODE  memory
//    22 bytes of CONST memory
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
